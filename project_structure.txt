📦 СТРУКТУРА ПРОЕКТА
==================================================
📁 .
    📄 readme.md
    📄 requirements.txt
    📄 results.txt
    📄 setup.py
    📄 train_model.py
    📄 train_on_test_data.ipynb
    📁 fmri_processing
        📄 __init__.py
        📄 data_loader.py
        📄 functions.py
        📄 subject_data.py
        📄 subjects_info.py
        📄 utils.py
    📁 project.egg-info
        📄 PKG-INFO
        📄 SOURCES.txt
        📄 dependency_links.txt
        📄 top_level.txt
    📁 scripts
        📄 build_matrix_for_average.py
        📄 create_config.py
        📄 process_subjects_from_config.py
        📄 read_from_nii_and_save.py
        📄 runs_matrix.py
    📁 models
        📄 model.pkl
        📄 ranks_model.pkl
    📁 numpy_matrixes
        📁 average_matrix
            📁 propose
                📁 HC
                    📄 auc0.npy
                    📄 auc1.npy
                    📄 auc2.npy
                    📄 auc3.npy
                    📄 auc4.npy
                    📄 max0.npy
                    📄 max1.npy
                    📄 max2.npy
                    📄 max3.npy
                    📄 max4.npy
                    📄 max_min0.npy
                    📄 max_min1.npy
                    📄 max_min2.npy
                    📄 max_min3.npy
                    📄 max_min4.npy
                    📄 min0.npy
                    📄 min1.npy
                    📄 min2.npy
                    📄 min3.npy
                    📄 min4.npy
                    📁 test
                📁 test
                    📄 auc0.npy
                    📄 auc1.npy
                    📄 auc2.npy
                    📄 auc3.npy
                    📄 auc4.npy
                    📄 max0.npy
                    📄 max1.npy
                    📄 max2.npy
                    📄 max3.npy
                    📄 max4.npy
                    📄 max_min0.npy
                    📄 max_min1.npy
                    📄 max_min2.npy
                    📄 max_min3.npy
                    📄 max_min4.npy
                    📄 min0.npy
                    📄 min1.npy
                    📄 min2.npy
                    📄 min3.npy
                    📄 min4.npy
            📁 HC
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 raw_test
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 raw_HC
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 test
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
        📁 average_stimulus
            📁 card_test_data
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 raw_card_test_data
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 raw_test_data
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 card_hc_data
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 raw_card_hc_data
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 schz
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 card_hc
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 HC
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 raw_schz_data
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 raw_test
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 hc_data
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 test_data
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 raw_hc_data
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 raw_HC
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 test
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 schz_data
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
        📁 ranks_matrix
            📁 card_test_data
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 raw_card_test_data
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 raw_test_data
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 card_hc_data
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 raw_card_hc_data
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 proportional
                📁 card_test_data
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 raw_card_test_data
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 raw_test_data
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 card_hc_data
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 raw_card_hc_data
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 HC
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 raw_schz_data
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 raw_test
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 hc_data
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 test_data
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 raw_hc_data
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 raw_HC
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 test
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 schz_data
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
            📁 card_hc
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 reduced_ranks
                📁 card_test_data
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 raw_card_test_data
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 raw_test_data
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 card_hc_data
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 raw_card_hc_data
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 HC
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 raw_schz_data
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 raw_test
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 hc_data
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 test_data
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 raw_hc_data
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 raw_HC
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 test
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 schz_data
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
            📁 HC
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 raw_schz_data
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 raw_test
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 hc_data
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 test_data
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 raw_hc_data
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 raw_HC
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 test
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 schz_data
                📄 auc.npy
                📄 max.npy
                📄 max_min.npy
                📄 min.npy
            📁 prizes
                📁 HC
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 raw_test
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 raw_HC
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
                📁 test
                    📄 auc.npy
                    📄 max.npy
                    📄 max_min.npy
                    📄 min.npy
    📁 notebooks
        📄 card_test.ipynb
        📄 esembling.ipynb
        📄 plot_ranks_matrixes.ipynb
        📄 train_on_average.ipynb
        📄 train_on_test_data copy.ipynb
        📄 train_on_test_data.ipynb
        📄 visualizing.ipynb
        📁 catboost_info
            📄 catboost_training.json
            📄 learn_error.tsv
            📄 time_left.tsv
            📁 tmp
            📁 learn
                📄 events.out.tfevents
    📁 configs
        📄 card_hc_data.yaml
        📄 card_test_data.yaml
        📄 hc_data.yaml
        📄 raw_card_hc_data.yaml
        📄 raw_card_test_data.yaml
        📄 raw_hc_data.yaml
        📄 raw_schz_data.yaml
        📄 raw_test_data.yaml
        📄 schz_data.yaml
        📄 test_data.yaml

==================================================


📁 .
--------------------------------------------------

📄 requirements.txt
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
numpy
pandas
nilearn
pyyaml
seaborn
matplotlib
Path
==================================================

📄 readme.md
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Программа для анализа fMRI данных

Программа принимает на вход фМРТ данные в формате .nii.gz и файл с временным разбиением. Перед запуском программы необходимо заполнить конфигурационный файл `config.yaml`, указав пути до этих данных.

---

## Настройка конфигурационного файла

### Формат конфигурационного файла:
```yaml
data_path: './data/HC/sub-02/denoised_data.nii.gz'  # Путь к fMRI данным в формате .nii.gz
events_path: './data/HC/sub-02/sub-02_timing.txt'   # Путь к файлу с временным разбиением
tr: 1.0
```
Файл с временным разбиением должен иметь следующий формат:
```
151.16000000	108.22000000	5	1.0. Кирилл
161.18000000	118.24000000	6	 
165.86000000	122.92000000	5	1.1. Дмитрий
...
```
Ожидается, что имя человека называется четвертым.

## Запуск программы

### Запуск через бинарник на Linux

Запустите программу, выполнив команду в терминале:

   ```bash
   ./main
   ```
---

### Запуск через Python
1. Установите необходимые зависимости:

   ```bash
   pip3 install -r requirements.txt
   ```

2. Запустите программу, выполнив команду:

   ```bash
   python3 main.py
   ```
---
==================================================

📄 results.txt
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

==================================================

📄 setup.py
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
from setuptools import setup, find_packages

setup(
    name="project",
    version="0.1",
    packages=find_packages(),
)
==================================================

📄 train_on_test_data.ipynb
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "proportional_train_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/proportional/raw_HC/auc.npy'\n",
    "proportional_test_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/proportional/raw_test/auc.npy'\n",
    "\n",
    "reduced_train_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/reduced_ranks/auc_raw_HC.npy'\n",
    "reduced_test_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/reduced_ranks/auc_test.npy'\n",
    "\n",
    "ranks_train_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/raw_HC/auc.npy'\n",
    "ranks_test_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/raw_test/auc.npy'\n",
    "\n",
    "\n",
    "train_matrix = ranks_train_matrix\n",
    "test_matrix = ranks_test_matrix\n",
    "\n",
    "# train_matrix = reduced_train_matrix\n",
    "# test_matrix = reduced_test_matrix\n",
    "\n",
    "# train_matrix = proportional_train_matrix\n",
    "# test_matrix = proportional_test_matrix \n",
    "\n",
    "# train_matrix, test_matrix = test_matrix, train_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(85, 132)\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "matrix = np.load(train_matrix)\n",
    "N = matrix.shape[0]  # Длина массива\n",
    "sub_num = N // 5    # Количество испытуемых\n",
    "\n",
    "labels = np.zeros(N, dtype=int)  # Создаем массив из нулей\n",
    "labels[3::5] = 1  # Каждый 4-й элемен\n",
    "print(matrix.shape)\n",
    "\n",
    "X = matrix\n",
    "y = labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GroupShuffleSplit\n",
    "\n",
    "# Группы для разделения\n",
    "groups = np.repeat(np.arange(sub_num), 5)  # [0,0,0,0,0, 1,1,1,1,1,...]\n",
    "\n",
    "splitter = GroupShuffleSplit(n_splits=1, test_size=0.3, random_state=30)\n",
    "train_idx, test_idx = next(splitter.split(X, y, groups))\n",
    "\n",
    "X_train, X_test = X[train_idx], X[test_idx]\n",
    "y_train, y_test = y[train_idx], y[test_idx]\n",
    "\n",
    "print(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      1.00      0.89         4\n",
      "           1       0.00      0.00      0.00         1\n",
      "\n",
      "    accuracy                           0.80         5\n",
      "   macro avg       0.40      0.50      0.44         5\n",
      "weighted avg       0.64      0.80      0.71         5\n",
      "\n",
      "ROC-AUC: 0.75\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      1.00      0.89         4\n",
      "           1       0.00      0.00      0.00         1\n",
      "\n",
      "    accuracy                           0.80         5\n",
      "   macro avg       0.40      0.50      0.44         5\n",
      "weighted avg       0.64      0.80      0.71         5\n",
      "\n",
      "ROC-AUC: 1.0\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.75      0.75      0.75         4\n",
      "           1       0.00      0.00      0.00         1\n",
      "\n",
      "    accuracy                           0.60         5\n",
      "   macro avg       0.38      0.38      0.38         5\n",
      "weighted avg       0.60      0.60      0.60         5\n",
      "\n",
      "ROC-AUC: 0.75\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.75      0.75      0.75         4\n",
      "           1       0.00      0.00      0.00         1\n",
      "\n",
      "    accuracy                           0.60         5\n",
      "   macro avg       0.38      0.38      0.38         5\n",
      "weighted avg       0.60      0.60      0.60         5\n",
      "\n",
      "ROC-AUC: 0.75\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00         4\n",
      "           1       1.00      1.00      1.00         1\n",
      "\n",
      "    accuracy                           1.00         5\n",
      "   macro avg       1.00      1.00      1.00         5\n",
      "weighted avg       1.00      1.00      1.00         5\n",
      "\n",
      "ROC-AUC: 1.0\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00         4\n",
      "           1       1.00      1.00      1.00         1\n",
      "\n",
      "    accuracy                           1.00         5\n",
      "   macro avg       1.00      1.00      1.00         5\n",
      "weighted avg       1.00      1.00      1.00         5\n",
      "\n",
      "ROC-AUC: 1.0\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      1.00      0.89         4\n",
      "           1       0.00      0.00      0.00         1\n",
      "\n",
      "    accuracy                           0.80         5\n",
      "   macro avg       0.40      0.50      0.44         5\n",
      "weighted avg       0.64      0.80      0.71         5\n",
      "\n",
      "ROC-AUC: 1.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00         4\n",
      "           1       1.00      1.00      1.00         1\n",
      "\n",
      "    accuracy                           1.00         5\n",
      "   macro avg       1.00      1.00      1.00         5\n",
      "weighted avg       1.00      1.00      1.00         5\n",
      "\n",
      "ROC-AUC: 1.0\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00         4\n",
      "           1       1.00      1.00      1.00         1\n",
      "\n",
      "    accuracy                           1.00         5\n",
      "   macro avg       1.00      1.00      1.00         5\n",
      "weighted avg       1.00      1.00      1.00         5\n",
      "\n",
      "ROC-AUC: 1.0\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00         4\n",
      "           1       1.00      1.00      1.00         1\n",
      "\n",
      "    accuracy                           1.00         5\n",
      "   macro avg       1.00      1.00      1.00         5\n",
      "weighted avg       1.00      1.00      1.00         5\n",
      "\n",
      "ROC-AUC: 1.0\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.75      0.86         4\n",
      "           1       0.50      1.00      0.67         1\n",
      "\n",
      "    accuracy                           0.80         5\n",
      "   macro avg       0.75      0.88      0.76         5\n",
      "weighted avg       0.90      0.80      0.82         5\n",
      "\n",
      "ROC-AUC: 1.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      1.00      0.89         4\n",
      "           1       0.00      0.00      0.00         1\n",
      "\n",
      "    accuracy                           0.80         5\n",
      "   macro avg       0.40      0.50      0.44         5\n",
      "weighted avg       0.64      0.80      0.71         5\n",
      "\n",
      "ROC-AUC: 1.0\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      1.00      0.89         4\n",
      "           1       0.00      0.00      0.00         1\n",
      "\n",
      "    accuracy                           0.80         5\n",
      "   macro avg       0.40      0.50      0.44         5\n",
      "weighted avg       0.64      0.80      0.71         5\n",
      "\n",
      "ROC-AUC: 1.0\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00         4\n",
      "           1       1.00      1.00      1.00         1\n",
      "\n",
      "    accuracy                           1.00         5\n",
      "   macro avg       1.00      1.00      1.00         5\n",
      "weighted avg       1.00      1.00      1.00         5\n",
      "\n",
      "ROC-AUC: 1.0\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00         4\n",
      "           1       1.00      1.00      1.00         1\n",
      "\n",
      "    accuracy                           1.00         5\n",
      "   macro avg       1.00      1.00      1.00         5\n",
      "weighted avg       1.00      1.00      1.00         5\n",
      "\n",
      "ROC-AUC: 1.0\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00         4\n",
      "           1       1.00      1.00      1.00         1\n",
      "\n",
      "    accuracy                           1.00         5\n",
      "   macro avg       1.00      1.00      1.00         5\n",
      "weighted avg       1.00      1.00      1.00         5\n",
      "\n",
      "ROC-AUC: 1.0\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.75      0.86         4\n",
      "           1       0.50      1.00      0.67         1\n",
      "\n",
      "    accuracy                           0.80         5\n",
      "   macro avg       0.75      0.88      0.76         5\n",
      "weighted avg       0.90      0.80      0.82         5\n",
      "\n",
      "ROC-AUC: 1.0\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.svm import SVC\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.metrics import classification_report, roc_auc_score\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import GroupKFold\n",
    "\n",
    "from sklearn.model_selection import LeaveOneGroupOut\n",
    "models = {\n",
    "    # \"Logistic Regression\": LogisticRegression(class_weight='balanced', max_iter=1000),\n",
    "    # \"Random Forest\": RandomForestClassifier(class_weight='balanced', random_state=42),\n",
    "    # \"SVM\": SVC(kernel='linear', class_weight='balanced', probability=True),\n",
    "    \"XGBoost\": XGBClassifier(scale_pos_weight=4)  # Вес для класса 1: 68/17 = 4\n",
    "}\n",
    "\n",
    "# Создаем GroupKFold (например, 5 фолдов)\n",
    "logo = LeaveOneGroupOut()\n",
    "scores = []\n",
    "\n",
    "for name, model in models.items():\n",
    "    scores = []\n",
    "    for train_idx, val_idx in logo.split(X, y, groups):\n",
    "        X_train, X_val = X[train_idx], X[val_idx]\n",
    "        y_train, y_val = y[train_idx], y[val_idx]\n",
    "        \n",
    "        model.fit(X_train, y_train)\n",
    "        y_pred = model.predict(X_val)\n",
    "        y_proba = model.predict_proba(X_val)[:, 1]\n",
    "\n",
    "        # print(f\"{name}\")\n",
    "        print(classification_report(y_val, y_pred))\n",
    "        print(\"ROC-AUC:\", roc_auc_score(y_val, y_proba))\n",
    "\n",
    "# from imblearn.over_sampling import SMOTE\n",
    "\n",
    "# smote = SMOTE(random_state=42)\n",
    "# X_train_smote, y_train_smote = smote.fit_resample(X_train, y_train)\n",
    "\n",
    "# model = XGBClassifier(scale_pos_weight=1)  # Теперь классы сбалансированы SMOTE\n",
    "# model.fit(X_train_smote, y_train_smote)\n",
    "# y_pred = model.predict(X_test)\n",
    "# y_proba = model.predict_proba(X_test)[:, 1]\n",
    "\n",
    "# print(classification_report(y_test, y_pred))\n",
    "# print(\"ROC-AUC:\", roc_auc_score(y_test, y_proba))\n",
    "\n",
    "# model = models[\"XGBoost\"]\n",
    "\n",
    "# # for name, model in models.items():\n",
    "# model.fit(X_train, y_train)\n",
    "# y_pred = model.predict(X_test)\n",
    "# y_proba = model.predict_proba(X_test)[:, 1]\n",
    "\n",
    "# # print(f\"{name}\")\n",
    "# print(classification_report(y_test, y_pred))\n",
    "# print(\"ROC-AUC:\", roc_auc_score(y_test, y_proba))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.97      0.91        40\n",
      "           1       0.75      0.30      0.43        10\n",
      "\n",
      "    accuracy                           0.84        50\n",
      "   macro avg       0.80      0.64      0.67        50\n",
      "weighted avg       0.83      0.84      0.81        50\n",
      "\n"
     ]
    }
   ],
   "source": [
    "matrix_test = np.load(test_matrix)\n",
    "N_test = matrix_test.shape[0]  # Длина массива\n",
    "sub_num_test = N_test // 5\n",
    "\n",
    "labels_test = np.zeros(N_test, dtype=int)  # Создаем массив из нулей\n",
    "labels_test[3::5] = 1  # Каждый 4-й элемен\n",
    "print(classification_report(labels_test, model.predict(matrix_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "def visualize(data):\n",
    "# Создаем тепловую карту\n",
    "    plt.figure(figsize=(10, 6))  # Задаем размер графика\n",
    "    sns.heatmap(data, cmap='viridis', cbar_kws={'label': 'Значения'})  # 'viridis' — цветовая карта\n",
    "    plt.title('Тепловая карта')\n",
    "    plt.xlabel('Регионы')\n",
    "    plt.ylabel('Стимулы')\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "[1 0 0 0 1]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "[0 0 0 1 0]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "[1 0 0 1 0]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "[1 1 0 0 0]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n",
      "[0 0 0 0 0]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "[0 0 0 0 0]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n",
      "[0 0 0 0 0]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7\n",
      "[0 0 0 1 0]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n",
      "[0 0 0 1 0]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n",
      "[0 0 0 0 0]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "[0 0 0 0 0]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11\n",
      "[0 0 0 0 0]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12\n",
      "[0 0 0 0 1]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13\n",
      "[0 0 0 0 0]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14\n",
      "[1 0 0 0 0]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n",
      "[0 0 0 1 0]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16\n",
      "[0 0 0 0 0]\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAxgAAAIwCAYAAAAF9c2LAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABhaElEQVR4nO3de5yM9f//8efs2hN7YJ3WYncJOYVCcj7k4/BRbIePVEIqHUhSkk8hUlsqVEqHT5F0UiGd+PggZwmh5HxIJSRaLDvYef/+6Ge+M3sNZmeu3R32cb/drtttr/d1zWve855rrtn3vN7v63IYY4wAAAAAwAZhhV0BAAAAABcPOhgAAAAAbEMHAwAAAIBt6GAAAAAAsA0dDAAAAAC2oYMBAAAAwDZ0MAAAAADYhg4GAAAAANvQwQAAAABgGzoYAAAAAGxDBwNAyHE4HH4t33zzTWFXFQAA5FKssCsAALm9++67XutTp07VvHnzLOW1atUqyGoBAAA/OIwxprArAQDnMmDAAL3yyividAUAQOhjiBSAC57T6dTIkSNVrVo1RUVFqXLlynrkkUfkdDq99jvXcKu0tDRL3CeeeMLnvn369PHa7/vvv1fnzp0VHx+v2NhYXX311Vq5cqXXPlOmTPGKUbx4cV122WX6z3/+47Xfhg0b1KdPH1WtWlXR0dFKSkpS37599eeff1rqt3DhQrVs2VKlSpXyij1gwIBzttc333xjGWK2d+9epaWlqVGjRjp27Jgk6eTJkxoxYoQaNmyohIQElShRQi1bttTChQu94u3evVsOh0PPP/+8xo8fr9TUVMXExKh169b68ccf3fv16dPnvMPedu/eLUn67LPP1KVLFyUnJysqKkqXXHKJnnzySeXk5JzztQEACh9DpABc0Fwul7p27aqlS5eqX79+qlWrln744QeNHz9eW7du1axZs7z2/8c//qFevXp5lb3wwgs6fPjwWZ/Dc2jWgw8+6LVt48aNatmypeLj4/XII48oIiJCr7/+utq0aaNFixapSZMmXvuPHz9eZcqU0ZEjR/T222/rrrvuUlpamtq3by9Jmjdvnnbu3Knbb79dSUlJ2rhxo9544w1t3LhRK1eulMPhkCTt2rVLXbp0UYUKFTRixAiVLVtWknTbbbflrQElZWZmqnPnzoqIiNBXX32l2NhYSdKRI0f0n//8RzfffLPuuusuHT16VG+99ZY6duyoVatWqUGDBl5xpk6dqqNHj6p///7Kzs7Wiy++qHbt2umHH35Q+fLldffdd7tf55m6Xnfddbr++uvdZWdex5QpUxQbG6vBgwcrNjZWCxYs0IgRI3TkyBE999xzeX6NAIACZAAgxPXv39+c7XT17rvvmrCwMLNkyRKv8tdee81IMsuWLXOXSTL9+/e3xOjSpYtJTU21lD/22GPG4XB4laWmpprevXu719PT001kZKTZsWOHu2zv3r0mLi7OtGrVyl02efJkI8ns2rXLXbZ161YjyYwdO9Zddvz4cUs9PvjgAyPJLF682F32+uuvG0lmxYoVXvue7TV6WrhwoZFkFi5caLKzs02bNm1MuXLlzPbt2732O336tHE6nV5lhw8fNuXLlzd9+/Z1l+3atctIMjExMebXX391l3/77bdGknnwwQd91kOSGTlypM9tvtrh7rvvNsWLFzfZ2dnnfH0AgMLFECkAF7SPP/5YtWrVUs2aNXXw4EH30q5dO0myDOfJi5MnTyoqKuqs23NycvTf//5X6enpqlq1qru8QoUKuuWWW7R06VIdOXLE6zGHDx/WwYMHtXPnTo0fP17h4eFq3bq1e3tMTIz77+zsbB08eFBXXXWVJGnt2rXubUePHpUklS5dOuDX53K51KtXL61cuVJfffWVLrnkEq/t4eHhioyMdO976NAhnT59Wo0aNfKqyxnp6emqWLGie/3KK69UkyZN9NVXX+W5bp7tcPToUR08eFAtW7bU8ePHtXnz5jzHAwAUHIZIAbigbdu2TZs2bXIPrcntwIEDAcf+66+/3MOFfPnjjz90/PhxXXrppZZttWrVksvl0i+//KI6deq4y6+44gr331FRUZo4caKuvPJKd9mhQ4c0atQoffjhh5a6Z2Zmuv9u2rSpJGnIkCHKyMg46+s/l8cee8w97Or48eM+93nnnXf0wgsvaPPmzTp16pS7vEqVKpZ9q1evbimrUaOGpk+fnue6bdy4UY8//rgWLFhg6aR5tgMAIPTQwQBwQXO5XLrssss0btw4n9srV64ccOx9+/YpKSkp4Mf7Mm3aNJUvX17Z2dlasGCB+vfvr+joaPfE8e7du2v58uUaMmSIGjRooNjYWLlcLnXq1Ekul8sdp1mzZnruuec0atQo1a5dO6C6fPvtt5oyZYomTpyofv36ad26dV4Zm2nTpqlPnz5KT0/XkCFDVK5cOYWHhysjI0M7duwIqh3O5a+//lLr1q0VHx+v0aNH65JLLlF0dLTWrl2roUOHerUDACD00MEAcEG75JJLtH79el199dXuCdB2+emnn7wyDrmVLVtWxYsX15YtWyzbNm/erLCwMEsHp3nz5u4rVl1zzTXauHGjMjIy1KdPHx0+fFjz58/XqFGjNGLECPdjtm3b5vP5H374YW3btk2ffvqppk6dqsjISP3jH//w+/WNGjVKvXv3VoMGDdSoUSONGTNGTz75pHv7J598oqpVq2rGjBlebTty5Eif8XzVc+vWrT6v0HUu33zzjf7880/NmDFDrVq1cpfv2rUrT3EAAIWDORgALmjdu3fXb7/9pjfffNOy7cSJE8rKygoo7urVq7Vjxw73XA5fwsPD1aFDB3322Wfuy6tK0v79+/X++++rRYsWio+PP+fznDhxwn053fDwcEmy3O9jwoQJPh/7+eef64033tB//vMf/fOf//S6QpM/WrZsKUmqX7++Hn74YT377LNel5X1VZ9vv/1WK1as8Blv1qxZ+u2339zrq1at0rfffqvOnTvnqV6+nvfkyZN69dVX8xQHAFA4yGAAuKDddtttmj59uu655x4tXLhQzZs3V05OjjZv3qzp06dr7ty5atSoUZ5ijh49Wi+++KKqVq1quaRtbmPGjNG8efPUokUL3XfffSpWrJhef/11OZ1OjR071rL/rFmzVKZMGfcQqSVLlmjQoEGSpPj4eLVq1Upjx47VqVOnVLFiRf33v//1+cv9vn37dMcdd+jOO+9Uenp6nl6fLyNHjtSnn36qu+66S8uWLVNYWJiuueYazZgxQ9ddd526dOmiXbt26bXXXlPt2rXd98rwVK1aNbVo0UL33nuvnE6nJkyYoNKlS+uRRx7JU12aNWumUqVKqXfv3ho4cKAcDofeffddbrQIABcIOhgALmhhYWGaNWuWxo8fr6lTp2rmzJkqXry4qlatqgceeEA1atTIc8w333xT6enpGjNmjIoXL37OfevUqaMlS5Zo2LBhysjIkMvlUpMmTTRt2jTLPTCk/7uPRmRkpFJSUjRixAj9+9//dm9///33df/997vvXN6hQwd9/fXXSk5Odu9jjNHtt9+ukiVLnjW7kVfR0dF688031bZtW02cOFEDBw5Unz59tG/fPr3+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47x16t+/v3788Ud9+OGHBdACwSGDAQAAABSQYcOGafDgwV5l58teDBgwQF988YUWL16sSpUqucuTkpJ08uRJ/fXXX15ZjP379yspKcnWeucFGQwAAADAg0uOfFuioqIUHx/vtZytg2GM0YABAzRz5kwtWLBAVapU8dresGFDRUREaP78+e6yLVu2aM+ePWratGm+ttG5kMEAAAAAPOSEyI32+vfvr/fff1+fffaZ4uLi3PMqEhISFBMTo4SEBN1xxx0aPHiwEhMTFR8fr/vvv19NmzYttCtISXQwAAAAgJA0adIkSVKbNm28yidPnqw+ffpIksaPH6+wsDDdcMMNcjqd6tixo1599dUCrqk3hzHGFGoN8sHVba0TZXZdF2kpcyWc9loPy7T2tyIyrT3YsutyvNZ/7Zpj2cdXrBI/W2NdcdOPXutLVta27JNS53dLWW77j8RZypy/xFrKoiof81ovtjTess/pFkcsZT1rfGcp25pV3mv93xW+tuxTPcJah1b9+3mtDx77nmWfh7/saSm74+qFXuszx7ez7HOw5SlLWaXZ4V7rxe6zXlVh969lLWW+lFkS4bV+qJ7145O4wXoTnaOpebuxzhmnElxe67nfP8m/91mSSnzpfYz401aS9EcD7zJnyknr8+2xfr423TXJa73Wm/da9rmq44+Wsm6l11rKBi/t4bUeE59t2efEkWhLWe79fLVV7uNKkubtq+m1vmdjBcs+z3eZdt56jmthnYj32Z9XWMp+PlrKUpb7mGxda6tln7Uf1bWU9eg731KW27StjS1lqSO9j4fND1nPKb7e58i/rPFPlvRer9DsN8s+vto097nu2AfJln18feb8OUf6K3e7+zrWkl+ytsOBK7yPP1/n0fLxR8/7fL74+lxmplnLcvNVh9zvsyT9PMr7vOb60fq9kPtcJFk/A76ObV+f59znd38+g5LvY8bXuS43X99zR+t5n8fiNljf06hM67GW+/irMtN6PnQmRljKfL1fueP7+p7w9dnJ/bnwdS7P/V3ly3sjn7eUdZ0y5LyPC6trPa78Of9K1mNry/AHz/t8heWxDfl3o7qn6s3It9ihIjTyPwAAAAAuCgyRAgAAADzk8Bt8UGg9AAAAALYhgwEAAAB4cJnA5k7ib2QwAAAAANiGDAYAAADgwcVv8EGhgwEAAAB4yGGIVFDongEAAACw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nENkZKQaN26sLVu2eJVv3bpVqampfsdp2rSpfv31V+3fv18HDx5Uly5dJP39P/7nn38eUN2CvorU8uXL9eGHH6pZs2bq0qXLeS91BQAAAIQyEyJXkTp27Ji2b9/uXt+1a5fWrVunxMREpaSkaMiQIbrpppvUqlUrtW3bVnPmzNHnn3+ub775Js/PVbZsWUtZixYtAqp30B2Mv/76S0lJSZKkpKQk/fXXX8GGBAAAAIq81atXq23btu71M3M3evfurSlTpui6667Ta6+9poyMDA0cOFCXXnqpPv300zx1DGbPnn3O7V27ds1zvQPqYGzYsMH9t8vl0ubNm3Xs2DHLJbcAAACAC06IZDDatGkjc550St++fdW3b9+AnyM9PV0Ox983Fsz9XA6HQzk5OXmOGVAHo0GDBnI4HO5KXHPNNe71MxUEAAAALkim6Pw/e+utt+rzzz/XI488ooceeiigCee5BdTB2LVrV9BPDAAAAKBwvfvuu1qzZo0eeughvf7663r66ad16623BhUzoA5GXmamAwAAABcSR4gMkSooDRs21DfffKNZs2Zp6NChGj9+vMaNG6dWrVoFFC+gDsZLL710zu0DBw4MqDIAAAAACs6RI0fcf7dr107Lli3TpEmTdM0116hdu3aaNWtWnmMG1MEYNGiQKlWqpPDwcMs2h8NBBwMAAAAXriKUwShZsqTPOdTGmIK/D8bq1atVrly5QB8OAAAAoJAtXLjQ9pgBdTAcDgdXiwIAAMDFqQhdRap169a2xwyog2GM0fDhw5WQkKASJUooOTlZl19+uRo2bGh3/QAAAADkE8/72/lSr169PMcMqIPRqlUrbd68WadOndKRI0e0d+9eHT58WPXr19eXX36p5OTkQMICAAAAha8IzcHwvL9d7hvuFeiN9r755htL2Y4dO9SrVy899NBD+uCDDwIJCwAAABS+ItTBOHN/O2OM6tatq6+++iroW1IEPMk7t0suuUQvvviiBg8ebFdIAAAAAPnIszPhcDhUqVKloDsYYYE8KCsry2d5o0aNtHjx4qAqBAAAABQqk49LERBQB6N8+fLq27evli5dand9AAAAABQCu64UG1AHY9q0aTp06JDatWunGjVq6JlnntHevXuDrgwAAABQ6Iwj/5YQU6pUKSUmJioxMVHHjh3T5Zdf7l5PTEwMKGZAczDS09OVnp6uP/74Q++++66mTJmi4cOHq2PHjurbt6+6du2qYsVsm94BAAAAIB9MmDDB9phB9QLKli2rwYMHa/DgwXr55Zc1ZMgQffXVVypTpozuuecePfrooypevLhddQUAAADynaOIzJWQpN69e9seM6AhUmfs379fY8eOVe3atfXoo4/qxhtv1Pz58/XCCy9oxowZSk9Pt6maAAAAAPLDjh079Pjjj+vmm2/WgQMHJElff/21Nm7cGFC8gDIYM2bM0OTJkzV37lzVrl1b9913n3r27KmSJUu692nWrJlq1aoVUKUAAACAQlOEMhiLFi1S586d1bx5cy1evFhPPfWUypUrp/Xr1+utt97SJ598kueYAWUwbr/9diUnJ2vZsmVat26dBgwY4NW5kKTk5GQ99thjgYQHAAAAUAAeffRRjRkzRvPmzVNkZKS7vF27dlq5cmVAMQPKYPz+++/nnVsRExOjkSNHBlQpAAAAAPnvhx9+0Pvvv28pL1eunA4ePBhQzIA6GOd7spSUlIAqAwAAABS2ojTJu2TJkvr9999VpUoVr/Lvv/9eFStWDChmQB2MtLQ09004jDGWv3NycvyOdeLECa1Zs0aJiYmqXbu217bs7GxNnz5dvXr1OuvjnU6nnE6nV5nLdVphYVwmFwAAADiXHj16aOjQofr444/lcDjkcrm0bNkyPfzww+f8H/xcApqDUbZsWSUnJ2v48OH67rvvtHbtWq1du1bff/+91q5d63ecrVu3qlatWmrVqpUuu+wytW7dWr///rt7e2Zmpm6//fZzxsjIyFBCQoLXsvvnbwJ5WQAAAECRutHe008/rZo1a6py5co6duyYateurVatWqlZs2Z6/PHHA4oZUAfjt99+07hx47Rs2TJ169ZN06dPV3x8vOrXr6/69ev7HWfo0KGqW7euDhw4oC1btiguLk7NmzfXnj17/I4xbNgwZWZmei1pqW0CeFUAAABA0RIZGak333xTO3bs0BdffKFp06Zp8+bNevfddxUeHh5QzIDGERUrVkz/+te/9K9//Us7d+7UG2+8oSuuuELPP/+87rjjDr/jLF++XP/73/9UpkwZlSlTRp9//rnuu+8+tWzZUgsXLlSJEiXOGyMqKkpRUVFeZQyPAgAAQMCK0ByMM1JSUmybRx3Uf+InTpzQokWLtGjRIpUuXVppaWl5fnyxYv9XBYfDoUmTJmnAgAFq3bq1zxntAAAAAOwxePDgc24fN25cnmMG1MFYt26d3njjDX3yySdq06aNnnzySbVv3z7PcWrWrKnVq1dbbsg3ceJESVLXrl0DqR4AAAAQuCKUwfj++++91pcuXaqGDRsqJibGfSGnvAqog3HFFVeoUqVKuuuuu1S+fHn99NNP+umnn9zbBw4c6Fec6667Th988IFuu+02y7aJEyfK5XLptddeC6SKAAAAAM5j4cKFXutxcXF6//33VbVq1YBjBtTBSElJkcPh8DmEyeFw+N3BGDZsmIYNG3bW7a+++qpeffXVQKoIAAAABKQo3QcjN2OCf/EBdTB2794d9BMDAAAAIamIdjBmzJih7OxslStXLqg4XG4JAAAAKKJKlSolh8Oh7OxsOZ1ODR06VLGxsUHFDKiDkR+zzQEAAICQUIQyGBMmTJAkxcTEqE6dOqpTp07QMQPqYEyYMEFxcXFq2LChZZxWoLPNAQAAABSs3r172x4zoA7Gm2++qREjRqhYsWJ64YUXdNlll9ldLwAAAKBQFMVJ3j/99JP27NmjkydPepUHctuIgDoYd9xxh26++WY9++yzat68uW666SaNGTNG5cuXDyQcAAAAgEKwc+dOXXfddfrhhx/kcDjco5POjErKycnJc8ywQCtTvHhxjRo1Slu2bFFOTo5q1Kih0aNH68SJE4GGBAAAAAqfceTfEmIeeOABValSRQcOHFDx4sW1ceNGLV68WI0aNdI333wTUMyAMhizZ8/2Wk9PT1dqaqqee+45vfHGG/r1118DqgwAAACAgrNixQotWLBAZcqUUVhYmMLCwtSiRQtlZGRo4MCBljt9+yOgDkZ6evpZt2VlZQUSEgAAAAgNRWgORk5OjuLi4iRJZcqU0d69e3XppZcqNTVVW7ZsCShmQB0Ml8sV0JMBAAAAoa4oTfKuW7eu1q9frypVqqhJkyYaO3asIiMj9cYbb6hq1aoBxQxoDsbUqVPldDoDekIAAAAAoeHxxx93Jw9Gjx6tXbt2qWXLlvrqq6/00ksvBRQzoAzG7bffrk6dOgV9G3EAAAAg5BShDEbHjh3df1erVk2bN2/WoUOH3Hf4DkRAHYzcN9cDAAAAcHFITEwM6vEBdTAkafr06YqPj/e5rVevXgFXCAAAAChMRWkOxvXXX3/O7TNmzMhzzIA7GGPHjlV4eLil3OFw0MEAAAAALgAJCQnuv99//31de+217qtKBSrgDsbq1auZgwEAAICLTxHKYEyePNn99yeffKKxY8cGfPWoMwK+kzcAAAAA5BZQBiM1NdXn8CgAAADggleEMhj5IU8ZjAULFqh27dpav369Spcu7bUtMzNTderU0ZIlS2ytIAAAAFCQHCb/lrxYvHixrr32WiUnJ8vhcGjWrFln3feee+6Rw+HQhAkT8vQcL730kns5ffq0pkyZ4lUWiDxlMCZMmKC77rrL59WjEhISdPfdd2vcuHFq2bJlQJUBAAAA8LesrCzVr19fffv2PefVnmbOnKmVK1cqOTk5z88xfvx4999JSUl699133esOh0MDBw7Mc8w8dTDWr1+vZ5999qzbO3TooOeffz7PlQAAAADgrXPnzurcufM59/ntt990//33a+7cuerSpUuen2PXrl2BVu+s8jREav/+/YqIiDjr9mLFiumPP/4IulIAAADAxcjpdOrIkSNei9PpDCiWy+XSbbfdpiFDhqhOnTp5fvwbb7yhnj176r333nOv16hRQ9WqVdMLL7wQUJ2kPHYwKlasqB9//PGs2zds2KAKFSoEXBkAAACg0Jn8WzIyMpSQkOC1ZGRkBFTNZ599VsWKFQtoGNN7772nhx56SCdOnNCQIUM0atQoDR06VL1791bv3r01evTogG6yJ+VxiNQ///lPDR8+XJ06dVJ0dLTXthMnTmjkyJG65pprAqoIAAAAcLEbNmyYBg8e7FUWFRWV5zhr1qzRiy++qLVr18rhcOT58a+++qomTZqknj17as2aNWrSpIkmTZqku+66S5KUnJysl19++bx3+vYlTx2Mxx9/XDNmzFCNGjU0YMAAXXrppZKkzZs365VXXlFOTo4ee+yxPFcCAAAACBV5vdpTXkRFRQXUochtyZIlOnDggFJSUtxlOTk5euihhzRhwgTt3r37nI/ftGmTmjZtKklq2LChwsLC1KRJE/f2Vq1aaejQoQHVLU8djPLly2v58uW69957NWzYMBnzd+s7HA517NhRr7zyisqXLx9QRQAAAAD457bbblP79u29yjp27KjbbrtNt99++3kf73Q6Vbx4cfd6VFSUYmNj3esxMTHKyckJqG55vtFeamqqvvrqKx0+fFjbt2+XMUbVq1dXqVKlAqoAAAAAEFJC5EZ7x44d0/bt293ru3bt0rp165SYmKiUlBTLfekiIiKUlJTkHmV0LhUrVtT27dvd86enTZvmNZd6y5YtSktLC6jeAd3JW5JKlSqlxo0bB/pwAAAAIDSFSAdj9erVatu2rXv9zNyN3r17a8qUKUHFbt26tb766iv3/eu6devmtf2NN95Qs2bNAoodcAcDAAAAQP5p06aNe0qCP84378LTm2++ec7t//nPfywXdfIXHQwAAADAQ35O8r5QxMXFBfzYPN0HAwAAAADOhQwGAAAA4IkMRlDIYAAAAACwDRkMAAAAwANzMIJDBgMAAACAbchgAAAAAJ7IYASFDgYAAADgiQ5GUBgiBQAAAMA2ZDAAAAAAD0zyDo7D5OX+4xeItHeetZSFZVr7Uq6E017rMfHZln1OHAnsFulReyItZc6Uk5ayMksivPdJcFhjZQb2Fh2qd/7HJW6wPp+vx0VVPmYpKx9/1Gs94h8/W/YJr3uppSx7vHc7//lVxfPWU7K2gz+vT7K+xujDLss+f/bMspQVWxpvKSu31rvumZdEWfY5mmpt07ifzXn38cXXMZObr+PW+UuspSwi0zthGfmXNZavYy13XU8lWNsveZGPY+bQKa/1HX2sCVNfn5NKC6yvJ/djfT3Ol9zt7uu939va+l7kbquwukcs+/g6PhJ253itZ6aFn3cfSYpbvstSdrRZFa/13O0pSbuus7ZD7vNa3AbrPr7e59yfp9xtIPnfDj36zvdaf2t+W8s+JX62xs9K9X5/fNXB1/Fx4Arv87Sv1+fvudWfz6avdsh9PgwfU9qyj6/3Kzdfr9nXecDX5z63El9a78Lr67yZ+/P7a1frMXrJFOtnJ/f5z9fnq9h9+yxlezZWsFY2F1/Hh6/PziVDN3mtr5xb17JP2XXWx+X+bJ4saa1DhWa/WcpOv5rkte6rrXy9N74+J1fc9KPX+qJNNSz7jGvxoaWsTuR+r/WOCx6w7HNXoyWWsqkzrvZa96ddJP8+l/5+L+Q+3+4c+JBln1BRZ9j4fIu9MePBfIsdKshgAAAAAJ4uup/fCxZzMAAAAADYhgwGAAAA4IkMRlDIYAAAAACwDRkMAAAAwANXkQoOHQwAAADAEx2MoDBECgAAAIBtyGAAAAAAHhgiFRwyGAAAAABsQwYDAAAA8EQGIyhkMAAAAADYhgwGAAAA4IkMRlDIYAAAAACwDRkMAAAAwIOjsCtwgaODAQAAAHhiiFRQGCIFAAAAwDZkMAAAAAAP3GgvOGQwAAAAANiGDAYAAADgiQxGUMhgAAAAALANGQwAAADAExmMoJDBAAAAAGAbMhgAAACAB64iFRw6GAAAAIAnOhhBYYgUAAAAANuQwQAAAAA8MEQqOGQwAAAAANiGDAYAAADgiQxGUMhgAAAAALANGQwAAADAA3MwgkMGAwAAAIBtyGAAAAAAnshgBIUMBgAAAADbkMEAAAAAPJHBCAodDAAAAMADk7yDwxApAAAAIAQtXrxY1157rZKTk+VwODRr1iz3tlOnTmno0KG67LLLVKJECSUnJ6tXr17au3dv4VX4/6ODAQAAAHgy+bjkQVZWlurXr69XXnnFsu348eNau3athg8frrVr12rGjBnasmWLunbtmueXazeGSAEAAAAhqHPnzurcubPPbQkJCZo3b55X2cSJE3XllVdqz549SklJKYgq+kQHAwAAAPDgMBfmJIzMzEw5HA6VLFmyUOtBBwMAAAAoIE6nU06n06ssKipKUVFRQcXNzs7W0KFDdfPNNys+Pj6oWMFiDgYAAADgKR/nYGRkZCghIcFrycjICKq6p06dUvfu3WWM0aRJk4KKZQcyGAAAAEABGTZsmAYPHuxVFkz24kzn4ueff9aCBQsKPXsh0cEAAAAAvOTnfTDsGA51xpnOxbZt27Rw4UKVLl3alrjBooMBAAAAeAqROd7Hjh3T9u3b3eu7du3SunXrlJiYqAoVKujGG2/U2rVr9cUXXygnJ0f79u2TJCUmJioyMrKwql34HYxNmzZp5cqVatq0qWrWrKnNmzfrxRdflNPpVM+ePdWuXbtzPt7XRBlz6rQcEYX+0gAAAICArV69Wm3btnWvnxla1bt3bz3xxBOaPXu2JKlBgwZej1u4cKHatGlTUNW0KNT/wufMmaNu3bopNjZWx48f18yZM9WrVy/Vr19fLpdLHTp00H//+99zdjIyMjI0atQor7KEbler5HX/yO/qAwAA4CKUn0Ok8qJNmzYy57hk7rm2FaZCvYrU6NGjNWTIEP3555+aPHmybrnlFt11112aN2+e5s+fryFDhuiZZ545Z4xhw4YpMzPTa0m4pu05HwMAAAAgfxRqB2Pjxo3q06ePJKl79+46evSobrzxRvf2W2+9VRs2bDhnjKioKMXHx3stDI8CAABAwPLxMrVFQaHfB8PhcEiSwsLCFB0drYSEBPe2uLg4ZWZmFlbVAAAAAORRoXYw0tLStG3bNvf6ihUrlJKS4l7fs2ePKlSoUBhVAwAAQBHlMPm3FAWFOpbo3nvvVU5Ojnu9bt26Xtu//vrr815FCgAAAEDoKNQOxj333HPO7U8//XQB1QQAAAD4/4pIpiG/MBsaAAAA8FBUhjLll0Kf5A0AAADg4kEGAwAAAPAUojewu1CQwQAAAABgGzIYAAAAgAfmYASHDAYAAAAA25DBAAAAADyRwQgKGQwAAAAAtiGDAQAAAHhwuAq7Bhc2OhgAAACAJ4ZIBYUhUgAAAABsQwYDAAAA8MBlaoNDBgMAAACAbchgAAAAAJ4MKYxgkMEAAAAAYBsyGAAAAIAH5mAEhwwGAAAAANuQwQAAAAA8kcEICh0MAAAAwANDpILDECkAAAAAtiGDAQAAAHjiMrVBIYMBAAAAwDZkMAAAAAAPzMEIDhkMAAAAALYhgwEAAAB4IoMRFDIYAAAAAGxDBgMAAADwwByM4NDBAAAAADy56GEEgyFSAAAAAGxDBgMAAADwRAIjKGQwAAAAANiGDAYAAADggUnewSGDAQAAAMA2ZDAAAAAAT4YURjDIYAAAAACwDRkMAAAAwANzMIJDBwMAAADwRAcjKAyRAgAAAGAbMhgAAACABweTvINCBgMAAACAbS7KDMZdjZZYyrZmlbeULVlZ22vdmRlr2Setzu+Wsn8kbfZan7evprUSlaxFu38taymLvXmv13qduMOWfWqU2G8pm7a1sde68xdr3aMqH7OUlY8/6l2nBGud4jZEWsqyZI3/e2a813qFeZZddPiDREtZrPZad8zlaL2TlrKTe7zrlVLHGmf/kThL2cGEaK/1qD3W1xe5NN5SlrA7x1LWbuIyr3Vf7/2hjRWsZfW8133VPdXHe//z0VJe675en6/3/vku0yxlg5f28FoPq5tt2eeKinsCqsPe1tY6SN7tnFbJ+lk6PTvJUrbrOuv7ExPvfSyXb/aHZR9f9Yptlut49/EZvGSKy1K2d6D38XfiSLRln9Y3/Wgpy91WJ5dXtMZu7bCUPT92uaVsU/bPXutvrm5p2eeuRgstZbnPDSdLWtvzaL1TPmJ5nzd9Hdu+2q9MpvVXvtx19XUe3SPr5yQi0/s3L2eK9TyQ+zMoSTPHt/NaP1TPWqeoykctZSd/tH7uI//KtU9Jyy4+P3OpV3l/dhb1sbZV1B7rb3qnEryPv17Xz7fs48/3V+IG63F1NNVa1vKqjZayn+t4H7dlPki27NNu4gJL2dQZV3utH2xpPWfG+Phcfn3dC17rN04YYtknK9X6uSz9z32Wsv13eh9Hzoesx8zgWz60lH325xVe676+Z9+a39ZSlnKf97Hs6/X1rPGdNdYv1li5n3NVfIpln6czbrOUZXWxHsu55T4PSFJY3SNe68WaWeNk+fj+KvGz93Hr67vRl1+7WvcLy7yA/u20HoLIAzIYAAAAQAhavHixrr32WiUnJ8vhcGjWrFle240xGjFihCpUqKCYmBi1b99e27ZtK5zKeqCDAQAAAHhwGJNvS15kZWWpfv36euWVV3xuHzt2rF566SW99tpr+vbbb1WiRAl17NhR2dnWUQoF6QLKVQEAAABFR+fOndW5c2ef24wxmjBhgh5//HF169ZNkjR16lSVL19es2bNUo8ePXw+riCQwQAAAAA8mfxbnE6njhw54rU4nc48V3HXrl3at2+f2rdv7y5LSEhQkyZNtGLFisBet03oYAAAAACejMm3JSMjQwkJCV5LRkZGnqu4b9/fFz4oX977QhDly5d3byssDJECAAAACsiwYcM0ePBgr7KoqKhCqk3+oIMBAAAAeHDk4332oqKibOlQJCX9fan3/fv3q0KF/7vE8P79+9WgQYOg4weDIVIAAADABaZKlSpKSkrS/Pn/d/+cI0eO6Ntvv1XTpk0LsWZkMAAAAABvebycbH45duyYtm/f7l7ftWuX1q1bp8TERKWkpGjQoEEaM2aMqlevripVqmj48OFKTk5Wenp64VVadDAAAACAkLR69Wq1bft/d4I/M3ejd+/emjJlih555BFlZWWpX79++uuvv9SiRQvNmTNH0dHRhVVlSXQwAAAAAC8OV2HX4G9t2rSROUc2xeFwaPTo0Ro9enQB1ur8mIMBAAAAwDZkMAAAAABPITIH40JFBwMAAADwRP8iKAyRAgAAAGAbMhgAAACABwdDpIJCBgMAAACAbchgAAAAAJ7IYASFDAYAAAAA25DBAAAAADyFyI32LlRkMAAAAADYhgwGAAAA4IGrSAWHDAYAAAAA25DBAAAAADyRwQgKHQwAAADAEx2MoDBECgAAAIBtyGAAAAAAnrhMbVDIYAAAAACwDRkMAAAAwAOXqQ0OGQwAAAAAtiGDAQAAAHgigxEUMhgAAAAAbEMGAwAAAPBEBiModDAAAAAAT3QwgsIQKQAAAAC2IYMBAAAAeOJGe0EhgwEAAADANmQwAAAAAA/caC84ZDAAAAAA2IYMBgAAAOCJDEZQyGAAAAAAsA0ZDAAAAMCTiwxGMEKug2GMkcPhKOxqAAAAoKhiiFRQQm6IVFRUlDZt2lTY1QAAAAAQgELLYAwePNhneU5Ojp555hmVLl1akjRu3LhzxnE6nXI6nV5lp0/mqFhkuD0VBQAAQNFCBiMohdbBmDBhgurXr6+SJUt6lRtjtGnTJpUoUcKvoVIZGRkaNWqUV1nbe6vr6v417KwuAAAAAD8UWgfj6aef1htvvKEXXnhB7dq1c5dHRERoypQpql27tl9xhg0bZsmGjN9xk611BQAAQBFCBiMohTYH49FHH9VHH32ke++9Vw8//LBOnToVUJyoqCjFx8d7LQyPAgAAAApHoU7ybty4sdasWaM//vhDjRo10o8//sgVpAAAAFC4XCb/liKg0C9TGxsbq3feeUcffvih2rdvr5ycnMKuEgAAAIAAFXoH44wePXqoRYsWWrNmjVJTUwu7OgAAACiqjKuwa3BBC5kOhiRVqlRJlSpVKuxqAAAAoChjkndQQu5GewAAAAAuXCGVwQAAAAAKXRGZjJ1fyGAAAAAAsA0ZDAAAAMATczCCQgYDAAAAgG3IYAAAAACeyGAEhQwGAAAAEIJycnI0fPhwValSRTExMbrkkkv05JNPyoR4B4gMBgAAAOApRP6Bf/bZZzVp0iS98847qlOnjlavXq3bb79dCQkJGjhwYGFX76zoYAAAAACeXKFxJ+/ly5erW7du6tKliyQpLS1NH3zwgVatWlXINTs3hkgBAAAABcTpdOrIkSNei9Pp9Llvs2bNNH/+fG3dulWStH79ei1dulSdO3cuyCrnGR0MAAAAwJMx+bZkZGQoISHBa8nIyPBZjUcffVQ9evRQzZo1FRERocsvv1yDBg3SrbfeWsANkjcMkQIAAAAKyLBhwzR48GCvsqioKJ/7Tp8+Xe+9957ef/991alTR+vWrdOgQYOUnJys3r17F0R1A0IHAwAAAPCUj5O8o6KiztqhyG3IkCHuLIYkXXbZZfr555+VkZER0h0MhkgBAAAAIej48eMKC/P+dz08PFyuEJmEfjZkMAAAAABPrtC4TO21116rp556SikpKapTp46+//57jRs3Tn379i3sqp0THQwAAAAgBL388ssaPny47rvvPh04cEDJycm6++67NWLEiMKu2jnRwQAAAAA8GBMaQ5Di4uI0YcIETZgwobCrkid0MAAAAABPITJE6kLFJG8AAAAAtiGDAQAAAHjKx8vUFgVkMAAAAADYhgwGAAAA4CnE7zMR6shgAAAAALANGQwAAADAE3MwgkIGAwAAAIBtyGAAAAAAHgxzMIJCBwMAAADwxBCpoDBECgAAAIBtyGAAAAAAnlxkMIJBBgMAAACAbchgAAAAAJ4Mk7yDQQYDAAAAgG3IYAAAAAAeDHMwgkIGAwAAAIBtyGAAAAAAnpiDERQ6GAAAAIAHhkgFhyFSAAAAAGxDBgMAAADwxBCpoJDBAAAAAGAfcxHLzs42I0eONNnZ2SERh1gXfp2KQqxQrFOoxgrFOhWFWKFYp6IQKxTrFKqxQrFOoRwLFx+HMeaincVy5MgRJSQkKDMzU/Hx8YUeh1gXfp2KQqxQrFOoxgrFOhWFWKFYp6IQKxTrFKqxQrFOoRwLFx+GSAEAAACwDR0MAAAAALahgwEAAADANhd1ByMqKkojR45UVFRUSMQh1oVfp6IQKxTrFKqxQrFORSFWKNapKMQKxTqFaqxQrFMox8LF56Ke5A0AAACgYF3UGQwAAAAABYsOBgAAAADb0MEAAAAAYBs6GAAAAABsQwfDT8yFBwAAAM6vWGFXwE4HDx7U22+/rRUrVmjfvn2SpKSkJDVr1kx9+vRR2bJlA44dFRWl9evXq1atWnZVFwAAALjoXDSXqf3uu+/UsWNHFS9eXO3bt1f58uUlSfv379f8+fN1/PhxzZ07V40aNTpnnMGDB/ssf/HFF9WzZ0+VLl1akjRu3Di/6jVx4kStWrVK//znP9WjRw+9++67ysjIkMvl0vXXX6/Ro0erWLELv5+3atUqS8euadOmuvLKK4OK265dO02ePFmpqal5etz69eu1Zs0atWnTRlWrVtXGjRv1yiuvyOVy6brrrlPHjh2DqlcoyK82l2j3szl58qRmzZrl80eMbt26KTIyMqj4VatW1dy5c1W9evU8Pe6LL77QqlWr1LFjRzVv3lwLFizQ888/7z7P9OvXL6h6Fbai0u6//vqrSpYsqdjYWK/yU6dOacWKFWrVqtV5Hx8dHa0yZcpIkpYsWaLXXntNe/bsUWpqqvr376+mTZvmqU6StG/fPn377bdebd+kSRMlJSXlOVZut99+u5566iklJycHHetiQ7vjQnbRdDCuuuoq1a9fX6+99pocDofXNmOM7rnnHm3YsEErVqw4Z5ywsDDVr19fJUuW9CpftGiRGjVqpBIlSsjhcGjBggXnrdOYMWM0duxYdejQQcuWLdOgQYP03HPP6cEHH1RYWJjGjx+ve++9V6NGjcrTaw2lL6EDBw7ohhtu0LJly5SSkuLVsduzZ4+aN2+uTz/9VOXKlTtnnNmzZ/ssv/766/Xiiy+qcuXKkqSuXbuet04zZsxQ9+7dVbJkSTmdTs2cOVP/+te/1KhRI4WHh+t///ufpk6dqltuucWv1yhJLpdLYWHWEYUul0u//vqrUlJSzhvD6XQqLCxMERERkqQdO3bo7bffdrf7HXfcoSpVqpw3jl1tLtHueWn37du3q2PHjtq7d6+aNGni1e7ffvutKlWqpK+//lrVqlU7b6yXXnrJZ/ngwYP1yCOPuP+BGDhw4Hljvf766xowYIDq16+vbdu26ZVXXtF9992nm266SeHh4Zo6daoyMjL0wAMPnDfWGbR7wbb777//rm7dumnNmjVyOBy65ZZb9Oqrr7rP8fv371dycrJycnLOGadJkyYaPny4rrnmGn322We6/vrrdc0116hWrVraunWrvvjiC82YMUPXXHPNeeskSVlZWbr77rv14YcfyuFwKDExUZJ06NAhGWN088036/XXX1fx4sXPG2vDhg0+yxs1aqTp06eratWqkqR69eqdN9aBAwf0448/qmHDhkpISND+/fv1zjvvyOVyqUuXLrrsssv8en1nhNLxLhWddsdFzlwkoqOjzaZNm866fdOmTSY6Ovq8cTIyMkyVKlXM/PnzvcqLFStmNm7cmKc6XXLJJebTTz81xhizbt06Ex4ebqZNm+bePmPGDFOtWjW/4+3du9c0btzYhIWFmfDwcHPbbbeZo0ePurfv27fPhIWFnTfOlVdeaT7//HNjjDGzZs0yYWFhpmvXrmbo0KHmuuuuMxEREe7t53PDDTeYpk2bms2bN1u2bd682TRr1szceOON543jcDhMWFiYcTgcZ138eW3GGHPFFVeYMWPGGGOM+eCDD0zJkiXN6NGj3duff/5506BBA79iZWZmmn/9618mOjralCtXzgwfPtycPn3avd3fNjfGmNatW5uPP/7YGGPM0qVLTVRUlKlXr5656aabzOWXX26KFy9uli9fft44drW5MbR7Xtq9ffv2plu3biYzM9Nnfbt162Y6dOjgV50cDoepVKmSSUtL81ocDoepWLGiSUtLM1WqVPErVu3atc0bb7xhjDFmwYIFJjo62rzyyivu7ZMnTza1atXyKxbtXjjt3qtXL9OkSRPz3XffmXnz5pmGDRuaRo0amUOHDhlj/m53h8Nx3jglSpQwO3fuNMYY06RJE/PMM894bX/55ZfN5Zdf7ledjDHmjjvuMNWrVzdz5szxOg5Onz5t5s6da2rUqGHuvPNOv2Kd61xzptyfY2vhwoWmRIkSxuFwmKSkJLNu3TpTqVIlU716dXPppZeaqKgoM3fuXL/qFIrHuzEXf7ujaLhoOhhpaWnmnXfeOev2d955x6SmpvoVa9WqVaZGjRrmoYceMidPnjTGBNbBiImJMT///LN7PSIiwvz444/u9d27d5vixYv7HS8Uv4RiY2PN2rVrz7p99erVJjY29rxxOnXqZLp06WL279/vVR5Iu5coUcLs2rXLGGOMy+UyERERZsOGDe7tO3bs8KtOxhgzcOBAU6NGDfPxxx+bN99806SmppouXboYp9NpjPG/zY0xJj4+3mzdutUY8/eX0YMPPui1/fHHHzfNmzc/bxy72twY2t0Y/9s9JibG/PDDD2fdvmHDBhMTE+NXne6++27ToEED89NPP3mV23We8aznrl27/D7P0O7+s7Pdk5OTzbfffutez87ONtdee61p0KCB+fPPP/3+RzchIcGsX7/eGGNMuXLl3H+fsX379jx955QsWdIsW7bsrNuXLl1qSpYs6Ves+vXrmy5duphNmzaZ3bt3m927d5tdu3aZYsWKmXnz5rnLzqdFixamf//+5ujRo+a5554zFStWNP3793dvf/jhh02zZs38qlMoHu/GXPztjqLhoulgTJw40URFRZmBAweazz77zKxcudKsXLnSfPbZZ2bgwIEmJibG69el8zl69Kjp1auXqVevnvnhhx9MREREnr+AqlSpYr7++mtjjDFbt241YWFhZvr06e7tX375pUlLS/M7Xih+CZUuXdp88803Z92+cOFCU7p0ab9ijRs3zlSuXNkrexLIF39SUpJZvXq1McaYQ4cOGYfDYRYuXOjevmrVKpOUlORXrJSUFK/H/vHHH+bKK680HTp0MNnZ2Xn6hatEiRLuLFv58uXNunXrvLZv377dr3/A7WxzY2h3f9u9QoUK58zszZ4921SoUMGvOhnzdwazcuXK5uWXX3aXBdLulSpVMosXLzbGGPPbb78Zh8NhvvzyS/f2b775xlSqVMmvWLS7/+xs9xIlSrj/OT3j1KlTJj093dSrV89s2LDBr3bv2rWrefTRR40xxnTs2NG8+OKLXtvffPNNU716db/qZMzf/zR/9913Z92+atUqEx8f71csp9NpHnjgAVO7dm2vH0jy2vbx8fFm+/btxpi/26hYsWLm+++/d2/funWrSUhI8CtWKB7vxlz87Y6i4aLpYBhjzIcffmiaNGliihUr5k4BFitWzDRp0sR89NFHAcX84IMPTPny5U1YWFiev4Aef/xxU7ZsWXPnnXeaKlWqmEcffdSkpKSYSZMmmddee81UrlzZ8ivHuYTil9B9991nUlNTzYwZM7yGMGRmZpoZM2aYtLQ0M2DAAL9iGWPM999/b2rXrm369etnsrKyAvri79mzp2nSpImZNm2aufbaa03Hjh3NVVddZTZt2mQ2b95sWrdu7fcQopiYGHe254wjR46Ypk2bmnbt2pmdO3f6/QXUrl07M3bsWGOMMc2aNbNk3D755BOTkpJy3jh2t7kxtLs/7T58+HBTqlQpM27cOLN+/Xqzb98+s2/fPrN+/Xozbtw4k5iYaEaOHOlXnc749ddfTbt27UynTp3M77//HlC79+/f31SvXt2MGTPGXHnllaZ3796mZs2a5uuvvzZz5swxl112menbt69fsWh3/9nZ7pdddpn55JNPLOVnzu8pKSl+tftPP/1kSpcubXr16mWefPJJExsba3r27Gmeeuop06tXLxMVFWUmT57s92u85ZZbzOWXX+4zY7p27VrTsGFDc+utt/odzxhjvvrqK1OpUiXz9NNPm5ycnDy3fZkyZdwjAbKyskxYWJhZsWKFe/v69etNmTJl/IoVise7MRd/u6NouKg6GGecPHnS7N271+zdu9c9xCkYv/zyi5k1a5Y5duxYnh6Xk5NjnnrqKXPNNdeYp59+2rhcLvPBBx+YypUrm9KlS5s+ffrkKWYofgllZ2ebe+65x0RGRpqwsDATHR1toqOjTVhYmImMjDT33nuvyc7O9vs1GmPM8ePHzd13322qV69uwsPD8/zFv2/fPvOPf/zDxMbGmo4dO5q//vrLDBgwwD3WtHr16u5fYs7n0ksv9fpV8oyjR4+apk2bmvr16/v9BbR8+XKTkJBgRo4caV5++WVTpkwZ8/jjj5v33nvPjBgxwpQsWdI8++yz541ztjZ3OBwBt7kxtLs/nnnmGVOhQgX3azozhrlChQp+x8jN5XKZp59+2iQlJQXU7seOHTN33XWXqVu3runXr59xOp3mueeeM5GRkcbhcJg2bdpYhsCdDe3uPzvb/ZFHHjnrPJJTp06Zrl27+t3u27dvNzfddJOJi4tz/9AWERFhmjVrZmbOnOnvyzPG/J2J7NSpk3E4HCYxMdHUrFnT1KxZ0yQmJpqwsDDTuXNnc/jw4TzFNObvc0Xnzp1Ny5Yt8/yPbrdu3cw111xjli5davr162caNWpkunTpYo4dO2aysrLMjTfeaDp16uRXrFA93i/2dkfRcFF2MC5W/nwJ+TtedPv27aZHjx62fAkZ8/ev5wsWLDDvv/++ef/9982CBQt8TsrMi88++8wMGjTI7y/p89mxY4f54YcfzKlTp/x+zP3333/WX92PHDlimjRp4vcXkDF/fwldddVVlsl2FStWNBMmTPA7jjF/t/n8+fPdbT5//vyg29wY4x5WSLuf3c6dO83y5cvN8uXLLb+ABmr16tVmwoQJ7jlVwTpx4oQ5cuRInh4zYMAA2j1IgbT7qVOnzvnZPXXqlF/j5D25XC6zb98+W35o++mnn8zbb79tnn76afP000+bt99++5wXVfHXiy++aNLT080vv/zi92O2bt1qqlevbhwOh6lVq5b59ddfTdeuXU2xYsVMsWLFTNmyZc2aNWv8ihXq55mLtd1RNFw0l6ktCk6fPq3jx48rPj7+rNt/++23PN27wBijAwcOyOVyqUyZMu5L7OFvhw8f1t69e1WnTh2f248ePaq1a9eqdevWeYr7xx9/aOfOnXK5XKpQoYLS0tKCrmtkZKRtN4Ms7FgXUrtfTGj3wvP7779r0qRJWrp0qX7//XeFhYWpatWqSk9PV58+fRQeHl6gcULdn3/+6b4vlSTNnz9fJ06cUNOmTb3Kz4XjPe/saHcUDXQwLiK//PKLRo4cqbfffrtA45w4cUJr1qxRYmKiateu7bUtOztb06dPV69evQosjt2xNm3apJUrV6pp06aqWbOmNm/erBdffFFOp1M9e/ZUu3bt/IrjGatZs2a69NJLA4pl580gQzVWbllZWZo+fbq2b9+uChUq6Oabbw74y8wzVnJysnr06OFXrLVr16pUqVLua9m/++67XvePGTBggHr06OFXHUI11v3336/u3burZcuWfu1fULHsvGFpKMZavXq12rdvr2rVqikmJkYrVqzQLbfcopMnT2ru3LmqXbu25syZo7i4uAKJ48nOmxzm9w0TLzbB3vMqv2IBfinU/AlstW7dujylc+2Is2XLFpOamuoeG92qVSvz22+/ubf7exUOX3H27t2b5zh2x/r6669NZGSkSUxMNNHR0ebrr782ZcuWNe3btzft2rUz4eHhlnum5Hcsh8NhGjRoYNq0aeO1OBwO07hxY9OmTRvTtm1bv+oUqrFq1apl/vzzT2OMMXv27DFpaWkmISHBNG7c2CQmJppy5cr5PUTGrlj16tUz8+bNM8b8fSGEmJgYM3DgQDNp0iQzaNAgExsba9566y2/6hSqsTznyzzzzDPm999/9+tx+RnrySefNHFxceaGG24wSUlJ5plnnjGlS5c2Y8aMMU8//bQpW7asGTFixAUdq3nz5uaJJ55wr7/77rumSZMmxpi/x+M3aNDADBw4sMDinLFt2zZTtWpVEx0dbVq3bm26d+9uunfvblq3bm2io6NNtWrVzLZt2wo8ltPpNB999JEZNGiQ6dGjh+nRo4cZNGiQmT59uvsSs3bYt2+fGTVqVIHHsuueV3bHMubvOamejz/j5MmTZtGiRX7HwcWPDsYF5LPPPjvnMn78eL9OFHbFMcaY9PR006VLF/PHH3+Ybdu2mS5dupgqVaq4rw/v78nLrjh2x2ratKl57LHHjDF/X1GsVKlS5t///rd7+6OPPmr+8Y9/FGgsO28GGaqxHA6Hew7Irbfeapo1a2b++usvY8zfEzDbt29vbr755gKNFRMT4x4Hf/nll7tvsnbGe++9Z2rXru1XnUI1lsPhMP/73//MAw88YMqUKWMiIiJM165dzeeff25ycnL8imF3LDtvWBqqsWJiYsyOHTvc6zk5OSYiIsLs27fPGGPMf//7X5OcnFxgcc6w8yaHdsWys6NyPnb9aJfXWHbd88rOWHZ3VHDxo4NxAbHrrst23r25XLlyXjdTc7lc5p577jEpKSlmx44dfp907Ipjd6z4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HgAAfqODAQBBMMbof//7n+bOnat27dopIyNDt956qwYNGqTq1aurWbNmeumllzR16lRlZ2e7HxcXF6ekpCT3EhcXZ4l96NAhjRkzRkOHDvUqHzdunK6++moNHz5cNWrUUJ8+fTRgwAA999xz+f56AQA4HzoYABCAL774QrGxsYqOjlbnzp1100036YknntD69es1ZcoUxcbGupeOHTvK5XJp165deXqO0aNHq23btmrRooVX+aZNm9S8eXOvsubNm2vbtm3Kyclxlw0dOtSrHu+9957lOV599VXFxsaqdOnSatKkiT7//PM81REAgNyY5A0AAWjbtq0mTZqkyMhIJScnq1ixv0+nx44d0913362BAwdaHpOSkuJ3/G3btuk///mP1q1bp19//TWgOg4ZMkR9+vRxrw8dOtSrAyJJt956qx577DE5nU5NnjxZN954o3bu3BnQ8wEAINHBAICAlChRQtWqVbOUX3HFFfrpp598bsuLoUOH6s4771S1atUsHYxatWpp2bJlXmXLli1TjRo1FB4e7i4rU6aMVz3i4uK8JopLUkJCgnufUaNG6YUXXtCmTZuCqjsAoGijgwEANho6dKiuuuoqDRgwQHfeeadKlCihn376SfPmzdPEiRP9irF9+3bt2bNH27dv97n9oYceUuPGjfXkk0/qpptu0ooVKzRx4kS9+uqrea5vTk6OsrOz5XQ69dZbbykiIkKXXnqpvvjiizzHAgBAYg4GANiqXr16WrRokbZu3aqWLVvq8ssv14gRI5ScnOx3jKysLD322GNKTEz0uf2KK67Q9OnT9eGHH6pu3boaMWKERo8e7TUcyl8TJ05UTEyMypUrp7ffflvvvfeeKleunOc4AACc4TDGmMKuBAAAAICLAxkMAAAAALahgwEAAADANnQwAAAAANiGDgYAAAAA29DBAAAAAGAbOhgAAAAAbEMHAwAAAIBt6GAAAAAAsA0dDAAAAAC2oYMBAAAAwDZ0MAAAAADYhg4GAAAAANv8PwIk12gAQY1sAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "subjects = np.array_split(matrix_test, sub_num_test)\n",
    "predict_labels = np.array_split(model.predict(matrix_test), sub_num_test)\n",
    "for idx, sub in enumerate(subjects):\n",
    "    print(idx)\n",
    "    print(predict_labels[idx])\n",
    "    visualize(subjects[idx])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "🔝 Топ-20 важных регионов: ['region_38', 'region_103', 'region_76', 'region_59', 'region_3', 'region_95', 'region_26', 'region_7', 'region_75', 'region_118', 'region_98', 'region_69', 'region_48', 'region_125', 'region_21', 'region_122', 'region_96', 'region_126', 'region_124', 'region_0']\n",
      "\n",
      "📊 Отчет по классификации (топ-20 регионов):\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00        24\n",
      "           1       1.00      1.00      1.00         6\n",
      "\n",
      "    accuracy                           1.00        30\n",
      "   macro avg       1.00      1.00      1.00        30\n",
      "weighted avg       1.00      1.00      1.00        30\n",
      "\n",
      "ROC-AUC: 1.0\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from xgboost import XGBClassifier\n",
    "\n",
    "# 1. Подготовка данных (если X_train — массив, а не DataFrame)\n",
    "if isinstance(X_train, np.ndarray):\n",
    "    X_train = pd.DataFrame(X_train, columns=[f'region_{i}' for i in range(0, 132)])\n",
    "if isinstance(X_test, np.ndarray):\n",
    "    X_test = pd.DataFrame(X_test, columns=[f'region_{i}' for i in range(0, 132)])\n",
    "\n",
    "# 2. Первое обучение (чтобы определить важные регионы)\n",
    "model = XGBClassifier(scale_pos_weight=4, random_state=42)\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# 3. Получаем важность регионов (по gain)\n",
    "importance = model.get_booster().get_score(importance_type='weight')\n",
    "importance_df = pd.DataFrame({\n",
    "    'Region': list(importance.keys()),\n",
    "    'Importance': list(importance.values())\n",
    "}).sort_values('Importance', ascending=False)\n",
    "\n",
    "# 4. Выбираем топ-20 регионов\n",
    "top_regions = importance_df.head(20)['Region'].tolist()\n",
    "print(\"🔝 Топ-20 важных регионов:\", top_regions)\n",
    "\n",
    "# 5. Обрезаем данные, оставляя только топ-20\n",
    "X_train_top = X_train[top_regions]\n",
    "X_test_top = X_test[top_regions]\n",
    "\n",
    "# 6. Переобучаем XGBoost на урезанных данных\n",
    "model_top = XGBClassifier(scale_pos_weight=4, random_state=42)\n",
    "model_top.fit(X_train_top, y_train)\n",
    "\n",
    "# 7. Проверяем качество на тестовых данных\n",
    "y_pred_top = model_top.predict(X_test_top)\n",
    "y_proba_top = model_top.predict_proba(X_test_top)[:, 1]\n",
    "\n",
    "print(\"\\n📊 Отчет по классификации (топ-20 регионов):\")\n",
    "print(classification_report(y_test, y_pred_top))\n",
    "print(\"ROC-AUC:\", roc_auc_score(y_test, y_proba_top))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

==================================================

📄 train_model.py
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report
from sklearn.svm import NuSVC
import pandas as pd
from sklearn.model_selection import GridSearchCV
from yaml import safe_load
import seaborn as sns
import matplotlib.pyplot as plt


def visualize(data):
# Создаем тепловую карту
    plt.figure(figsize=(10, 6))  # Задаем размер графика
    sns.heatmap(data, cmap='viridis', cbar_kws={'label': 'Значения'})  # 'viridis' — цветовая карта
    plt.title('Тепловая карта массива')
    plt.xlabel('Ось X')
    plt.ylabel('Ось Y')
    plt.show()



def different_models(matrix, labels=None):
    # 1. Загрузка данных и подготовка
    # Предположим, матрица и метки уже загружены
    # matrix.shape = (n_subjects, 132), labels.shape = (n_subjects,)
    # Пример синтетических данных:
    n_subjects = matrix.shape[0]
    if labels is None:
        labels = np.array([0] * (n_subjects//2) + [1] * (n_subjects//2))

    # Перемешивание данных
    indices = np.random.permutation(n_subjects)
    matrix, labels = matrix[indices], labels[indices]

    # 2. Масштабирование признаков
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(matrix)

    visualize(X_scaled)

    # 3. Сравнение моделей
    models = {
        'NuSVC' : NuSVC(
            nu=0.3,       # Доля опорных векторов (0 < nu < 1)
            kernel='rbf', # Ядро: 'linear', 'rbf', 'poly'
            gamma='scale', # Коэффициент для ядра RBF
            random_state=42,
            class_weight='balanced'
        ),
    }

    model = NuSVC(
            nu=0.3,       # Доля опорных векторов (0 < nu < 1)
            kernel='rbf', # Ядро: 'linear', 'rbf', 'poly'
            gamma='scale', # Коэффициент для ядра RBF
            random_state=42
        )

    for name, model in models.items():
        scores = cross_val_score(model, X_scaled, labels, cv=5, scoring='accuracy')
        print(f"{name} | Средняя точность: {scores.mean():.2f} (±{scores.std():.2f})")

    # 4. Обучение лучшей модели (SVM показал лучший результат)
    param_grid = {
        'nu': [0.3, 0.5, 0.7],
        'gamma': ['scale', 'auto'],
        'kernel': ['rbf', 'linear']
    }

    grid_search = GridSearchCV(NuSVC(), param_grid, cv=3, verbose=2)
    grid_search.fit(X_scaled, labels)

    best_model = grid_search.best_estimator_
    print("\nЛучшие параметры:", grid_search.best_params_)
    
    best_model = model

    # 5. Оценка на тестовой выборке
    X_train, X_test, y_train, y_test = train_test_split(
        X_scaled, labels, test_size=0.3, random_state=42
    )
    best_model.fit(X_train, y_train)
    y_pred = best_model.predict(X_test)

    print("\nClassification Report:")
    print(classification_report(y_test, y_pred))
    return best_model



def maximum(data):
    return np.max(data, axis=1)

def minimum(data):
    return np.min(data, axis=1)

def max_min(data):
    return np.max(data, axis=1) - np.min(data, axis=1)

def calculate_auc(data):
    return np.trapz(data, axis=1)  # Интегрируем по времени для каждого ответа и региона

funcs = {
    'max' : maximum,
    'min' : minimum,
    'max-min': max_min,
    'area' : calculate_auc
}



def read_events_from_file(file_name):
    with open('./tmp.csv', 'w') as output_file,\
        open(file_name, 'r') as input_file:
            output_file.write('onset,duration,trial_type\n')
            for line in input_file:
                l = line.split()
                if len(l) == 3:
                    continue
                if l[3][2] == '4':
                    output_file.write(l[1] + ',1.0,'  +  '1'   + '\n')
                else:
                    output_file.write(l[1] + ',1.0,' + '0' + '\n')
    events_data = pd.read_csv('./tmp.csv')

    return events_data


def process_config(config_path):
    with open(config_path) as f:
        data = safe_load(f)
        data_file = data['data_path']
        events_file = data['events_path']
        tr = data['tr']
        return data_file, events_file, tr

if __name__ == '__main__':
    average = True
    if average:
        matrix =  np.load(f'/home/aaanpilov/diploma/project/truth_lie_matrix_HC_raw.npy')
        print(matrix.shape)
        model = different_models(matrix)
    # else: 
    #     true_matrix = np.load(f'results/HC/max_matrix_true.npy')
    #     lie_matrix = np.load(f'results/HC/max_matrix_lie.npy')
        
    #     labels = np.array([0] * (true_matrix.shape[0]) + [1] * (lie_matrix.shape[0]))
        
    #     matrix = np.concatenate((true_matrix, lie_matrix), axis=0)
    #     print(matrix.shape)
    #     print(labels.shape)
    #     model = different_models(matrix, labels)

    # matrix = np.load('./results/ranks_matrix.npy')
    # N = matrix.shape[0]  # Длина массива
    # arr = np.zeros(N, dtype=int)  # Создаем массив из нулей
    # arr[3::5] = 1  # Каждый 4-й элемент (начиная с индекса 3) делаем 1
    # model = different_models(matrix, arr)
    # matrix_schz = np.load(f'results/SCHZ/area_matrix.npy')
    # print(model.predict(matrix_schz))    


    # # Сохранение модели в файл
    # with open('ranks_model.pkl', 'wb') as f:
    #     pickle.dump(model, f)

    # with open('model.pkl', 'rb') as f:
    #     model = pickle.load(f)




==================================================

📁 fmri_processing
--------------------------------------------------

📄 fmri_processing/__init__.py
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
from .data_loader import DataLoader
from .subject_data import SubjectData
from .functions import *
from .utils import *

# TODO: понять, как нормально обойтись с этими импортами
__all__ = ['DataLoader', 'SubjectData', 'calc_minimum', 
           'calc_maximum', 'calc_max_min', 'calc_auc',
           'process_config', 'get_predict_results_str',
           'draw_heat_map', 'funcs']
==================================================

📄 fmri_processing/functions.py
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import numpy as np

def calc_maximum(data):
    return np.max(data, axis=1)


def calc_minimum(data):
    return np.min(data, axis=1)


def calc_max_min(data):
    return np.max(data, axis=1) - np.min(data, axis=1)


def calc_auc(data):
    return np.trapz(data, axis=1)  # Интегрируем по времени для каждого ответа и региона

funcs = {
    'auc' : calc_auc, 
    'max' : calc_maximum, 
    'min' : calc_minimum,
    'max_min' : calc_max_min}
==================================================

📄 fmri_processing/utils.py
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
from yaml import safe_load
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt


def process_config(config_path):
    with open(config_path) as f:
        data = safe_load(f)
        subjects = data['subjects']
        return subjects


# TODO просмотреть вот эту функцию 
def get_predict_results_str(events, predicted_truth, predicted_lie):
    truth_array = np.column_stack((events[events['trial_type'] == 0]['onset'].values, predicted_truth, events[events['trial_type'] == 0]['trial_type'].values))
    lie_array = np.column_stack((events[events['trial_type'] == 1]['onset'].values, predicted_lie, events[events['trial_type'] == 1]['trial_type'].values))
    
    combined_array = np.vstack((truth_array, lie_array))

    sorted_array = combined_array[combined_array[:, 0].argsort()]

    res = ''
    for elem in sorted_array:
        status = "содержит сокрытие информации" if elem[1] == 1 else "не содержит сокрытия информации"
        res += f"{elem[0]} : {status} {elem[2]} \n"
    
    return res 


def draw_heat_map(data):
    '''
        Создает тепловую карту для данных размера (x, 132)
    '''
    plt.figure(figsize=(10, 6))  # Задаем размер графика
    sns.heatmap(data, cmap='viridis', cbar_kws={'label': 'Сумма баллов'})  # 'viridis' — цветовая карта
    plt.title('Тепловая карта признаков')
    plt.xlabel('Регионы')
    plt.ylabel('Стимулы')
    plt.show()
==================================================

📄 fmri_processing/subject_data.py
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import numpy as np
import logging

"""
Класс для хранения и обработки нейровизуализационных данных испытуемого.

- Хранит данные фМРТ, информацию о событиях и TR
- Нарезать данные на временные окна с разными условиями
- Применять аналитические функции к выделенным участкам данных
- Обрабатывать данные по отдельным прогонам эксперимента
"""
class SubjectData:
    def __init__(self, data=None, events=None, tr=1.0):
        """Инициализация объекта с данными, событиями и параметром TR"""
        self.data = data
        self.events = events
        self.tr = tr        
        self.logger = self._setup_logger()


    def _setup_logger(self):
        """Создает и настраивает логгер экземпляра класса"""
        logger = logging.getLogger("SubjectData")
        if not logger.handlers:
            logger.setLevel(logging.INFO)
            handler = logging.StreamHandler()
            handler.setFormatter(
                logging.Formatter("[%(asctime)s][%(levelname)s][%(name)s] %(message)s")
            )
            logger.addHandler(handler)
        return logger


    def set_data(self, data):
        self.data = data


    def set_events(self, events):
        self.events = events


    def set_tr(self, tr):
        self.tr = tr


    def get_data(self):
        return self.data


    def get_events(self):
        return self.events
    

    def get_tr(self):
        return self.tr


    def cut_for_truth_and_lie(self, window_size=10, process_func=np.max, need_average=False):
        """
        1. Разделение данных по окнам для правдивых и ложных ответов
        2. Применение аналитической функции

        need
        """
        truth_data = self.cut_answers_for_truth(window_size)
        lie_data = self.cut_answers_for_lie(window_size)

        truth_data_processed = self.apply_func(truth_data, process_func, need_average)
        lie_data_processed = self.apply_func(lie_data, process_func, need_average)
        
        return truth_data_processed, lie_data_processed
    
    
    def extract_windows(self, onsets, window_size, tr_shift=False):
        """
        Вырезает данные по временным меткам
        
        Параметры:
            onsets: массив временных меток начала событий
            window_size: длительность окна в секундах
        """
        window_volumes = int(np.round(window_size / self.tr))
        signals = []
        
        for onset in onsets:
            start = int(np.round((onset - self.tr)/ self.tr))
            end = start + window_volumes
            
            if end > self.data.shape[0]:
                self.logger.warning("Пропущен вопрос (выход за границы данных)")
                continue
                
            window_data = self.data[start:end, :]
            signals.append(window_data)
            
        return np.array(signals)


    def cut_answers_for_truth(self, window_size, tr_shift=False):
        truth_onsets = self.events[self.events['trial_type'] == 0]['onset'].values
        return self.extract_windows(truth_onsets, window_size, tr_shift)


    def cut_answers_for_lie(self, window_size, tr_shift=False):
        lie_onsets = self.events[self.events['trial_type'] == 1]['onset'].values
        return self.extract_windows(lie_onsets, window_size, tr_shift)


    def cut_for_runs(self, window_size, average=False, tr_shift=True):
        """
        Обработка данных по отдельным прогонам эксперимента.
        
        Разбивает данные на сегменты по 6 событий, сортирует события внутри
        прогона по номеру стимула и извлекает соответствующие временные окна.
        """
        n_chunks = len(self.events) // 6
        runs = np.array_split(self.events.iloc[:n_chunks*6], n_chunks)
        unique_names_list = self.events['stimulus_number'].unique().tolist()
        res = []

        for run_ in runs:
            run = run_[1:]  # Пропуск первого события
            
            # Сортировка событий по порядку стимулов
            sorted_onset_values = run['onset'].iloc[
                run['stimulus_number'].apply(lambda x: unique_names_list.index(x)).argsort()
            ].values
            
            res.append(self.extract_windows(sorted_onset_values, window_size, tr_shift))
            
        return res

    def apply_func(self, data, process_func, need_average=False):
        """
        Применяет функции к вырезанным участкам.
        """
        processed_data = process_func(data)
        return np.mean(processed_data, axis=0) if need_average else processed_data
==================================================

📄 fmri_processing/subjects_info.py
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

hc_data_tr_info = {
    '1136_DOROSHENKO_N_I__1136': 1.0,
    '1146_KRYLOV_V_O__1146': 1.0,
    '1152_BAKAEV_A_T__1152': 1.0,
    '1153_ZYZYKIN_A_P__1153': 1.0,
    '1168_NESTER_A_O__1168': 1.0,
    '1186_MAGOMEDOV_A_A__1186': 1.0,
    '1329_Lisitsin_I_S': 1.11,
    '1339_Berdikov_P_G': 1.11,
    '1342_Mozgovoi_V_V': 1.11,
    '1350_Matveev_M_I': 1.11,
    '1351_Kruglov_V_A': 1.11,
    '1352_Zemkin_V_A': 1.11,
    '1357_Kozhanov_K_D': 1.11,
    '1364_Nabiev_T_R': 1.11,
    '1365_Dolgikh_S_V': 1.11,
    '1366_Dyatlov_G_I': 1.11,
    '1373_Russak_D_A': 1.11,
}

test_data_tr_info = {
    '1374_Stolbov_A_P': 1.11,
    '1386_Pitersky_A_Yu': 1.11,
    '1387_Shumov_A_D': 1.11,
    '1392_Bushlakin_R_O': 1.11,
    '1393_Rogachev_S_I': 1.11,
    '1394_Bunin_D_L': 1.11,
    '1396_Egorov_A_V': 1.11,
    '1397_Korolev_B_S': 1.11,
    '1398_Kovalevsky_A_E': 1.11,
    '1418_Egorov_N_A': 1.11,
}


schz_data_tr_info = {
'1154_TYULGANOVA_D_A__1154' : 1.0,
'1158_POCHENCHUK_K_A__1158' : 1.0,
'1165_Kolykhalova_K_O' : 1.0,
'1173_Bartashev_A_S' : 1.0,
'1177_Ivanov_S_A' : 1.0,
'1178_Finogenov_A_V' : 1.0,
'1184_Linichenko_A_G' : 1.0,
'1193_Ulyanova_E_A' : 1.11,
'1202_Shtamburg_N_S' : 1.11,
'1206_Buynitsky_D_A' : 1.11,
'1220_Ibragimova_K_A' : 1.11,
'1221_Ibragimova_V_Kh' : 1.11,
'1227_Gavrilov_A_M' : 1.11,
'1234_Kuzin_M_A' : 1.11,
'1506_Nikishova_Anna' : 1.11,
'1507_Tkach_A_M' : 1.11,
'1508_Shostak_A_A' : 1.11,
'1509_Bogomolova_M_M' : 1.11,
'1510_Foltsov_P_I' : 1.11,
'1514_Shostak_A_A' : 1.11,
}


tr_info = {
    'hc_data' : hc_data_tr_info,
    'test_data' : test_data_tr_info,
    'schz_data' : schz_data_tr_info,
    'card_hc_data' : hc_data_tr_info,
    'card_test_data' : test_data_tr_info
}

==================================================

📄 fmri_processing/data_loader.py
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import logging
from pathlib import Path
import numpy as np
import pandas as pd
from nilearn.maskers import NiftiLabelsMasker


"""
Класс DataLoader предназначен для:
1. Загрузки и предобработки fMRI данных из NIfTI-файлов с использованием атласа
2. Сохранения/загрузки предобработанных данных в формате .npy
3. Загрузки и обработки данных о событиях из текстовых файлов
"""
class DataLoader:
    def __init__(self):
        self.logger = self._setup_logger()


    def _setup_logger(self):
        """Инициализирует и настраивает логгер для класса"""
        logger = logging.getLogger("DataLoader")
        if not logger.handlers:
            logger.setLevel(logging.INFO)
            handler = logging.StreamHandler()
            handler.setFormatter(
                logging.Formatter("[%(asctime)s][%(levelname)s][%(name)s] %(message)s")
            )
            logger.addHandler(handler)
        return logger


    def load_from_nii_and_save(
        self,
        data_path,
        npy_path,
        tr,
        atlas_path,
        standardize=False
    ):
        """
        Обработка NIfTI файла с созданием временного masker

        Параметры:
            data_path: Путь к входному NIfTI файлу
            npy_path: Путь для сохранения результата (None - не сохранять)
            tr: Время повторения (Repetition Time) в секундах
            atlas_path: Путь к файлу атласа для экстракции ROI
            standardize: Флаг стандартизации данных

        Возвращает:
            np.ndarray: Массив данных формы (временные точки × ROI)
        """
        self.logger.info(f'Loading data from {data_path}')

        data_path = Path(data_path)
        atlas_path = Path(atlas_path)
        npy_path = Path(npy_path) if npy_path else None

        if not data_path.exists():
            self.logger.error(f"Data file not found: {data_path}")
            return None
        if not atlas_path.exists():
            self.logger.error(f"Atlas file not found: {atlas_path}")
            return None

        try:
            masker = NiftiLabelsMasker(
                labels_img=str(atlas_path),
                standardize=standardize,
                verbose=1,
                tr=tr
            )
            
            fmri_data = masker.fit_transform(str(data_path))
            
            if npy_path:
                npy_path.parent.mkdir(parents=True, exist_ok=True)
                np.save(npy_path, fmri_data)
                self.logger.info(f"Saved processed data to: {npy_path}")
            
            return fmri_data
        except Exception as e:
            self.logger.error(f"Error processing {data_path}: {str(e)}", exc_info=True)
            return None


    def load_from_npy(self, npy_path):
        """
        Загрузка предобработанных данных из .npy файла

        Параметры:
        npy_path: Путь к .npy файлу

        Возвращает:
        np.ndarray: Загруженный массив данных или None при ошибке
        """
        npy_path = Path(npy_path)
        try:
            if not npy_path.exists():
                raise FileNotFoundError(f"File {npy_path} not found")
                
            self.logger.info(f"Loading preprocessed data from: {npy_path}")
            return np.load(npy_path)
        except Exception as e:
            self.logger.error(f"Error loading .npy file: {str(e)}")
            return None


    def load_events(self, events_path):
        """
        Загрузка и парсинг файла событий

        Параметры:
        events_path: Путь к текстовому файлу событий
        
        Формат файла (ожидаются как минимум 5 колонок, разделенных пробелами):
        [индекс] [onset] [длительность] [stimulus_code] [stimulus_name]

        Возвращает:
        pd.DataFrame: DataFrame с колонками:
            onset, duration, trial_type, name, stimulus_number
        """
        events_path = Path(events_path)
        if not events_path.exists():
            self.logger.error(f"Events file not found: {events_path}")
            return None
            
        return self._process_events_file(events_path)


    def load_events_for_different_trials(self, events_path):
        """
        Парсинг файла событий с группировкой по уникальным наборам вопросов.

        Логика обработки:
        - Вопросы группируются по уникальным наборам из 6 вопросов (порядок не важен).
        - Каждая группа возвращается как отдельный DataFrame.
        """
        self.logger.info(f'Parsing time-file: {events_path}')
        events_path = Path(events_path)

        # Словарь для группировки по stimulus_group (первая часть stimulus_code)
        stimulus_groups = {}
        # Словарь для связи наборов вопросов с записями
        question_groups = {}

        try:
            with events_path.open('r') as f:
                for line_num, line in enumerate(f, 1):
                    parts = line.strip().split('\t')  # Разделение по табуляции
                    if len(parts) < 4:
                        continue  # Пропуск неполных строк

                    stimulus_with_question = parts[3].strip()
                    if not stimulus_with_question:
                        continue  # Пропуск строк без вопроса

                    # Разделение stimulus_code и вопроса
                    if ' ' not in stimulus_with_question:
                        continue  # Неверный формат
                    
                    stimulus_code, question = stimulus_with_question.split(' ', 1)
                    stimulus_group = stimulus_code.split('.')[0]

                    # Сохраняем вопрос в соответствующей группе
                    if stimulus_group not in stimulus_groups:
                        stimulus_groups[stimulus_group] = {
                            'questions': set(),
                            'records': []
                        }

                    # Определение параметров
                    try:
                        # stimulus_type - третий символ stimulus_code (если есть)
                        stimulus_type = stimulus_code[2] if len(stimulus_code) >= 3 else '0'
                        trial_type = 1 if stimulus_type == '4' else 0

                        stimulus_groups[stimulus_group]['questions'].add(question)
                        stimulus_groups[stimulus_group]['records'].append({
                            'onset': float(parts[1]),
                            'duration': 1.0,
                            'trial_type': trial_type,
                            'name': question,
                            'stimulus_number': stimulus_type
                        })
                    except Exception as e:
                        self.logger.warning(f"Error processing line {line_num}: {e}")

            # Группировка по уникальным наборам вопросов
            for group, data in stimulus_groups.items():
                if len(data['questions']) != 6:
                    self.logger.warning(f"Группа {group} содержит {len(data['questions'])} вопросов. Требуется 6.")
                    continue

                # Используем frozenset для игнорирования порядка
                question_set = frozenset(data['questions'])
                if question_set not in question_groups:
                    question_groups[question_set] = []
                question_groups[question_set].extend(data['records'])

        except Exception as e:
            self.logger.error(f"Error processing events file: {str(e)}")
            return None

        # Формируем список DataFrame для каждой уникальной группы вопросов
        dfs = [pd.DataFrame(records) for records in question_groups.values()]
        return dfs if dfs else None

    def _process_events_file(self, file_path):
        """
        Парсинг файла событий с извлечением ключевых параметров

        Логика обработки:
        - stimulus_type определяется по 3-му символу stimulus_code
        - trial_type = 1 если stimulus_type == '4' (пример для конкретного эксперимента)
        """
        self.logger.info(f'Parsing time-file: {file_path}')

        records = []
        
        try:
            with file_path.open('r') as f:
                for line_num, line in enumerate(f, 1):
                    parts = line.strip().split()
                    
                    if len(parts) < 5:
                        continue
                        
                    try:
                        stimulus_code = parts[3]
                        
                        stimulus_type = '0'
                        if len(stimulus_code) >= 3:
                            stimulus_type = stimulus_code[2]


                        trial_type = 1 if stimulus_type == '4' else 0

                        records.append({
                            'onset': float(parts[1]),
                            'duration': 1.0,
                            'trial_type': trial_type,
                            'name': parts[4],
                            'stimulus_number': stimulus_type
                        })
                    except Exception as e:
                        self.logger.warning(f"Error processing line {line_num}: {e}")
        except Exception as e:
            self.logger.error(f"Error processing events file: {str(e)}")
            return None
            
        return pd.DataFrame(records) if records else None

# import os
# import numpy as np
# import pandas as pd
# from nilearn.maskers import NiftiLabelsMasker
# import os
# from pathlib import Path
# import numpy as np
# import pandas as pd
# from nilearn.maskers import NiftiLabelsMasker
# from typing import Optional, Union



# class DataLoader:
#     # TODO: перенести создание NiftiLabelsMasker в load_from_nii_and_save, чтобы tr передавать там и не инициализировать лишний раз, если не будем скачивать из nii
#     def __init__(self, atlas_path, standartize=False, tr=1.0):
#         self.atlas_path = atlas_path
#         self.masker = NiftiLabelsMasker(labels_img=self.atlas_path, standardize=standartize, verbose=1, tr=tr)    


#     def load_data(self, data_path, npy_path=None):
#         # TODO: подумать, как поступить с этой функцией
#         '''
#             Загружаем данные в зависимости от того, есть ли данные в npy или нет
#         '''
#         if npy_path is not None:
#             return self.load_data_from_npy(npy_path)
#         else:
#             return self.load_from_nii_and_save(data_path)

    
#     def load_events(self, events_path, load_from_csv=False):
#         if load_from_csv:
#             return self.load_events_data_from_csv(events_path)
#         else:
#             return self._process_events(events_path)


#     def load_from_nii_and_save(self, data_path, npy_path=None):
#         """Загружает данные из NIfTI, преобразует и сохраняет в numpy-файл"""
        
#         # Проверяем, что файл существует
#         if not os.path.isfile(data_path):
#             print(f"Warning: File not found - {data_path}")
#             return None
        
#         try:
#             # Обработка и сохранение данных
#             fmri_data = self.masker.fit_transform(data_path)
#             if npy_path is not None:
#                 os.makedirs(os.path.dirname(npy_path), exist_ok=True)
#                 np.save(npy_path, fmri_data)   # тут надо проверить, что если нет вложенных директорий нужных
#             return fmri_data
#         except Exception as e:
#             print(f"Error processing data with path {data_path}: {str(e)}")
#             return None
    

#     def load_data_from_npy(self, npy_path):
#         """Загружает сохраненные numpy-массивы"""
#         if os.path.isfile(npy_path):
#             print(f'load from  {npy_path}')
#             return np.load(npy_path)
#         else:
#             print(f"Warning: Numpy file not found - {npy_path}")
#             return None


#     def load_events_data_from_csv(self, events_path):
#         """Загружает метки событий из CSV-файлов"""    
#         if os.path.isfile(events_path):
#             return pd.read_csv(events_path)
#         else:
#             print(f"Warning: Events file not found - {events_path}")
#             return None


#     # def process_events(self, file_name):
#     #     with open('./tmp.csv', 'w') as output_file,\
#     #         open(file_name, 'r') as input_file:
#     #             output_file.write('onset,duration,trial_type,name,stimulus_number\n')
#     #             for line in input_file:
#     #                 l = line.split()
#     #                 if len(l) == 3:
#     #                     continue
#     #                 if l[3][2] == '4':
#     #                     output_file.write(l[1] + ',1.0,'  +  '1,' + l[4] + ',' + l[3][2] + '\n')
#     #                 else:
#     #                     output_file.write(l[1] + ',1.0,' + '0,' + l[4] + ','+ l[3][2] + '\n')
#     #     events_data = pd.read_csv('./tmp.csv')

#     #     return events_data


#     def _process_events(self, file_path: Union[str, Path]) -> pd.DataFrame:
#         """Обрабатывает файл событий и возвращает DataFrame"""
#         file_path = Path(file_path)
#         records = []

#         with file_path.open('r') as input_file:
#             for line in input_file:
#                 parts = line.strip().split()
#                 if len(parts) < 5:
#                     continue  # Пропускаем невалидные строки
                    
#                 try:
#                     # Парсим данные из строки
#                     stimulus_code = parts[3]
#                     stimulus_type = stimulus_code[2] if len(stimulus_code) >= 3 else '0'
                    
#                     record = {
#                         'onset': float(parts[1]),
#                         'duration': 1.0,
#                         'trial_type': 1 if stimulus_type == '4' else 0,
#                         'name': parts[4],
#                         'stimulus_number': stimulus_type
#                     }
#                     records.append(record)
                    
#                 except (IndexError, ValueError) as e:
#                     print(f"Error processing line: {line.strip()} - {str(e)}")
#                     continue

#         # Создаем DataFrame с явным указанием порядка колонок
#         return pd.DataFrame(records, columns=[
#             'onset', 
#             'duration', 
#             'trial_type', 
#             'name', 
#             'stimulus_number'
#         ])

==================================================

📁 project.egg-info
--------------------------------------------------

📄 project.egg-info/dependency_links.txt
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


==================================================

📄 project.egg-info/top_level.txt
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fmri_processing

==================================================

📄 project.egg-info/PKG-INFO
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Metadata-Version: 1.0
Name: project
Version: 0.1
Summary: UNKNOWN
Home-page: UNKNOWN
Author: UNKNOWN
Author-email: UNKNOWN
License: UNKNOWN
Description: UNKNOWN
Platform: UNKNOWN

==================================================

📄 project.egg-info/SOURCES.txt
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
setup.py
fmri_processing/__init__.py
fmri_processing/data_loader.py
fmri_processing/functions.py
fmri_processing/subject_data.py
fmri_processing/subjects_info.py
fmri_processing/utils.py
project.egg-info/PKG-INFO
project.egg-info/SOURCES.txt
project.egg-info/dependency_links.txt
project.egg-info/top_level.txt
==================================================

📁 scripts
--------------------------------------------------

📄 scripts/create_config.py
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'''
    Скрипт, который позволяет создавать конфиги по директории с данными.
    Директория должна содержать поддиректории, в которых находятся данные 
    и файлы с временным разбиением. TODO: добавить псевдографику с деревом директории.
'''
import os
import yaml
from fmri_processing import subjects_info


def create_config(base_dir, data_file_name, output_config_path=None, numpy_data_dir=None, tr_info=None):
    subjects = []

    # Устанавливаем значения по умолчанию
    if tr_info is None:
        tr_info = {}
    
    dir_names = sorted([d for d in os.listdir(base_dir) 
                       if os.path.isdir(os.path.join(base_dir, d))])
    
    # Проходим по всем поддиректориям в test_data
    for dir_name in dir_names:
        dir_path = os.path.join(base_dir, dir_name)
        
        # Пропускаем файлы (если есть), работаем только с папками
        if not os.path.isdir(dir_path):
            continue
        
        # Ищем .txt файл в папке (берём первый найденный)
        txt_files = [f for f in os.listdir(dir_path) if f.endswith('.txt')]

        if not txt_files:
            print(f"Внимание: в папке {dir_name} нет .txt файла!")
            continue
        
        if len(txt_files) > 1:
            print(f"В диретории {dir_name} более 1 txt файла. Проверьте, что в конфиг попал корректный файл")

        txt_file = txt_files[0]

        # Формируем запись для конфига
        subject_data = {
            'data_path': os.path.join(dir_path, data_file_name) if data_file_name else '',
            'events_path': os.path.join(dir_path, txt_file),
            'tr': tr_info.get(dir_name, 1.0),  # Используем значение из tr_info или 1.0 по умолчанию
            'numpy_path': os.path.join(numpy_data_dir, f'{dir_name}.npy') if numpy_data_dir else ''
        }
        subjects.append(subject_data)

    # Создаём структуру конфига
    config = {'subjects': subjects}

    # Сохраняем в YAML
    if output_config_path:
        with open(output_config_path, 'w', encoding='utf-8') as f:
            yaml.dump(config, f, default_flow_style=False, sort_keys=False, allow_unicode=True)
        print(f"Конфиг успешно создан: {output_config_path}")
    else:
        print("Внимание: output_config_path не указан, конфиг не сохранен на диск")


if __name__ == '__main__':
    base_dir = '/home/aaanpilov/diploma/project/data'
    base_config_dir = '/home/aaanpilov/diploma/project/configs'
    base_numpy_dir = '/home/aaanpilov/diploma/project/numpy_data'
    data_file_name = 'sdenoised_data.nii.gz'

    for name in ('hc_data', 'test_data', 'schz_data', 'card_hc_data', 'card_test_data'):
        # Создаем конфиги для z-score данных
        create_config(
            base_dir=os.path.join(base_dir, name),
            data_file_name=data_file_name,
            output_config_path=os.path.join(base_config_dir, name+'.yaml'),
            numpy_data_dir=os.path.join(base_numpy_dir, name),
            tr_info = subjects_info.tr_info[name]
        )

        raw_name = 'raw_' + name
        # Создаем конфиги для сырых данных
        create_config(
            base_dir=os.path.join(base_dir, name),
            data_file_name=data_file_name,
            output_config_path=os.path.join(base_config_dir, raw_name + '.yaml'),
            numpy_data_dir=os.path.join(base_numpy_dir, raw_name),
            tr_info = subjects_info.tr_info[name]
        )
==================================================

📄 scripts/read_from_nii_and_save.py
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
''' 
    Скрипт для считывания данных из nii и сохранения в npy.
    Информация о пути до nii данных и о том, куда сохранять,
    берется из конфига.
'''

from fmri_processing import *


# TODO: атлас надо сделать какой нибудь глобальной переменной, которую можно будет откуда угодно достать или даже в конфиге указать просто
atlas_path = '/home/aaanpilov/diploma/project/atlas/atlas_resample.nii'

config_raw_test = '/home/aaanpilov/diploma/project/configs/raw_test_data.yaml'
config_test = '/home/aaanpilov/diploma/project/configs/test_data.yaml'

config_raw_card_hc = '/home/aaanpilov/diploma/project/configs/raw_card_hc_data.yaml'
config_card_hc = '/home/aaanpilov/diploma/project/configs/card_hc_data.yaml'

config_raw_card_test = '/home/aaanpilov/diploma/project/configs/raw_card_test_data.yaml'
config_card_test = '/home/aaanpilov/diploma/project/configs/card_test_data.yaml'

config_raw_schz = '/home/aaanpilov/diploma/project/configs/raw_schz_data.yaml'
config_schz = '/home/aaanpilov/diploma/project/configs/schz_data.yaml'

config_raw_hc = '/home/aaanpilov/diploma/project/configs/raw_hc_data.yaml'
config_hc = '/home/aaanpilov/diploma/project/configs/hc_data.yaml'

def load_from_nii_and_save(config_path, standardize=False):
    # Получаем даннные из конфига    
    subjects = process_config(config_path)

    # Интерируемся по объектам в конфиге
    for subject in subjects:
        # TODO: тут надо, чтобы всегда был путь до numpy, надо добавить какое-нибудь исключение.
        # TODO: можно еще передавать инфу о numpy пути, чтобы конфиги не плодить.
        # Получаем и сохраняем данные
        data_loader = DataLoader()
        data_loader.load_from_nii_and_save(
            data_path=subject['data_path'], 
            npy_path=subject['numpy_path'],
            tr=subject['tr'],
            atlas_path=atlas_path,
            standardize=standardize)


if __name__ == '__main__':
    raw_configs = [
        # config_raw_test, 
        # config_raw_hc, 
        config_raw_card_hc, 
        config_raw_card_test, 
        # config_raw_schz
    ]

    configs = [
        # config_hc, 
        # config_test, 
        config_card_hc, 
        # config_schz, 
        config_card_test
    ]

    #Считать сырые данные
    for config in raw_configs:
        load_from_nii_and_save(config, standardize=False)
    
    # Считать данные в z-score
    for config in configs:
        load_from_nii_and_save(config, standardize=True)

    
==================================================

📄 scripts/process_subjects_from_config.py
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'''
    Скрипт, который считывает данные согласно конфигу и затем подает модели и записывает результаты в файл.
    TODO: сделать ревью скрипта
'''

import pickle
from fmri_processing import *


atlas_path = '/home/aaanpilov/diploma/project/atlas/atlas_resample.nii'
config_path = '/home/aaanpilov/diploma/project/config_test_data.yaml'


if __name__ == '__main__':
    # Получаем даннные из конфига    
    subjects = process_config(config_path)

    # Загружаем модель
    with open('model.pkl', 'rb') as f:
        model = pickle.load(f)

    # Создаем загрузчик данных
    data_loader = DataLoader()

    need_average = True

    with open('results.txt', 'w') as f:
        # Интерируемся по объектам в конфиге
        for subject in subjects:        
            # Проверяем есть ли путь к сохраненной numpy матрице
            if 'numpy_path' in subject:
                numpy_path = subject['numpy_path']
                data = data_loader.load_from_npy(numpy_path)
            else:
                data = data_loader.load_from_nii_and_save(
                    data_path=subject['data_path'], 
                    npy_path=subject['numpy_path'],
                    tr=subject['tr'],
                    atlas_path=atlas_path,
                    standardize=True)  # TODO: вот тут разобраться с параметром надо

            # Получаем и обрабатываем данные
            events = data_loader.load_events(subject['events_path'])
            if data is None or events is None:
                continue

            # Формируем объект хранящий данные
            sub = SubjectData()
            sub.set_data(data)
            sub.set_events(events)
            sub.set_tr(subject['tr'])
            
            # Обрезаем и преобразуем данные
            processed_truth, processed_lie = sub.cut_for_truth_and_lie(window_size=10 , process_func=calc_max_min, need_average=need_average)

            if need_average:
                # Проверяем данные на модели
                predicted_truth = model.predict(processed_truth.reshape(1, 132))
                predicted_lie = model.predict(processed_lie.reshape(1, 132))
                print(predicted_truth)
                print(predicted_lie)
                
            else:
                # Проверяем данные на модели
                predicted_truth = model.predict(processed_truth)
                predicted_lie = model.predict(processed_lie)

                str = f'{subject["data_path"]}\n'
                # Выводим результаты
                str += get_predict_results_str(sub.get_events(), predicted_truth, predicted_lie)
                str += '\n'
                f.write(str)
                

==================================================

📄 scripts/runs_matrix.py
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import numpy as np
from enum import Enum, auto
from fmri_processing import *
from fmri_processing.subjects_info import *
from fmri_processing.utils import draw_heat_map
import numpy as np
import os
import matplotlib.pyplot as plt
from fmri_processing.utils import *
from pathlib import Path

atlas_path = '/home/aaanpilov/diploma/project/atlas/atlas_resample.nii'

class DataOption(Enum):
    RAW_HC = auto()
    RAW_TEST = auto()
    RAW_SCHZ = auto()
    RAW_CARD_HC = auto()
    RAW_CARD_TEST = auto()
    HC = auto()
    TEST = auto()
    SCHZ = auto()
    CARD_HC = auto()
    CARD_TEST = auto()


configs = {
    # DataOption.RAW_HC : '/home/aaanpilov/diploma/project/configs/raw_hc_data.yaml',
    # DataOption.RAW_TEST : '/home/aaanpilov/diploma/project/configs/raw_test_data.yaml',
    # DataOption.RAW_SCHZ : '/home/aaanpilov/diploma/project/configs/raw_schz_data.yaml',
    DataOption.RAW_CARD_HC : '/home/aaanpilov/diploma/project/configs/raw_card_hc_data.yaml',
    DataOption.RAW_CARD_TEST : '/home/aaanpilov/diploma/project/configs/raw_card_test_data.yaml',
    # DataOption.HC : '/home/aaanpilov/diploma/project/configs/hc_data.yaml',
    # DataOption.TEST : '/home/aaanpilov/diploma/project/configs/test_data.yaml',
    # DataOption.SCHZ : '/home/aaanpilov/diploma/project/configs/schz_data.yaml',
    DataOption.CARD_HC : '/home/aaanpilov/diploma/project/configs/card_hc_data.yaml',
    DataOption.CARD_TEST : '/home/aaanpilov/diploma/project/configs/card_test_data.yaml',
}


# Для чемпиона 
def get_stats(ranks_list, stimulus_index=3):
    # Инициализация
    counts_3_5 = np.zeros(132, dtype=int)  # Счётчик для 132 регионов

    # Перебор всех прогонов (runs)
    for ranks in ranks_list:
        is_five = (ranks[stimulus_index, :] >= 4)  # Где стимул 3 == 5 в текущем прогоне
        counts_3_5 += is_five.astype(int)

    return counts_3_5.reshape(1, -1)

# Пропорциональные баллы
def normalize_proportional(data):
    # Копируем данные, чтобы не изменять исходный массив
    data = np.array(data, dtype=float)
    ranks = np.zeros_like(data)
    
    for region in range(data.shape[1]):
        # Получаем значения для текущего региона
        region_data = data[:, region]
        
        # Вычисляем сумму значений (для нормализации)
        sum_values = np.sum(region_data)
        
        if sum_values > 0:
            # Распределяем баллы пропорционально значениям
            # Сумма баллов должна быть 15 (1+2+3+4+5)
            proportional_scores = 15 * region_data / sum_values
        else:
            # Если все значения нулевые, ставим равные баллы
            proportional_scores = np.ones(5) * 3  # Среднее значение
            
        # Округляем до 2 знаков после запятой (для читаемости)
        ranks[:, region] = np.round(proportional_scores, 2)
    
    return ranks

# Баллы
def normalize(data):
# Ваш массив (5 стимулов × 132 региона)

    # Для каждого региона (столбца) получаем ранги стимулов
    ranks = np.zeros_like(data, dtype=int)

    for region in range(data.shape[1]):
        # Получаем индексы, которые сортируют значения в столбце (от меньшего к большему)
        sorted_indices = np.argsort(data[:, region])
        # Преобразуем индексы в ранги (1 для минимального, 6 для максимального)
        ranks[sorted_indices, region] = np.arange(1, 6)  # 1..6
    return ranks

# Баллы 1-2
def normalize_reduced(data):
    # Создаем массив нулей того же размера, что и входные данные
    ranks = np.zeros_like(data, dtype=int)
    
    for region in range(data.shape[1]):
        # Получаем индексы, которые сортируют значения в столбце (от меньшего к большему)
        sorted_indices = np.argsort(data[:, region])
        # Присваиваем:
        # - 0 для всех элементов по умолчанию (уже сделано при создании ranks)
        # - 1 для второго по величине
        ranks[sorted_indices[-2], region] = 1
        # - 2 для максимального
        ranks[sorted_indices[-1], region] = 2
    
    return ranks


# Расстановка баллов
def process_runs_and_save_matrix(config_path, matrix_path, processing_func=calc_auc, normalize_func=normalize):
    subjects = process_config(config_path)

    # Создаем загрузчик данных
    data_loader = DataLoader()

    matrix = None

    # Интерируемся по объектам в конфиге
    for subject in subjects:        
        # Проверяем есть ли путь к сохраненной numpy матрице
        if 'numpy_path' in subject:
            numpy_path = subject['numpy_path']
            data = data_loader.load_from_npy(numpy_path)

        # Получаем и обрабатываем данные
        events = data_loader.load_events(subject['events_path'])
        if data is None or events is None:
            continue

        # Формируем объект хранящий данные
        sub = SubjectData()
        sub.set_data(data)
        sub.set_events(events)
        sub.set_tr(subject['tr'])

        runs = sub.cut_for_runs(window_size=10)
        ranks_list = list()
        for run in runs:
            processed_data = sub.apply_func(run, processing_func)
            ranks = normalize_func(processed_data)
            ranks_list.append(ranks)
        summed_ranks = np.sum(ranks_list, axis=0)

        if matrix is None:
            matrix = summed_ranks
        else:
            matrix = np.concatenate((matrix, summed_ranks), axis=0)
    os.makedirs(os.path.dirname(matrix_path), exist_ok=True)
    np.save(matrix_path, matrix)


# Определение чемпиона
def process_runs_comparison_and_save_matrix(config_path, matrix_path, processing_func=calc_auc, normalize_func=normalize):
    subjects = process_config(config_path)

    # Создаем загрузчик данных
    data_loader = DataLoader()

    matrix = None

    # Интерируемся по объектам в конфиге
    for subject in subjects:        
        # Проверяем есть ли путь к сохраненной numpy матрице
        if 'numpy_path' in subject:
            numpy_path = subject['numpy_path']
            data = data_loader.load_from_npy(numpy_path)

        events = data_loader.load_events(subject['events_path'])
        if data is None or events is None:
            continue

        # Формируем объект хранящий данные
        sub = SubjectData()
        sub.set_data(data)
        sub.set_events(events)
        sub.set_tr(subject['tr'])

        runs = sub.cut_for_runs(window_size=10)
        ranks_list = list()
        for run in runs:
            processed_data = sub.apply_func(run, processing_func)
            ranks = normalize_func(processed_data)
            ranks_list.append(ranks)
        
        stats_matrix = None
        for i in range(len(ranks_list)):
            stimulus_stats = get_stats(ranks_list, i)
            if stats_matrix is None:
                stats_matrix = stimulus_stats
            else:
                stats_matrix = np.concatenate((stats_matrix, stimulus_stats), axis=0)
        if matrix is None:
            matrix = stats_matrix
        else:
            matrix = np.concatenate((matrix, stats_matrix), axis=0)
    os.makedirs(os.path.dirname(matrix_path), exist_ok=True)
    np.save(matrix_path, matrix)


# Обрабатываем стимулы отдельно
def process_stimulus_and_save_matrix(config_path, matrix_path, processing_func=calc_auc, normalize_func=normalize):
    subjects = process_config(config_path)

    # Создаем загрузчик данных
    data_loader = DataLoader()

    matrix = None

    # Интерируемся по объектам в конфиге
    for subject in subjects:        
        # Проверяем есть ли путь к сохраненной numpy матрице
        if 'numpy_path' in subject:
            numpy_path = subject['numpy_path']
            data = data_loader.load_from_npy(numpy_path)

        events = data_loader.load_events(subject['events_path'])
        if data is None or events is None:
            continue

        # Формируем объект хранящий данные
        sub = SubjectData()
        sub.set_data(data)
        sub.set_events(events)
        sub.set_tr(subject['tr'])

        runs = sub.cut_for_runs(window_size=10)
        stimulus_data = np.mean(runs, axis=0)
        
        processed_stimulus_data = sub.apply_func(stimulus_data, processing_func)

        if matrix is None:
            matrix = processed_stimulus_data
        else:
            matrix = np.concatenate((matrix, processed_stimulus_data), axis=0)
    os.makedirs(os.path.dirname(matrix_path), exist_ok=True)
    np.save(matrix_path, matrix)    


# Обрабатываем стимулы отдельно
def process_stimulus_with_different_trials_and_save_matrix(config_path, matrix_path, processing_func=calc_auc, normalize_func=normalize):
    subjects = process_config(config_path)

    # Создаем загрузчик данных
    data_loader = DataLoader()

    matrix = None

    # Интерируемся по объектам в конфиге
    for subject in subjects:        
        # Проверяем есть ли путь к сохраненной numpy матрице
        if 'numpy_path' in subject:
            numpy_path = subject['numpy_path']
            data = data_loader.load_from_npy(numpy_path)

        events = data_loader.load_events_for_different_trials(subject['events_path'])

        if data is None or events is None:
            continue
        
        for events_pack in events:
            # Формируем объект хранящий данные
            sub = SubjectData()
            sub.set_data(data)
            sub.set_events(events_pack)
            sub.set_tr(subject['tr'])

            runs = sub.cut_for_runs(window_size=10)
            stimulus_data = np.mean(runs, axis=0)
            
            processed_stimulus_data = sub.apply_func(stimulus_data, processing_func)

            if matrix is None:
                matrix = processed_stimulus_data
            else:
                matrix = np.concatenate((matrix, processed_stimulus_data), axis=0)
    os.makedirs(os.path.dirname(matrix_path), exist_ok=True)
    np.save(matrix_path, matrix)    
    print(matrix.shape)


# Усредняем правдивые и ложные ответы отдельно
def process_runs_into_average_matrix(config_path, matrix_path, processing_func=calc_auc, normalize_func=normalize):
    subjects = process_config(config_path)

    # Создаем загрузчик данных
    data_loader = DataLoader()

    matrix = None

    # Инициализация списков с помощью спискового включения
    matrix_list_truth = [None] * 5
    matrix_list_lie = [None] * 5

    
    # Интерируемся по объектам в конфиге
    for subject in subjects:        
        # Проверяем есть ли путь к сохраненной numpy матрице
        if 'numpy_path' in subject:
            numpy_path = subject['numpy_path']
            data = data_loader.load_from_npy(numpy_path)
            
        events = data_loader.load_events(subject['events_path'])
        if data is None or events is None:
            continue

        # Формируем объект хранящий данные
        sub = SubjectData()
        sub.set_data(data)
        sub.set_events(events)
        sub.set_tr(subject['tr'])

        runs = sub.cut_for_runs(window_size=10)
        stimulus_list = list()
        for run in runs:
            processed_data = sub.apply_func(run, processing_func)
            stimulus_list.append(processed_data)

        for k in range(len(stimulus_list)):  # Перебираем каждую строку (0, 1, 2, 3, 4)
            # 1. Усредняем k-ю строку всех массивов
            k_row_avg = np.mean([arr[k] for arr in stimulus_list], axis=0, keepdims=True)  # (1, 132)
            
            # 2. Усредняем все остальные строки (все, кроме k-й)
            other_rows = np.concatenate([np.delete(arr, k, axis=0) for arr in stimulus_list])  # (4*N, 132)
            other_avg = np.mean(other_rows, axis=0, keepdims=True)  # (1, 132)
            
            # Обновляем матрицы truth и lie с помощью более компактного кода
            matrix_list_truth[k] = other_avg if matrix_list_truth[k] is None else np.concatenate((matrix_list_truth[k], other_avg))
            matrix_list_lie[k] = k_row_avg if matrix_list_lie[k] is None else np.concatenate((matrix_list_lie[k], k_row_avg
                                                                                              ))

    for k in range(len(matrix_list_truth)):
        matrix = np.concatenate((matrix_list_truth[k], matrix_list_lie[k]))

        if k == 3:
            draw_heat_map(matrix)
        os.makedirs(os.path.dirname(matrix_path), exist_ok=True)
        np.save(matrix_path + str(k), matrix)



def build_matrixes_for_all(save_dir, processing_func ,normalize_func=normalize):
    for option, config in configs.items():
        for name, func in funcs.items():
            data_option_path = Path(config).stem
            matrix_path = os.path.join(os.path.join(save_dir, data_option_path), name)
            processing_func(config, matrix_path, func, normalize_func)


def build_ranks_matrixes(save_dir,normalize_func=normalize):
    build_matrixes_for_all(save_dir, process_runs_and_save_matrix, normalize_func)


def build_stimulus_matrixes(save_dir):
    build_matrixes_for_all(save_dir, process_stimulus_and_save_matrix)


if __name__ == '__main__':
    #--------------------------------------------------------------------------------------------------------------------
    # ВСЕ ДЛЯ РАНГОВ
    save_dir = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix'  
    build_ranks_matrixes(save_dir)

    save_dir_proportional_ranks = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/proportional'
    build_ranks_matrixes(save_dir_proportional_ranks, normalize_proportional)

    save_dir = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/reduced_ranks'  
    build_ranks_matrixes(save_dir, normalize_reduced)

    #--------------------------------------------------------------------------------------------------------------------
    # УСРЕДНЕННЫЙ СТИМУЛ
    save_dir = '/home/aaanpilov/diploma/project/numpy_matrixes/average_stimulus'  
    build_stimulus_matrixes(save_dir)

    # save_dir = '/home/aaanpilov/diploma/project/numpy_matrixes/average_stimulus'  
    # config = configs[DataOption.CARD_HC]
    # for name, func in funcs.items():
    #     data_option_path = Path(config).stem
    #     matrix_path = os.path.join(os.path.join(save_dir, data_option_path), name)
    #     process_stimulus_with_different_trials_and_save_matrix(config, matrix_path, func, normalize)


    #--------------------------------------------------------------------------------------------------------------------
    # УСРЕДНЕННОЕ ВСЕ
    # save_dir = '/home/aaanpilov/diploma/project/numpy_matrixes/average_matrix/propose'  
    # for name, func in funcs.items():
    #     matrix_path = os.path.join(os.path.join(save_dir, 'test'), name)
    #     process_runs_into_average_matrix('/home/aaanpilov/diploma/project/configs/test_data.yaml', matrix_path, func)

    #--------------------------------------------------------------------------------------------------------------------
    # ЧЕМПИОН
    # save_dir = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/prizes'  
    # build_ranks_matrixes_for_all(save_dir, normalize)
    #--------------------------------------------------------------------------------------------------------------------














    # def build_for_one(save_dir, normalize_func=normalize):
    # config_card_hc = '/home/aaanpilov/diploma/project/configs/card_hc.yaml'
    # data_option_path = 'card_hc'

    # # config_schz = '/home/aaanpilov/diploma/project/configs/schz.yaml'
    # # data_option_path = 'schz'

    # config_path = config_card_hc
    
    # for name, func in funcs.items():
    #     matrix_path = os.path.join(os.path.join(save_dir, data_option_path), name)
    #     process_runs_and_save_matrix(config_path, matrix_path, func, normalize_func)
    #     # process_runs_comparison_and_save_matrix(config_path, matrix_path, func, normalize_func)
    #     # process_runs_into_params_and_save_matrix(config_path, matrix_path, func)

==================================================

📄 scripts/build_matrix_for_average.py
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
from fmri_processing import *
import numpy as np
from fmri_processing.utils import draw_heat_map 
import os 
from enum import Enum, auto

atlas_path = '/home/aaanpilov/diploma/project/atlas/atlas_resample.nii'

class DataOption(Enum):
    RAW_HC = auto()
    RAW_TEST = auto()
    HC = auto()
    TEST = auto()


def build_average_matrix(config_path, matrix_path, process_func):
    # Получаем даннные из конфига    
    subjects = process_config(config_path)

    # Создаем загрузчик данных
    data_loader = DataLoader()

    need_average = True
    truth_matrix = None
    lie_matrix = None

    # Интерируемся по объектам в конфиге
    for subject in subjects:        
        # Проверяем есть ли путь к сохраненной numpy матрице
        if 'numpy_path' in subject:
            data = data_loader.load_from_npy(subject['numpy_path'])
        else:
            data = data_loader.load_from_nii_and_save(subject['numpy_path'])

        # Получаем и обрабатываем данные

        events = data_loader.load_events(subject['events_path'])
        if data is None or events is None:
            continue

        # Формируем объект хранящий данные
        sub = SubjectData()
        sub.set_data(data)
        sub.set_events(events)
        sub.set_tr(subject['tr'])
        
        # Обрезаем и преобразуем данные
        processed_truth, processed_lie = sub.cut_for_truth_and_lie(window_size=10 , process_func=process_func, need_average=need_average)

        if truth_matrix is None:
            truth_matrix = processed_truth.reshape(1, -1)
        else:
            truth_matrix = np.concatenate((truth_matrix, processed_truth.reshape(1, -1)), axis=0)
        
        if lie_matrix is None: 
            lie_matrix = processed_lie.reshape(1, -1)
        else:
            lie_matrix = np.concatenate((lie_matrix, processed_lie.reshape(1, -1)), axis=0)

    matrix_truth_lie = np.concatenate((truth_matrix, lie_matrix), axis=0)        
    draw_heat_map(matrix_truth_lie)
    np.save(matrix_path, matrix_truth_lie)


if __name__ == '__main__':
    save_dir = '/home/aaanpilov/diploma/project/numpy_matrixes/average_matrix'

    config_path_raw_hc = '/home/aaanpilov/diploma/project/configs/raw_hc_data.yaml'
    raw_hc = 'raw_HC'

    config_path_hc = '/home/aaanpilov/diploma/project/configs/hc_data.yaml'
    hc = 'HC'

    config_path_raw_test = '/home/aaanpilov/diploma/project/configs/raw_test_data.yaml'
    raw_test = 'raw_test'

    config_path_test = '/home/aaanpilov/diploma/project/configs/test_data.yaml'
    test = 'test'

    for data_option in DataOption:
        if data_option == DataOption.HC:
            config_path = config_path_hc
            data_option_path = hc
        elif data_option == DataOption.RAW_HC:
            config_path = config_path_raw_hc
            data_option_path = raw_hc
        elif data_option == DataOption.RAW_TEST:
            config_path = config_path_raw_test
            data_option_path = raw_test
        else:
            config_path = config_path_test
            data_option_path = test

        for name, func in funcs.items():
            matrix_path = os.path.join(os.path.join(save_dir, data_option_path), name)
            build_average_matrix(config_path, matrix_path, func)
==================================================

📁 models
--------------------------------------------------

📄 models/ranks_model.pkl
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x80 in position 0: invalid start byte]

==================================================

📄 models/model.pkl
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x80 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes
--------------------------------------------------

📁 numpy_matrixes/average_matrix
--------------------------------------------------

📁 numpy_matrixes/average_matrix/propose
--------------------------------------------------

📁 numpy_matrixes/average_matrix/propose/HC
--------------------------------------------------

📄 numpy_matrixes/average_matrix/propose/HC/auc1.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/HC/max3.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/HC/max_min3.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/HC/auc2.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/HC/auc4.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/HC/auc0.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/HC/min4.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/HC/min0.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/HC/min2.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/HC/max4.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/HC/auc3.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/HC/max1.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/HC/max_min2.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/HC/max_min1.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/HC/min3.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/HC/max_min4.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/HC/max_min0.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/HC/max2.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/HC/min1.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/HC/max0.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/average_matrix/propose/HC/test
--------------------------------------------------

📁 numpy_matrixes/average_matrix/propose/test
--------------------------------------------------

📄 numpy_matrixes/average_matrix/propose/test/auc1.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/test/max3.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/test/max_min3.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/test/auc2.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/test/auc4.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/test/auc0.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/test/min4.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/test/min0.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/test/min2.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/test/max4.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/test/auc3.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/test/max1.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/test/max_min2.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/test/max_min1.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/test/min3.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/test/max_min4.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/test/max_min0.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/test/max2.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/test/min1.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/propose/test/max0.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/average_matrix/HC
--------------------------------------------------

📄 numpy_matrixes/average_matrix/HC/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/HC/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/HC/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/HC/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/average_matrix/raw_test
--------------------------------------------------

📄 numpy_matrixes/average_matrix/raw_test/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/raw_test/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/raw_test/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/raw_test/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/average_matrix/raw_HC
--------------------------------------------------

📄 numpy_matrixes/average_matrix/raw_HC/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/raw_HC/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/raw_HC/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/raw_HC/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/average_matrix/test
--------------------------------------------------

📄 numpy_matrixes/average_matrix/test/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/test/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/test/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_matrix/test/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/average_stimulus
--------------------------------------------------

📁 numpy_matrixes/average_stimulus/card_test_data
--------------------------------------------------

📄 numpy_matrixes/average_stimulus/card_test_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/card_test_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/card_test_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/card_test_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/average_stimulus/raw_card_test_data
--------------------------------------------------

📄 numpy_matrixes/average_stimulus/raw_card_test_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/raw_card_test_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/raw_card_test_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/raw_card_test_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/average_stimulus/raw_test_data
--------------------------------------------------

📄 numpy_matrixes/average_stimulus/raw_test_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/raw_test_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/raw_test_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/raw_test_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/average_stimulus/card_hc_data
--------------------------------------------------

📄 numpy_matrixes/average_stimulus/card_hc_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/card_hc_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/card_hc_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/card_hc_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/average_stimulus/raw_card_hc_data
--------------------------------------------------

📄 numpy_matrixes/average_stimulus/raw_card_hc_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/raw_card_hc_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/raw_card_hc_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/raw_card_hc_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/average_stimulus/schz
--------------------------------------------------

📄 numpy_matrixes/average_stimulus/schz/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/schz/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/schz/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/schz/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/average_stimulus/card_hc
--------------------------------------------------

📄 numpy_matrixes/average_stimulus/card_hc/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/card_hc/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/card_hc/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/card_hc/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/average_stimulus/HC
--------------------------------------------------

📄 numpy_matrixes/average_stimulus/HC/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/HC/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/HC/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/HC/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/average_stimulus/raw_schz_data
--------------------------------------------------

📄 numpy_matrixes/average_stimulus/raw_schz_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/raw_schz_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/raw_schz_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/raw_schz_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/average_stimulus/raw_test
--------------------------------------------------

📄 numpy_matrixes/average_stimulus/raw_test/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/raw_test/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/raw_test/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/raw_test/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/average_stimulus/hc_data
--------------------------------------------------

📄 numpy_matrixes/average_stimulus/hc_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/hc_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/hc_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/hc_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/average_stimulus/test_data
--------------------------------------------------

📄 numpy_matrixes/average_stimulus/test_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/test_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/test_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/test_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/average_stimulus/raw_hc_data
--------------------------------------------------

📄 numpy_matrixes/average_stimulus/raw_hc_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/raw_hc_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/raw_hc_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/raw_hc_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/average_stimulus/raw_HC
--------------------------------------------------

📄 numpy_matrixes/average_stimulus/raw_HC/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/raw_HC/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/raw_HC/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/raw_HC/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/average_stimulus/test
--------------------------------------------------

📄 numpy_matrixes/average_stimulus/test/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/test/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/test/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/test/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/average_stimulus/schz_data
--------------------------------------------------

📄 numpy_matrixes/average_stimulus/schz_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/schz_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/schz_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/average_stimulus/schz_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix
--------------------------------------------------

📁 numpy_matrixes/ranks_matrix/card_test_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/card_test_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/card_test_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/card_test_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/card_test_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/raw_card_test_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/raw_card_test_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/raw_card_test_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/raw_card_test_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/raw_card_test_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/raw_test_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/raw_test_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/raw_test_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/raw_test_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/raw_test_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/card_hc_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/card_hc_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/card_hc_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/card_hc_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/card_hc_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/raw_card_hc_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/raw_card_hc_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/raw_card_hc_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/raw_card_hc_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/raw_card_hc_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/proportional
--------------------------------------------------

📁 numpy_matrixes/ranks_matrix/proportional/card_test_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/proportional/card_test_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/card_test_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/card_test_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/card_test_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/proportional/raw_card_test_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/proportional/raw_card_test_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/raw_card_test_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/raw_card_test_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/raw_card_test_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/proportional/raw_test_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/proportional/raw_test_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/raw_test_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/raw_test_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/raw_test_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/proportional/card_hc_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/proportional/card_hc_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/card_hc_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/card_hc_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/card_hc_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/proportional/raw_card_hc_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/proportional/raw_card_hc_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/raw_card_hc_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/raw_card_hc_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/raw_card_hc_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/proportional/HC
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/proportional/HC/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/HC/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/HC/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/HC/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/proportional/raw_schz_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/proportional/raw_schz_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/raw_schz_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/raw_schz_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/raw_schz_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/proportional/raw_test
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/proportional/raw_test/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/raw_test/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/raw_test/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/raw_test/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/proportional/hc_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/proportional/hc_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/hc_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/hc_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/hc_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/proportional/test_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/proportional/test_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/test_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/test_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/test_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/proportional/raw_hc_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/proportional/raw_hc_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/raw_hc_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/raw_hc_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/raw_hc_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/proportional/raw_HC
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/proportional/raw_HC/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/raw_HC/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/raw_HC/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/raw_HC/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/proportional/test
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/proportional/test/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/test/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/test/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/test/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/proportional/schz_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/proportional/schz_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/schz_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/schz_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/proportional/schz_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/card_hc
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/card_hc/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/card_hc/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/card_hc/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/card_hc/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/reduced_ranks
--------------------------------------------------

📁 numpy_matrixes/ranks_matrix/reduced_ranks/card_test_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/reduced_ranks/card_test_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/card_test_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/card_test_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/card_test_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/reduced_ranks/raw_card_test_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_card_test_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_card_test_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_card_test_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_card_test_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/reduced_ranks/raw_test_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_test_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_test_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_test_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_test_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/reduced_ranks/card_hc_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/reduced_ranks/card_hc_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/card_hc_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/card_hc_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/card_hc_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/reduced_ranks/raw_card_hc_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_card_hc_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_card_hc_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_card_hc_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_card_hc_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/reduced_ranks/HC
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/reduced_ranks/HC/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/HC/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/HC/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/HC/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/reduced_ranks/raw_schz_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_schz_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_schz_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_schz_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_schz_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/reduced_ranks/raw_test
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_test/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_test/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_test/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_test/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/reduced_ranks/hc_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/reduced_ranks/hc_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/hc_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/hc_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/hc_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/reduced_ranks/test_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/reduced_ranks/test_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/test_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/test_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/test_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/reduced_ranks/raw_hc_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_hc_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_hc_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_hc_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_hc_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/reduced_ranks/raw_HC
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_HC/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_HC/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_HC/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/raw_HC/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/reduced_ranks/test
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/reduced_ranks/test/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/test/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/test/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/test/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/reduced_ranks/schz_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/reduced_ranks/schz_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/schz_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/schz_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/reduced_ranks/schz_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/HC
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/HC/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/HC/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/HC/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/HC/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/raw_schz_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/raw_schz_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/raw_schz_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/raw_schz_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/raw_schz_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/raw_test
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/raw_test/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/raw_test/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/raw_test/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/raw_test/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/hc_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/hc_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/hc_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/hc_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/hc_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/test_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/test_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/test_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/test_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/test_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/raw_hc_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/raw_hc_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/raw_hc_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/raw_hc_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/raw_hc_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/raw_HC
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/raw_HC/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/raw_HC/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/raw_HC/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/raw_HC/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/test
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/test/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/test/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/test/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/test/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/schz_data
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/schz_data/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/schz_data/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/schz_data/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/schz_data/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/prizes
--------------------------------------------------

📁 numpy_matrixes/ranks_matrix/prizes/HC
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/prizes/HC/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/prizes/HC/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/prizes/HC/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/prizes/HC/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/prizes/raw_test
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/prizes/raw_test/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/prizes/raw_test/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/prizes/raw_test/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/prizes/raw_test/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/prizes/raw_HC
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/prizes/raw_HC/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/prizes/raw_HC/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/prizes/raw_HC/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/prizes/raw_HC/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 numpy_matrixes/ranks_matrix/prizes/test
--------------------------------------------------

📄 numpy_matrixes/ranks_matrix/prizes/test/auc.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/prizes/test/min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/prizes/test/max_min.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📄 numpy_matrixes/ranks_matrix/prizes/test/max.npy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x93 in position 0: invalid start byte]

==================================================

📁 notebooks
--------------------------------------------------

📄 notebooks/card_test.ipynb
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.svm import SVC\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.metrics import recall_score, classification_report\n",
    "from sklearn.model_selection import GroupShuffleSplit\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.model_selection import GroupShuffleSplit\n",
    "import numpy as np\n",
    "from fmri_processing.utils import draw_heat_map\n",
    "from fmri_processing.functions import funcs\n",
    "import os\n",
    "from fmri_processing import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n",
    "from sklearn.svm import SVC\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.model_selection import LeaveOneGroupOut, GroupKFold, GridSearchCV\n",
    "from sklearn.metrics import recall_score\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from imblearn.pipeline import Pipeline as ImbPipeline\n",
    "from sklearn.metrics import make_scorer, recall_score\n",
    "\n",
    "def train_best_model_by_recall(train_matrix, target_class=1, random_state=42, verbose=True):\n",
    "    \"\"\"\n",
    "    Обучает модели с оптимизацией параметров и возвращает ансамбль моделей\n",
    "    \n",
    "    Изменения:\n",
    "    - Добавлена оптимизация гиперпараметров\n",
    "    - Включено ансамблирование\n",
    "    - Добавлена балансировка классов\n",
    "    - Улучшена обработка групп\n",
    "    \"\"\"\n",
    "    \n",
    "    # 1. Загрузка данных и подготовка\n",
    "    matrix = np.load(train_matrix)\n",
    "    N = matrix.shape[0]\n",
    "    sub_num = N // 5\n",
    "\n",
    "    labels = np.zeros(N, dtype=int)\n",
    "    labels[3::5] = 1\n",
    "    \n",
    "    X = matrix\n",
    "    y = labels\n",
    "    groups = np.repeat(np.arange(sub_num), 5)\n",
    "\n",
    "    # 2. Определение пайплайнов с балансировкой\n",
    "    def create_pipeline(model):\n",
    "        return ImbPipeline([\n",
    "            ('scaler', StandardScaler()),\n",
    "            ('smote', SMOTE(random_state=random_state)),\n",
    "            ('model', model)\n",
    "        ])\n",
    "\n",
    "    # 3. Инициализация моделей с параметрами для оптимизации\n",
    "    models = {\n",
    "        \"Logistic Regression\": {\n",
    "            'pipeline': create_pipeline(LogisticRegression(max_iter=1000)),\n",
    "            'params': {\n",
    "                'model__C': [0.1, 1, 10],\n",
    "                'model__class_weight': ['balanced', None],\n",
    "                'model__solver': ['lbfgs', 'saga']\n",
    "            }\n",
    "        },\n",
    "        \"Random Forest\": {\n",
    "            'pipeline': create_pipeline(RandomForestClassifier()),\n",
    "            'params': {\n",
    "                'model__n_estimators': [100, 200],\n",
    "                'model__max_depth': [None, 10],\n",
    "                'model__class_weight': ['balanced_subsample', None]\n",
    "            }\n",
    "        },\n",
    "        \"SVM\": {\n",
    "            'pipeline': create_pipeline(SVC(probability=True)),\n",
    "            'params': {\n",
    "                'model__C': [0.1, 1, 10],\n",
    "                'model__kernel': ['rbf', 'linear'],\n",
    "                'model__class_weight': ['balanced', None]\n",
    "            }\n",
    "        },\n",
    "        \"XGBoost\": {\n",
    "            'pipeline': create_pipeline(XGBClassifier(eval_metric='logloss')),\n",
    "            'params': {\n",
    "                'model__scale_pos_weight': [1, (len(y) - sum(y)) / sum(y)],\n",
    "                'model__max_depth': [3, 5],\n",
    "                'model__learning_rate': [0.1, 0.01]\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "\n",
    "    # 4. Оптимизация гиперпараметров с групповой валидацией\n",
    "    optimized_models = {}\n",
    "    recall_scorer = make_scorer(recall_score, pos_label=target_class)\n",
    "    \n",
    "    for name, config in models.items():\n",
    "        gs = GridSearchCV(\n",
    "            estimator=config['pipeline'],\n",
    "            param_grid=config['params'],\n",
    "            cv=GroupKFold(n_splits=5),\n",
    "            scoring=recall_scorer,\n",
    "            n_jobs=-1,\n",
    "            verbose=0\n",
    "        )\n",
    "        gs.fit(X, y, groups=groups)\n",
    "        optimized_models[name] = gs.best_estimator_\n",
    "        \n",
    "        if verbose:\n",
    "            print(f\"{name} - лучшие параметры: {gs.best_params_}\")\n",
    "            print(f\"Recall (CV): {gs.best_score_:.3f}\\n\")\n",
    "\n",
    "    # 5. Создание ансамбля\n",
    "    ensemble = VotingClassifier(\n",
    "        estimators=[(name, model) for name, model in optimized_models.items()],\n",
    "        voting='soft',\n",
    "        n_jobs=-1\n",
    "    )\n",
    "    \n",
    "    # 6. Обучение ансамбля с групповой валидацией\n",
    "    logo = LeaveOneGroupOut()\n",
    "    recall_scores = []\n",
    "    \n",
    "    for train_idx, val_idx in logo.split(X, y, groups=groups):\n",
    "        ensemble.fit(X[train_idx], y[train_idx])\n",
    "        y_pred = ensemble.predict(X[val_idx])\n",
    "        recall = recall_score(y[val_idx], y_pred, pos_label=target_class)\n",
    "        recall_scores.append(recall)\n",
    "    \n",
    "    if verbose:\n",
    "        print(f\"Ансамбль - Recall: {np.mean(recall_scores):.3f} ± {np.std(recall_scores):.3f}\")\n",
    "    \n",
    "    # 7. Финальное обучение на всех данных\n",
    "    final_models = {**optimized_models, 'Ensemble': ensemble.fit(X, y)}\n",
    "    \n",
    "    return final_models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_and_predict_on_test(train_matrix, test_matrix):\n",
    "    models = train_best_model_by_recall(train_matrix)\n",
    "    for name, model in models.items():\n",
    "        print(f'Model: {name}')\n",
    "        matrix_test = np.load(test_matrix)\n",
    "        N_test = matrix_test.shape[0]  # Длина массива\n",
    "        sub_num_test = N_test // 5\n",
    "\n",
    "        labels_test = np.zeros(N_test, dtype=int)  # Создаем массив из нулей\n",
    "        labels_test[3::5] = 1  # Каждый 4-й элемен\n",
    "        print(model.predict(matrix_test))\n",
    "        print(classification_report(labels_test, model.predict(matrix_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_different_params(train_matrix_base, test_matrix_base):\n",
    "    for func_name in funcs.keys():\n",
    "        if func_name in ('max_min', 'min'):\n",
    "            continue\n",
    "        train_matrix = os.path.join(train_matrix_base, func_name + '.npy')\n",
    "        test_matrix = os.path.join(test_matrix_base, func_name + '.npy')\n",
    "        print('-'*10 + func_name + '-'*10)\n",
    "        train_and_predict_on_test(train_matrix, test_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "base_dir = '/home/aaanpilov/diploma/project'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "matrix = np.load(os.path.join(base_dir, 'numpy_data/card_hc_data/1136_DOROSHENKO_N_I__1136.npy'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[2025-05-15 22:41:42,147][INFO][DataLoader] Loading preprocessed data from: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1136_DOROSHENKO_N_I__1136.npy\n",
      "[2025-05-15 22:41:42,149][INFO][DataLoader] Parsing time-file: /home/aaanpilov/diploma/project/data/card_hc_data/1136_DOROSHENKO_N_I__1136/Дороенко карта.txt\n",
      "[2025-05-15 22:41:42,152][INFO][DataLoader] Loading preprocessed data from: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1146_KRYLOV_V_O__1146.npy\n",
      "[2025-05-15 22:41:42,155][INFO][DataLoader] Parsing time-file: /home/aaanpilov/diploma/project/data/card_hc_data/1146_KRYLOV_V_O__1146/Крылов карта.txt\n",
      "[2025-05-15 22:41:42,158][INFO][DataLoader] Loading preprocessed data from: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1152_BAKAEV_A_T__1152.npy\n",
      "[2025-05-15 22:41:42,162][INFO][DataLoader] Parsing time-file: /home/aaanpilov/diploma/project/data/card_hc_data/1152_BAKAEV_A_T__1152/Бакаев карта.txt\n",
      "[2025-05-15 22:41:42,167][INFO][DataLoader] Loading preprocessed data from: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1153_ZYZYKIN_A_P__1153.npy\n",
      "[2025-05-15 22:41:42,169][INFO][DataLoader] Parsing time-file: /home/aaanpilov/diploma/project/data/card_hc_data/1153_ZYZYKIN_A_P__1153/ЗызыкинА карта.txt\n",
      "[2025-05-15 22:41:42,172][INFO][DataLoader] Loading preprocessed data from: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1168_NESTER_A_O__1168.npy\n",
      "[2025-05-15 22:41:42,174][INFO][DataLoader] Parsing time-file: /home/aaanpilov/diploma/project/data/card_hc_data/1168_NESTER_A_O__1168/Нестер карта.txt\n",
      "[2025-05-15 22:41:42,176][INFO][DataLoader] Loading preprocessed data from: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1224_BALAKIN_K_A__1224.npy\n",
      "[2025-05-15 22:41:42,179][INFO][DataLoader] Parsing time-file: /home/aaanpilov/diploma/project/data/card_hc_data/1224_BALAKIN_K_A__1224/Балакин карта нет.txt\n",
      "[2025-05-15 22:41:42,184][INFO][DataLoader] Loading preprocessed data from: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1329_Lisitsin_I_S.npy\n",
      "[2025-05-15 22:41:42,187][INFO][DataLoader] Parsing time-file: /home/aaanpilov/diploma/project/data/card_hc_data/1329_Lisitsin_I_S/1329 Лисицин карта нет + счёт.txt\n",
      "[2025-05-15 22:41:42,190][INFO][DataLoader] Loading preprocessed data from: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1339_Berdikov_P_G.npy\n",
      "[2025-05-15 22:41:42,192][INFO][DataLoader] Parsing time-file: /home/aaanpilov/diploma/project/data/card_hc_data/1339_Berdikov_P_G/1339 Бердиков карта + счёт.txt\n",
      "[2025-05-15 22:41:42,196][INFO][DataLoader] Loading preprocessed data from: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1342_Mozgovoi_V_V.npy\n",
      "[2025-05-15 22:41:42,198][INFO][DataLoader] Parsing time-file: /home/aaanpilov/diploma/project/data/card_hc_data/1342_Mozgovoi_V_V/1342 Мозговой карта нет + счёт.txt\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[2025-05-15 22:41:42,202][INFO][DataLoader] Loading preprocessed data from: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1350_Matveev_M_I.npy\n",
      "[2025-05-15 22:41:42,205][INFO][DataLoader] Parsing time-file: /home/aaanpilov/diploma/project/data/card_hc_data/1350_Matveev_M_I/1350 Матвеев карта нет + счёт.txt\n",
      "[2025-05-15 22:41:42,209][INFO][DataLoader] Loading preprocessed data from: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1351_Kruglov_V_A.npy\n",
      "[2025-05-15 22:41:42,212][INFO][DataLoader] Parsing time-file: /home/aaanpilov/diploma/project/data/card_hc_data/1351_Kruglov_V_A/1351 Круглов карта нет + счёт.txt\n",
      "[2025-05-15 22:41:42,215][INFO][DataLoader] Loading preprocessed data from: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1352_Zemkin_V_A.npy\n",
      "[2025-05-15 22:41:42,217][INFO][DataLoader] Parsing time-file: /home/aaanpilov/diploma/project/data/card_hc_data/1352_Zemkin_V_A/1352 Земкин карта нет + счёт.txt\n",
      "[2025-05-15 22:41:42,222][INFO][DataLoader] Loading preprocessed data from: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1357_Kozhanov_K_D.npy\n",
      "[2025-05-15 22:41:42,224][INFO][DataLoader] Parsing time-file: /home/aaanpilov/diploma/project/data/card_hc_data/1357_Kozhanov_K_D/1357 Кожанов карта + счёт.txt\n",
      "[2025-05-15 22:41:42,228][INFO][DataLoader] Loading preprocessed data from: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1364_Nabiev_T_R.npy\n",
      "[2025-05-15 22:41:42,230][INFO][DataLoader] Parsing time-file: /home/aaanpilov/diploma/project/data/card_hc_data/1364_Nabiev_T_R/1364 Набиев карта + счёт.txt\n",
      "[2025-05-15 22:41:42,233][INFO][DataLoader] Loading preprocessed data from: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1365_Dolgikh_S_V.npy\n",
      "[2025-05-15 22:41:42,235][INFO][DataLoader] Parsing time-file: /home/aaanpilov/diploma/project/data/card_hc_data/1365_Dolgikh_S_V/1365 Долгих карта.txt\n",
      "[2025-05-15 22:41:42,240][INFO][DataLoader] Loading preprocessed data from: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1366_Dyatlov_G_I.npy\n",
      "[2025-05-15 22:41:42,242][INFO][DataLoader] Parsing time-file: /home/aaanpilov/diploma/project/data/card_hc_data/1366_Dyatlov_G_I/1366 Дятлов карта нет + счёт.txt\n",
      "[2025-05-15 22:41:42,246][INFO][DataLoader] Loading preprocessed data from: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1373_Russak_D_A.npy\n",
      "[2025-05-15 22:41:42,249][INFO][DataLoader] Parsing time-file: /home/aaanpilov/diploma/project/data/card_hc_data/1373_Russak_D_A/1373 Руссак карта нет + счёт.txt\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "622.0\n",
      "(653, 132)\n",
      "634.28\n",
      "(689, 132)\n",
      "611.2\n",
      "(630, 132)\n",
      "653.28\n",
      "(673, 132)\n",
      "609.96\n",
      "(634, 132)\n",
      "693.38\n",
      "(710, 132)\n",
      "566.62\n",
      "(523, 132)\n",
      "591.8\n",
      "(546, 132)\n",
      "559.9\n",
      "(517, 132)\n",
      "549.06\n",
      "(506, 132)\n",
      "574.58\n",
      "(530, 132)\n",
      "571.96\n",
      "(528, 132)\n",
      "560.4\n",
      "(517, 132)\n",
      "549.9\n",
      "(506, 132)\n",
      "572.74\n",
      "(526, 132)\n",
      "590.1\n",
      "(542, 132)\n",
      "637.56\n",
      "(589, 132)\n"
     ]
    }
   ],
   "source": [
    "config_path = os.path.join(base_dir, 'configs/card_hc_data.yaml')\n",
    "\n",
    "subjects = process_config(config_path)\n",
    "data_loader = DataLoader()\n",
    "\n",
    "for subject in subjects:\n",
    "    data = data_loader.load_from_npy(subject['numpy_path'])\n",
    "    # Получаем и обрабатываем данные\n",
    "    events = data_loader.load_events(subject['events_path'])\n",
    "    print(events['onset'].iloc[-1])\n",
    "\n",
    "    print(np.load(subject['numpy_path']).shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "def draw_all_subjects(matrix):\n",
    "    N = matrix.shape[0]  # Длина массива\n",
    "    sub_num = N // 5\n",
    "\n",
    "    subjects = np.array_split(matrix, sub_num)\n",
    "    for idx, sub in enumerate(subjects):\n",
    "        print(f'sub-{idx:02d}')\n",
    "        draw_heat_map(subjects[idx])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "card_average_stimulus = os.path.join(base_dir, 'numpy_matrixes/average_stimulus/card_hc_data/max.npy')\n",
    "card_ranks = os.path.join(base_dir, 'numpy_matrixes/ranks_matrix/raw_card_hc_data/max.npy')\n",
    "\n",
    "train_average_stimulus = os.path.join(base_dir, 'numpy_matrixes/average_stimulus/hc_data/max.npy')\n",
    "train_ranks = os.path.join(base_dir, 'numpy_matrixes/ranks_matrix/hc_data/auc.npy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------auc----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression - лучшие параметры: {'model__C': 10, 'model__class_weight': 'balanced', 'model__solver': 'saga'}\n",
      "Recall (CV): 0.667\n",
      "\n",
      "Random Forest - лучшие параметры: {'model__class_weight': None, 'model__max_depth': None, 'model__n_estimators': 100}\n",
      "Recall (CV): 0.633\n",
      "\n",
      "SVM - лучшие параметры: {'model__C': 0.1, 'model__class_weight': 'balanced', 'model__kernel': 'rbf'}\n",
      "Recall (CV): 0.617\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XGBoost - лучшие параметры: {'model__learning_rate': 0.01, 'model__max_depth': 3, 'model__scale_pos_weight': 4.0}\n",
      "Recall (CV): 0.733\n",
      "\n",
      "Ансамбль - Recall: 0.588 ± 0.492\n",
      "Model: Logistic Regression\n",
      "[0 1 0 1 0 1 0 0 0 0 1 1 0 1 0 0 0 1 0 0 0 0 0 1 1 0 0 0 1 1 0 1 0 0 1 0 1\n",
      " 0 0 1 0 0 0 0 1 0 0 1 1 0 1 0 1 1 0 0 1 0 0 0 1 1 0 1 0 1 0 1 1 0 1 1 0 0\n",
      " 0 0 0 1 0 0 1 1 0 1 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.63      0.72        68\n",
      "           1       0.26      0.53      0.35        17\n",
      "\n",
      "    accuracy                           0.61        85\n",
      "   macro avg       0.55      0.58      0.54        85\n",
      "weighted avg       0.73      0.61      0.65        85\n",
      "\n",
      "Model: Random Forest\n",
      "[0 0 0 1 0 0 0 1 1 1 1 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 1 0 0\n",
      " 0 0 1 0 1 0 0 1 0 0 1 1 1 1 0 1 1 0 0 1 0 0 1 1 1 0 1 0 1 0 1 0 0 1 1 0 0\n",
      " 0 0 1 1 0 0 1 0 0 1 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      0.59      0.68        68\n",
      "           1       0.20      0.41      0.27        17\n",
      "\n",
      "    accuracy                           0.55        85\n",
      "   macro avg       0.50      0.50      0.47        85\n",
      "weighted avg       0.68      0.55      0.60        85\n",
      "\n",
      "Model: SVM\n",
      "[0 0 1 1 0 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\n",
      " 0 1 0 0 1 0 0 0 0 0 0 1 1 1 0 0 1 0 0 0 0 0 1 1 1 0 1 0 1 0 1 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 1 0 0 1 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.79      0.82        68\n",
      "           1       0.33      0.41      0.37        17\n",
      "\n",
      "    accuracy                           0.72        85\n",
      "   macro avg       0.59      0.60      0.59        85\n",
      "weighted avg       0.74      0.72      0.73        85\n",
      "\n",
      "Model: XGBoost\n",
      "[0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 0 0 0 1 1 1 1 1 1 0 0 1 1 0 1 1 1\n",
      " 1 1 1 0 1 0 1 1 0 0 1 1 1 1 0 1 1 1 0 1 0 0 1 1 1 0 1 0 1 0 1 0 1 1 1 0 1\n",
      " 0 0 1 1 0 1 1 1 0 1 1]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.34      0.48        68\n",
      "           1       0.21      0.71      0.32        17\n",
      "\n",
      "    accuracy                           0.41        85\n",
      "   macro avg       0.52      0.52      0.40        85\n",
      "weighted avg       0.70      0.41      0.45        85\n",
      "\n",
      "Model: Ensemble\n",
      "[0 1 0 1 0 1 0 1 0 1 1 1 0 1 0 0 1 1 0 0 0 0 0 1 1 0 1 0 1 0 0 1 0 0 1 0 1\n",
      " 0 1 1 0 1 0 0 1 0 0 1 1 1 1 0 1 1 0 0 1 0 0 1 1 1 0 1 0 1 0 1 0 0 1 1 0 0\n",
      " 0 0 0 1 0 0 1 1 0 1 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.54      0.65        68\n",
      "           1       0.23      0.53      0.32        17\n",
      "\n",
      "    accuracy                           0.54        85\n",
      "   macro avg       0.52      0.54      0.49        85\n",
      "weighted avg       0.70      0.54      0.59        85\n",
      "\n",
      "----------max----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression - лучшие параметры: {'model__C': 0.1, 'model__class_weight': 'balanced', 'model__solver': 'lbfgs'}\n",
      "Recall (CV): 0.683\n",
      "\n",
      "Random Forest - лучшие параметры: {'model__class_weight': 'balanced_subsample', 'model__max_depth': 10, 'model__n_estimators': 200}\n",
      "Recall (CV): 0.700\n",
      "\n",
      "SVM - лучшие параметры: {'model__C': 10, 'model__class_weight': 'balanced', 'model__kernel': 'rbf'}\n",
      "Recall (CV): 0.633\n",
      "\n",
      "XGBoost - лучшие параметры: {'model__learning_rate': 0.1, 'model__max_depth': 3, 'model__scale_pos_weight': 4.0}\n",
      "Recall (CV): 0.800\n",
      "\n",
      "Ансамбль - Recall: 0.647 ± 0.478\n",
      "Model: Logistic Regression\n",
      "[0 1 0 1 0 0 0 0 1 1 0 1 0 0 1 0 0 1 0 0 0 0 0 1 1 1 1 0 0 1 0 1 0 0 1 1 0\n",
      " 0 1 1 0 1 0 1 1 1 0 0 1 1 1 0 1 1 0 1 1 0 0 0 1 0 0 1 0 0 0 1 0 1 1 1 0 0\n",
      " 0 0 0 1 0 0 1 0 0 1 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      0.59      0.69        68\n",
      "           1       0.24      0.53      0.33        17\n",
      "\n",
      "    accuracy                           0.58        85\n",
      "   macro avg       0.54      0.56      0.51        85\n",
      "weighted avg       0.72      0.58      0.62        85\n",
      "\n",
      "Model: Random Forest\n",
      "[0 1 0 1 0 1 1 1 1 1 1 1 0 0 1 0 1 1 0 0 0 0 0 1 1 1 1 0 0 0 0 1 0 0 1 1 0\n",
      " 0 1 1 0 1 0 1 1 0 0 1 1 1 1 0 1 1 0 1 1 0 0 0 1 1 0 1 0 1 0 1 0 1 1 1 0 1\n",
      " 0 0 1 1 0 1 1 1 0 1 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.46      0.58        68\n",
      "           1       0.21      0.59      0.31        17\n",
      "\n",
      "    accuracy                           0.48        85\n",
      "   macro avg       0.51      0.52      0.45        85\n",
      "weighted avg       0.70      0.48      0.53        85\n",
      "\n",
      "Model: SVM\n",
      "[0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 0 0 1 0 0\n",
      " 0 0 0 0 1 0 1 0 1 0 0 1 1 0 0 1 1 0 1 0 0 0 0 1 1 0 1 0 1 0 1 0 0 0 1 0 0\n",
      " 0 0 1 1 0 0 1 0 0 1 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.81      0.71      0.76        68\n",
      "           1       0.23      0.35      0.28        17\n",
      "\n",
      "    accuracy                           0.64        85\n",
      "   macro avg       0.52      0.53      0.52        85\n",
      "weighted avg       0.70      0.64      0.66        85\n",
      "\n",
      "Model: XGBoost\n",
      "[0 1 0 1 0 1 1 0 0 1 1 1 0 0 0 0 1 1 0 0 0 1 0 1 1 1 1 1 0 0 0 1 1 0 1 1 0\n",
      " 0 1 1 0 1 0 1 1 0 0 1 1 1 0 1 1 1 1 1 1 1 0 0 1 1 0 1 0 1 0 1 0 1 1 1 0 1\n",
      " 0 0 1 1 1 0 1 0 0 1 1]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.81      0.43      0.56        68\n",
      "           1       0.20      0.59      0.30        17\n",
      "\n",
      "    accuracy                           0.46        85\n",
      "   macro avg       0.50      0.51      0.43        85\n",
      "weighted avg       0.69      0.46      0.51        85\n",
      "\n",
      "Model: Ensemble\n",
      "[0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 0 0 0 1 0 0 1 1 0\n",
      " 0 1 1 0 1 0 1 1 0 0 1 1 1 0 0 1 1 0 1 1 0 0 0 1 1 0 1 0 1 0 1 0 1 1 1 0 0\n",
      " 0 0 1 1 0 0 1 0 0 1 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.81      0.57      0.67        68\n",
      "           1       0.22      0.47      0.30        17\n",
      "\n",
      "    accuracy                           0.55        85\n",
      "   macro avg       0.51      0.52      0.48        85\n",
      "weighted avg       0.69      0.55      0.60        85\n",
      "\n"
     ]
    }
   ],
   "source": [
    "train_different_params(os.path.join(base_dir, 'numpy_matrixes/ranks_matrix/raw_hc_data'), os.path.join(base_dir, 'numpy_matrixes/ranks_matrix/raw_card_hc_data'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'draw_all_subjects' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[1], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mdraw_all_subjects\u001b[49m(np\u001b[38;5;241m.\u001b[39mload(test_ranks))\n",
      "\u001b[0;31mNameError\u001b[0m: name 'draw_all_subjects' is not defined"
     ]
    }
   ],
   "source": [
    "draw_all_subjects(np.load(test_ranks))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

==================================================

📄 notebooks/esembling.ipynb
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.svm import NuSVC\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier, StackingClassifier\n",
    "from sklearn.svm import SVC\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.model_selection import LeaveOneGroupOut, StratifiedGroupKFold, GridSearchCV\n",
    "from sklearn.metrics import recall_score, make_scorer\n",
    "from imblearn.over_sampling import ADASYN\n",
    "from imblearn.pipeline import Pipeline as ImbPipeline\n",
    "from sklearn.feature_selection import SelectFromModel, RFE\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.metrics import balanced_accuracy_score, make_scorer\n",
    "from sklearn.metrics import fbeta_score, make_scorer\n",
    "from fmri_processing import *\n",
    "\n",
    "def train_best_model_by_recall(train_matrix, target_class=1, random_state=42, verbose=True):\n",
    "    # 1. Загрузка данных\n",
    "    matrix = np.load(train_matrix)\n",
    "    X = matrix\n",
    "    \n",
    "    # Создание меток (4-й ответ в каждом блоке из 5 - ложный)\n",
    "    labels = np.zeros(X.shape[0], dtype=int)\n",
    "    labels[3::5] = 1  \n",
    "    \n",
    "    # Группы для валидации (по испытуемым)\n",
    "    groups = np.repeat(np.arange(X.shape[0] // 5), 5)\n",
    "\n",
    "    # 2. Пайплайн с ADASYN\n",
    "    def create_pipeline(model):\n",
    "        return ImbPipeline([\n",
    "            ('scaler', StandardScaler()),\n",
    "            ('adasyn', ADASYN(random_state=random_state)),  # <-- Изменено здесь\n",
    "            ('feature_selector', 'passthrough'),\n",
    "            ('model', model)\n",
    "        ])\n",
    "\n",
    "    # 3. Модели и параметры (без изменений)\n",
    "    models = {\n",
    "        \"Logistic Regression\": {\n",
    "            'pipeline': create_pipeline(LogisticRegression(max_iter=1000)),\n",
    "            'params': {\n",
    "                'feature_selector': [\n",
    "                    SelectFromModel(LogisticRegression(penalty='l1', solver='saga', random_state=random_state)),\n",
    "                    PCA(n_components=0.95)\n",
    "                ],\n",
    "                'model__C': [0.1, 1, 10, 100],\n",
    "                'model__class_weight': ['balanced', None],\n",
    "                'model__solver': ['lbfgs', 'saga', 'liblinear']\n",
    "            }\n",
    "        },\n",
    "        \"Random Forest\": {\n",
    "            'pipeline': create_pipeline(RandomForestClassifier()),\n",
    "            'params': {\n",
    "                'feature_selector': [\n",
    "                    SelectFromModel(RandomForestClassifier(random_state=random_state)),\n",
    "                    RFE(estimator=LogisticRegression(max_iter=1000), n_features_to_select=50)\n",
    "                ],\n",
    "                'model__n_estimators': [100, 200, 300],\n",
    "                'model__max_depth': [None, 10, 20],\n",
    "                'model__class_weight': ['balanced_subsample', None]\n",
    "            }\n",
    "        },\n",
    "        \"SVM\": {\n",
    "            'pipeline': create_pipeline(SVC(probability=True)),\n",
    "            'params': {\n",
    "                'feature_selector': [PCA(n_components=0.95)],\n",
    "                'model__C': [0.1, 1, 10],\n",
    "                'model__kernel': ['linear', 'rbf'],\n",
    "                'model__class_weight': ['balanced']\n",
    "            }\n",
    "        },\n",
    "        \"XGBoost\": {\n",
    "            'pipeline': create_pipeline(XGBClassifier()),\n",
    "            'params': {\n",
    "                'feature_selector': [SelectFromModel(XGBClassifier(random_state=random_state))],\n",
    "                'model__n_estimators': [100, 200],\n",
    "                'model__max_depth': [3, 5, 7],\n",
    "                'model__learning_rate': [0.01, 0.1, 0.2],\n",
    "                'model__subsample': [0.8, 1.0]\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "\n",
    "    # 4. Обучение с групповой валидацией (без изменений)\n",
    "    optimized_models = {}\n",
    "    # recall_scorer = make_scorer(recall_score, pos_label=target_class)\n",
    "    # balanced_acc_scorer = make_scorer(balanced_accuracy_score)\n",
    "    f2_scorer = make_scorer(fbeta_score, beta=2, pos_label=target_class)\n",
    "\n",
    "    for name, config in models.items():\n",
    "        cv_strategy = StratifiedGroupKFold(n_splits=5, shuffle=True, random_state=random_state)\n",
    "        gs = GridSearchCV(\n",
    "            estimator=config['pipeline'],\n",
    "            param_grid=config['params'],\n",
    "            cv=cv_strategy,\n",
    "            scoring=f2_scorer,\n",
    "            n_jobs=-1,\n",
    "            verbose=0\n",
    "        )\n",
    "        gs.fit(X, labels, groups=groups)\n",
    "        optimized_models[name] = gs.best_estimator_\n",
    "        \n",
    "        if verbose:\n",
    "            print(f\"{name} - Лучшие параметры: {gs.best_params_}\")\n",
    "            print(f\"Recall (CV): {gs.best_score_:.3f}\\n\")\n",
    "\n",
    "    # 6. Создание стекинг-ансамбля (без изменений)\n",
    "    ensemble = StackingClassifier(\n",
    "        estimators=[(name, model) for name, model in optimized_models.items()],\n",
    "        final_estimator=SVC(max_iter=1000, class_weight='balanced'),\n",
    "        stack_method='predict_proba',\n",
    "        n_jobs=-1\n",
    "    )\n",
    "    \n",
    "    # 7. Оценка ансамбля с ADASYN\n",
    "    logo = LeaveOneGroupOut()\n",
    "    # balanced_acc_scores = []\n",
    "    f2_scores = []\n",
    "    \n",
    "    for train_idx, val_idx in logo.split(X, labels, groups=groups):\n",
    "        X_train, X_val = X[train_idx], X[val_idx]\n",
    "        y_train, y_val = labels[train_idx], labels[val_idx]\n",
    "        \n",
    "        # Обучаем модель на оригинальных данных без балансировки\n",
    "        ensemble.fit(X_train, y_train)\n",
    "        y_pred = ensemble.predict(X_val)\n",
    "        \n",
    "        # Сохраняем метрики\n",
    "        f2_scores.append(balanced_accuracy_score(y_val, y_pred))\n",
    "    \n",
    "    if verbose:\n",
    "        print(f\"Ансамбль (ADASYN) - Recall: {np.mean(f2_scores):.3f} ± {np.std(f2_scores):.3f}\")\n",
    "    \n",
    "    return {'models': optimized_models, 'ensemble': ensemble.fit(X, labels)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.svm import NuSVC\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier, StackingClassifier, VotingClassifier, GradientBoostingClassifier, AdaBoostClassifier, ExtraTreesClassifier, HistGradientBoostingClassifier\n",
    "from sklearn.svm import SVC\n",
    "from xgboost import XGBClassifier\n",
    "from lightgbm import LGBMClassifier\n",
    "from catboost import CatBoostClassifier\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\n",
    "from sklearn.model_selection import LeaveOneGroupOut, StratifiedGroupKFold, GridSearchCV\n",
    "from sklearn.metrics import recall_score, make_scorer, balanced_accuracy_score, fbeta_score\n",
    "from imblearn.over_sampling import ADASYN\n",
    "from imblearn.pipeline import Pipeline as ImbPipeline\n",
    "from sklearn.feature_selection import SelectFromModel, RFE\n",
    "from sklearn.decomposition import PCA\n",
    "\n",
    "def train_best_model_by_recall(train_matrix, target_class=1, random_state=42, verbose=True):\n",
    "    # 1. Загрузка данных\n",
    "    matrix = np.load(train_matrix)\n",
    "    X = matrix\n",
    "    \n",
    "    # Создание меток (4-й ответ в каждом блоке из 5 - ложный)\n",
    "    labels = np.zeros(X.shape[0], dtype=int)\n",
    "    labels[3::5] = 1  \n",
    "    \n",
    "    # Группы для валидации (по испытуемым)\n",
    "    groups = np.repeat(np.arange(X.shape[0] // 5), 5)\n",
    "\n",
    "    # 2. Пайплайн с ADASYN\n",
    "    def create_pipeline(model):\n",
    "        return ImbPipeline([\n",
    "            ('scaler', StandardScaler()),\n",
    "            ('adasyn', ADASYN(random_state=random_state)),\n",
    "            ('feature_selector', 'passthrough'),\n",
    "            ('dim_reducer', 'passthrough'),\n",
    "            ('model', model)\n",
    "        ])\n",
    "\n",
    "    # 3. Расширенный список моделей с параметрами\n",
    "    models = {\n",
    "        \"Logistic Regression\": {\n",
    "            'pipeline': create_pipeline(LogisticRegression(max_iter=1000)),\n",
    "            'params': {\n",
    "                'feature_selector': [\n",
    "                    SelectFromModel(LogisticRegression(penalty='l1', solver='saga', random_state=random_state)),\n",
    "                    PCA(n_components=0.95)\n",
    "                ],\n",
    "                'dim_reducer': [None, PCA(n_components=50)],\n",
    "                'model__C': [0.1, 1, 10, 100],\n",
    "                'model__class_weight': ['balanced', None],\n",
    "                'model__solver': ['lbfgs', 'saga', 'liblinear']\n",
    "            }\n",
    "        },\n",
    "        \"Random Forest\": {\n",
    "            'pipeline': create_pipeline(RandomForestClassifier()),\n",
    "            'params': {\n",
    "                'feature_selector': [\n",
    "                    SelectFromModel(RandomForestClassifier(random_state=random_state)),\n",
    "                    RFE(estimator=LogisticRegression(max_iter=1000), n_features_to_select=50)\n",
    "                ],\n",
    "                'dim_reducer': [None, PCA(n_components=0.8)],\n",
    "                'model__n_estimators': [100, 200, 300],\n",
    "                'model__max_depth': [None, 10, 20],\n",
    "                'model__class_weight': ['balanced_subsample', None]\n",
    "            }\n",
    "        },\n",
    "        \"SVM\": {\n",
    "            'pipeline': create_pipeline(SVC(probability=True)),\n",
    "            'params': {\n",
    "                'feature_selector': [PCA(n_components=0.95)],\n",
    "                'dim_reducer': [None],\n",
    "                'model__C': [0.1, 1, 10],\n",
    "                'model__kernel': ['linear', 'rbf'],\n",
    "                'model__class_weight': ['balanced']\n",
    "            }\n",
    "        },\n",
    "        \"XGBoost\": {\n",
    "            'pipeline': create_pipeline(XGBClassifier()),\n",
    "            'params': {\n",
    "                'feature_selector': [SelectFromModel(XGBClassifier(random_state=random_state))],\n",
    "                'dim_reducer': [None],\n",
    "                'model__n_estimators': [100, 200],\n",
    "                'model__max_depth': [3, 5, 7],\n",
    "                'model__learning_rate': [0.01, 0.1, 0.2],\n",
    "                'model__subsample': [0.8, 1.0]\n",
    "            }\n",
    "        },\n",
    "        \"CatBoost\": {\n",
    "            'pipeline': create_pipeline(CatBoostClassifier(verbose=0)),\n",
    "            'params': {\n",
    "                'feature_selector': [None, SelectFromModel(CatBoostClassifier(verbose=0))],\n",
    "                'dim_reducer': [None],\n",
    "                'model__iterations': [100, 200],\n",
    "                'model__depth': [4, 6],\n",
    "                'model__learning_rate': [0.03, 0.1]\n",
    "            }\n",
    "        },\n",
    "        \"Neural Network\": {\n",
    "            'pipeline': create_pipeline(MLPClassifier()),\n",
    "            'params': {\n",
    "                'feature_selector': [PCA(n_components=0.95)],\n",
    "                'dim_reducer': [None],\n",
    "                'model__hidden_layer_sizes': [(100,), (50,50)],\n",
    "                'model__alpha': [0.0001, 0.001],\n",
    "                'model__learning_rate_init': [0.001, 0.01]\n",
    "            }\n",
    "        },\n",
    "        \"Gradient Boosting\": {\n",
    "            'pipeline': create_pipeline(GradientBoostingClassifier()),\n",
    "            'params': {\n",
    "                'feature_selector': [SelectFromModel(GradientBoostingClassifier())],\n",
    "                'dim_reducer': [None],\n",
    "                'model__n_estimators': [100, 200],\n",
    "                'model__learning_rate': [0.05, 0.1],\n",
    "                'model__max_depth': [3, 5]\n",
    "            }\n",
    "        },\n",
    "        \"k-NN\": {\n",
    "            'pipeline': create_pipeline(KNeighborsClassifier()),\n",
    "            'params': {\n",
    "                'feature_selector': [PCA(n_components=0.8)],\n",
    "                'dim_reducer': [None],\n",
    "                'model__n_neighbors': [3, 5, 7],\n",
    "                'model__weights': ['uniform', 'distance']\n",
    "            }\n",
    "        },\n",
    "        \"AdaBoost\": {\n",
    "            'pipeline': create_pipeline(AdaBoostClassifier()),\n",
    "            'params': {\n",
    "                'feature_selector': [None],\n",
    "                'dim_reducer': [None],\n",
    "                'model__n_estimators': [50, 100],\n",
    "                'model__learning_rate': [0.8, 1.0]\n",
    "            }\n",
    "        },\n",
    "        \"Hist Gradient Boosting\": {\n",
    "            'pipeline': create_pipeline(HistGradientBoostingClassifier()),\n",
    "            'params': {\n",
    "                'feature_selector': [None],\n",
    "                'model__learning_rate': [0.05, 0.1],\n",
    "                'model__max_iter': [100, 200],\n",
    "                'model__max_depth': [None, 10]\n",
    "            }\n",
    "        },\n",
    "        \"QDA\": {\n",
    "            'pipeline': create_pipeline(QuadraticDiscriminantAnalysis()),\n",
    "            'params': {\n",
    "                'feature_selector': [PCA(n_components=0.9)],\n",
    "                'model__reg_param': [0.0, 0.1, 0.5]\n",
    "            }\n",
    "        },\n",
    "        \"Extra Trees\": {\n",
    "            'pipeline': create_pipeline(ExtraTreesClassifier()),\n",
    "            'params': {\n",
    "                'feature_selector': [SelectFromModel(ExtraTreesClassifier())],\n",
    "                'model__n_estimators': [100, 200],\n",
    "                'model__max_depth': [None, 10],\n",
    "                'model__class_weight': ['balanced_subsample']\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "\n",
    "    # 4. Обучение с групповой валидацией\n",
    "    optimized_models = {}\n",
    "    grid_searches = {}\n",
    "    f2_scorer = make_scorer(fbeta_score, beta=2, pos_label=target_class)\n",
    "\n",
    "    for name, config in models.items():\n",
    "        cv_strategy = StratifiedGroupKFold(n_splits=5, shuffle=True, random_state=random_state)\n",
    "        gs = GridSearchCV(\n",
    "            estimator=config['pipeline'],\n",
    "            param_grid=config['params'],\n",
    "            cv=cv_strategy,\n",
    "            scoring=f2_scorer,\n",
    "            n_jobs=-1,\n",
    "            verbose=0\n",
    "        )\n",
    "        gs.fit(X, labels, groups=groups)\n",
    "        optimized_models[name] = gs.best_estimator_\n",
    "        grid_searches[name] = gs\n",
    "        \n",
    "        if verbose:\n",
    "            print(f\"{name} - Лучшие параметры: {gs.best_params_}\")\n",
    "            print(f\"F2-Score (CV): {gs.best_score_:.3f}\\n\")\n",
    "\n",
    "    # # 5. Визуализация\n",
    "    # if verbose:\n",
    "    #     for model_name, model in optimized_models.items():\n",
    "    #         try:\n",
    "    #             importances = model.named_steps['model'].feature_importances_\n",
    "    #             plt.figure(figsize=(12, 6))\n",
    "    #             plt.bar(range(len(importances)), importances)\n",
    "    #             plt.title(f\"Важность признаков ({model_name})\")\n",
    "    #             plt.xlabel(\"Номер региона мозга\")\n",
    "    #             plt.ylabel(\"Важность\")\n",
    "    #             plt.show()\n",
    "    #         except AttributeError:\n",
    "    #             if 'PCA' in model.named_steps:\n",
    "    #                 pca = model.named_steps['dim_reducer']\n",
    "    #                 plt.figure(figsize=(12, 6))\n",
    "    #                 plt.plot(np.cumsum(pca.explained_variance_ratio_))\n",
    "    #                 plt.title(f\"Накопленная дисперсия (PCA) - {model_name}\")\n",
    "    #                 plt.xlabel(\"Число компонент\")\n",
    "    #                 plt.ylabel(\"Дисперсия\")\n",
    "    #                 plt.grid(True)\n",
    "    #                 plt.show()\n",
    "\n",
    "    # 6. Создание ансамблей\n",
    "    # Стекинг\n",
    "    stacking_ensemble = StackingClassifier(\n",
    "        estimators=[(name, model) for name, model in optimized_models.items()],\n",
    "        final_estimator=LogisticRegression(class_weight='balanced'),\n",
    "        stack_method='auto',\n",
    "        passthrough=True,\n",
    "        n_jobs=-1\n",
    "    )\n",
    "    \n",
    "    # Взвешенное голосование\n",
    "    best_scores = {name: gs.best_score_ for name, gs in grid_searches.items()}\n",
    "    weights = np.array([best_scores[name] for name in optimized_models.keys()])\n",
    "    weights /= weights.sum()  # Нормализация весов\n",
    "\n",
    "    voting_ensemble = VotingClassifier(\n",
    "        estimators=[(name, model) for name, model in optimized_models.items()],\n",
    "        voting='soft',\n",
    "        weights=weights,\n",
    "        n_jobs=-1\n",
    "    )\n",
    "\n",
    "    # 7. Оценка ансамблей\n",
    "    logo = LeaveOneGroupOut()\n",
    "    stacking_scores = []\n",
    "    voting_scores = []\n",
    "    \n",
    "    for train_idx, val_idx in logo.split(X, labels, groups=groups):\n",
    "        X_train, X_val = X[train_idx], X[val_idx]\n",
    "        y_train, y_val = labels[train_idx], labels[val_idx]\n",
    "        \n",
    "        # Обучение и оценка стекинга\n",
    "        stacking_ensemble.fit(X_train, y_train)\n",
    "        stacking_pred = stacking_ensemble.predict(X_val)\n",
    "        stacking_scores.append(fbeta_score(y_val, stacking_pred, beta=2, pos_label=target_class))\n",
    "        \n",
    "        # Обучение и оценка голосования\n",
    "        voting_ensemble.fit(X_train, y_train)\n",
    "        voting_pred = voting_ensemble.predict(X_val)\n",
    "        voting_scores.append(fbeta_score(y_val, voting_pred, beta=2, pos_label=target_class))\n",
    "    \n",
    "    if verbose:\n",
    "        print(f\"Stacking Ensemble - F2-Score: {np.mean(stacking_scores):.3f} ± {np.std(stacking_scores):.3f}\")\n",
    "        print(f\"Voting Ensemble - F2-Score: {np.mean(voting_scores):.3f} ± {np.std(voting_scores):.3f}\")\n",
    "    \n",
    "    return {\n",
    "        'models': optimized_models,\n",
    "        'stacking_ensemble': stacking_ensemble.fit(X, labels),\n",
    "        'voting_ensemble': voting_ensemble.fit(X, labels)\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_and_predict_on_test(train_matrix, test_matrix):\n",
    "    models = train_best_model_by_recall(train_matrix)\n",
    "    # model = models['models']['SVM']\n",
    "    model = models['ensemble']\n",
    "    # model = models\n",
    "    matrix_test = np.load(test_matrix)\n",
    "    # evaluate_and_plot(test_matrix=test_matrix, trained_model=model)\n",
    "    \n",
    "    N_test = matrix_test.shape[0]  # Длина массива\n",
    "\n",
    "    labels_test = np.zeros(N_test, dtype=int)  # Создаем массив из нулей\n",
    "    labels_test[3::5] = 1  # Каждый 4-й элемен\n",
    "    print(model.predict(matrix_test))\n",
    "    print(classification_report(labels_test, model.predict(matrix_test)))\n",
    "    return\n",
    "\n",
    "def train_different_params(train_matrix_base, test_matrix_base):\n",
    "    for func_name in funcs.keys():\n",
    "        if func_name in ('max_min', 'min', 'auc'):\n",
    "            continue\n",
    "        train_matrix = os.path.join(train_matrix_base, func_name + '.npy')\n",
    "        test_matrix = os.path.join(test_matrix_base, func_name + '.npy')\n",
    "\n",
    "        train_and_predict_on_test(train_matrix, test_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import ConfusionMatrixDisplay, roc_curve, auc, classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.decomposition import PCA\n",
    "def evaluate_and_plot(test_matrix, trained_model, random_state=42):\n",
    "    # 1. Загрузка тестовых данных\n",
    "    X_test = np.load(test_matrix)\n",
    "    \n",
    "    # 2. Создание тестовых меток\n",
    "    labels_test = np.zeros(X_test.shape[0], dtype=int)\n",
    "    labels_test[3::5] = 1\n",
    "    \n",
    "    # 3. Получение предсказаний ансамбля\n",
    "    ensemble = trained_model['models']['SVM']\n",
    "    y_pred = ensemble.predict(X_test)\n",
    "    y_proba = ensemble.predict_proba(X_test)[:, 1]  # Вероятности для класса 1\n",
    "\n",
    "    # 4. Confusion Matrix\n",
    "    fig, ax = plt.subplots(1, 2, figsize=(15, 6))\n",
    "    \n",
    "    ConfusionMatrixDisplay.from_predictions(\n",
    "        labels_test, \n",
    "        y_pred,\n",
    "        display_labels=['Real', 'Fake'],\n",
    "        cmap='Blues',\n",
    "        ax=ax[0]\n",
    "    )\n",
    "    ax[0].set_title('Confusion Matrix')\n",
    "\n",
    "    # 5. ROC-кривая\n",
    "    fpr, tpr, _ = roc_curve(labels_test, y_proba)\n",
    "    roc_auc = auc(fpr, tpr)\n",
    "    \n",
    "    ax[1].plot(fpr, tpr, label=f'AUC = {roc_auc:.2f}')\n",
    "    ax[1].plot([0, 1], [0, 1], 'k--')\n",
    "    ax[1].set_xlabel('False Positive Rate')\n",
    "    ax[1].set_ylabel('True Positive Rate')\n",
    "    ax[1].set_title('ROC Curve')\n",
    "    ax[1].legend(loc='lower right')\n",
    "    \n",
    "    plt.show()\n",
    "\n",
    "    # 6. Визуализация в пространстве признаков (PCA)\n",
    "    pca = PCA(n_components=2, random_state=random_state)\n",
    "    X_pca = pca.fit_transform(X_test)\n",
    "    \n",
    "    plt.figure(figsize=(12, 8))\n",
    "    scatter = plt.scatter(\n",
    "        X_pca[:, 0], \n",
    "        X_pca[:, 1], \n",
    "        c=y_pred, \n",
    "        cmap='viridis',\n",
    "        alpha=0.6,\n",
    "        label='Predicted'\n",
    "    )\n",
    "    \n",
    "    # Отметим ошибочные предсказания\n",
    "    errors = y_pred != labels_test\n",
    "    plt.scatter(\n",
    "        X_pca[errors, 0], \n",
    "        X_pca[errors, 1], \n",
    "        edgecolors='red',\n",
    "        facecolors='none',\n",
    "        s=100,\n",
    "        label='Errors'\n",
    "    )\n",
    "    \n",
    "    plt.legend()\n",
    "    plt.title('PCA Projection with Predictions')\n",
    "    plt.xlabel('Principal Component 1')\n",
    "    plt.ylabel('Principal Component 2')\n",
    "    plt.show()\n",
    "\n",
    "    # 7. Отчет классификации\n",
    "    print(classification_report(labels_test, y_pred, target_names=['Real', 'Fake']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Просто баллы"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression - Лучшие параметры: {'feature_selector': SelectFromModel(estimator=LogisticRegression(penalty='l1', random_state=42,\n",
      "                                             solver='saga')), 'model__C': 1, 'model__class_weight': 'balanced', 'model__solver': 'liblinear'}\n",
      "Recall (CV): 0.728\n",
      "\n",
      "Random Forest - Лучшие параметры: {'feature_selector': RFE(estimator=LogisticRegression(max_iter=1000), n_features_to_select=50), 'model__class_weight': None, 'model__max_depth': 10, 'model__n_estimators': 100}\n",
      "Recall (CV): 0.622\n",
      "\n",
      "SVM - Лучшие параметры: {'feature_selector': PCA(n_components=0.95), 'model__C': 1, 'model__class_weight': 'balanced', 'model__kernel': 'rbf'}\n",
      "Recall (CV): 0.533\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XGBoost - Лучшие параметры: {'feature_selector': SelectFromModel(estimator=XGBClassifier(base_score=None, booster=None,\n",
      "                                        callbacks=None, colsample_bylevel=None,\n",
      "                                        colsample_bynode=None,\n",
      "                                        colsample_bytree=None, device=None,\n",
      "                                        early_stopping_rounds=None,\n",
      "                                        enable_categorical=False,\n",
      "                                        eval_metric=None, feature_types=None,\n",
      "                                        gamma=None, grow_policy=None,\n",
      "                                        importance_type=None,\n",
      "                                        interaction_constraints=None,\n",
      "                                        learning_rate=None, max_bin=None,\n",
      "                                        max_cat_threshold=None,\n",
      "                                        max_cat_to_onehot=None,\n",
      "                                        max_delta_step=None, max_depth=None,\n",
      "                                        max_leaves=None, min_child_weight=None,\n",
      "                                        missing=nan, monotone_constraints=None,\n",
      "                                        multi_strategy=None, n_estimators=None,\n",
      "                                        n_jobs=None, num_parallel_tree=None,\n",
      "                                        random_state=42, ...)), 'model__learning_rate': 0.01, 'model__max_depth': 3, 'model__n_estimators': 100, 'model__subsample': 1.0}\n",
      "Recall (CV): 0.517\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ансамбль (ADASYN) - Recall: 0.812 ± 0.211\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 0 1 1 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 1 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 0\n",
      " 1 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 1]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.79      0.81        56\n",
      "           1       0.33      0.43      0.38        14\n",
      "\n",
      "    accuracy                           0.71        70\n",
      "   macro avg       0.59      0.61      0.59        70\n",
      "weighted avg       0.74      0.71      0.73        70\n",
      "\n"
     ]
    }
   ],
   "source": [
    "ranks_train_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/raw_hc_data'\n",
    "ranks_test_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/raw_test_data'\n",
    "ranks_schz_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/raw_schz_data'\n",
    "ranks_card_hc_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/raw_card_hc_data'\n",
    "ranks_card_test_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/raw_card_test_data'\n",
    "# train - test\n",
    "# train_different_params(ranks_train_matrix, ranks_test_matrix)\n",
    "\n",
    "# test - train\n",
    "# train_different_params(ranks_test_matrix, ranks_train_matrix)\n",
    "\n",
    "# test - schz\n",
    "train_different_params(ranks_test_matrix, ranks_schz_matrix)\n",
    "\n",
    "# train - card\n",
    "# train_different_params(ranks_test_matrix, ranks_card_test_matrix)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Баллы 1-2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression - Лучшие параметры: {'feature_selector': SelectFromModel(estimator=LogisticRegression(penalty='l1', random_state=42,\n",
      "                                             solver='saga')), 'model__C': 1, 'model__class_weight': 'balanced', 'model__solver': 'liblinear'}\n",
      "Recall (CV): 0.618\n",
      "\n",
      "Random Forest - Лучшие параметры: {'feature_selector': SelectFromModel(estimator=RandomForestClassifier(random_state=42)), 'model__class_weight': None, 'model__max_depth': None, 'model__n_estimators': 200}\n",
      "Recall (CV): 0.620\n",
      "\n",
      "SVM - Лучшие параметры: {'feature_selector': PCA(n_components=0.95), 'model__C': 0.1, 'model__class_weight': 'balanced', 'model__kernel': 'linear'}\n",
      "Recall (CV): 0.582\n",
      "\n",
      "XGBoost - Лучшие параметры: {'feature_selector': SelectFromModel(estimator=XGBClassifier(base_score=None, booster=None,\n",
      "                                        callbacks=None, colsample_bylevel=None,\n",
      "                                        colsample_bynode=None,\n",
      "                                        colsample_bytree=None, device=None,\n",
      "                                        early_stopping_rounds=None,\n",
      "                                        enable_categorical=False,\n",
      "                                        eval_metric=None, feature_types=None,\n",
      "                                        gamma=None, grow_policy=None,\n",
      "                                        importance_type=None,\n",
      "                                        interaction_constraints=None,\n",
      "                                        learning_rate=None, max_bin=None,\n",
      "                                        max_cat_threshold=None,\n",
      "                                        max_cat_to_onehot=None,\n",
      "                                        max_delta_step=None, max_depth=None,\n",
      "                                        max_leaves=None, min_child_weight=None,\n",
      "                                        missing=nan, monotone_constraints=None,\n",
      "                                        multi_strategy=None, n_estimators=None,\n",
      "                                        n_jobs=None, num_parallel_tree=None,\n",
      "                                        random_state=42, ...)), 'model__learning_rate': 0.1, 'model__max_depth': 5, 'model__n_estimators': 200, 'model__subsample': 1.0}\n",
      "Recall (CV): 0.600\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ансамбль (ADASYN) - Recall: 0.721 ± 0.283\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 1 0 0 1 1 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0\n",
      " 1 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.80      0.81        56\n",
      "           1       0.27      0.29      0.28        14\n",
      "\n",
      "    accuracy                           0.70        70\n",
      "   macro avg       0.54      0.54      0.54        70\n",
      "weighted avg       0.71      0.70      0.70        70\n",
      "\n"
     ]
    }
   ],
   "source": [
    "reduced_train_matrix_base = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/reduced_ranks/raw_hc_data'\n",
    "reduced_test_matrix_base = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/reduced_ranks/raw_test_data'\n",
    "\n",
    "\n",
    "reduced_schz_matrix_base = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/reduced_ranks/raw_schz_data'\n",
    "\n",
    "reduced_cards_matrix_base = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/reduced_ranks/raw_card_hc_data'\n",
    "\n",
    "# train - test \n",
    "# train_different_params(reduced_train_matrix_base, reduced_test_matrix_base)\n",
    "\n",
    "# test - train\n",
    "# train_different_params(reduced_test_matrix_base, reduced_train_matrix_base)\n",
    "\n",
    "# test - schz\n",
    "train_different_params(reduced_train_matrix_base, reduced_schz_matrix_base)\n",
    "\n",
    "# train_different_params(reduced_train_matrix_base, reduced_schz_matrix_base)\n",
    "\n",
    "# train_different_params(reduced_train_matrix_base, reduced_cards_matrix_base)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Усреднение стимула"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression - Лучшие параметры: {'feature_selector': PCA(n_components=0.95), 'model__C': 0.1, 'model__class_weight': 'balanced', 'model__solver': 'liblinear'}\n",
      "Recall (CV): 0.804\n",
      "\n",
      "Random Forest - Лучшие параметры: {'feature_selector': SelectFromModel(estimator=RandomForestClassifier(random_state=42)), 'model__class_weight': 'balanced_subsample', 'model__max_depth': None, 'model__n_estimators': 200}\n",
      "Recall (CV): 0.489\n",
      "\n",
      "SVM - Лучшие параметры: {'feature_selector': PCA(n_components=0.95), 'model__C': 1, 'model__class_weight': 'balanced', 'model__kernel': 'rbf'}\n",
      "Recall (CV): 0.633\n",
      "\n",
      "XGBoost - Лучшие параметры: {'feature_selector': SelectFromModel(estimator=XGBClassifier(base_score=None, booster=None,\n",
      "                                        callbacks=None, colsample_bylevel=None,\n",
      "                                        colsample_bynode=None,\n",
      "                                        colsample_bytree=None, device=None,\n",
      "                                        early_stopping_rounds=None,\n",
      "                                        enable_categorical=False,\n",
      "                                        eval_metric=None, feature_types=None,\n",
      "                                        gamma=None, grow_policy=None,\n",
      "                                        importance_type=None,\n",
      "                                        interaction_constraints=None,\n",
      "                                        learning_rate=None, max_bin=None,\n",
      "                                        max_cat_threshold=None,\n",
      "                                        max_cat_to_onehot=None,\n",
      "                                        max_delta_step=None, max_depth=None,\n",
      "                                        max_leaves=None, min_child_weight=None,\n",
      "                                        missing=nan, monotone_constraints=None,\n",
      "                                        multi_strategy=None, n_estimators=None,\n",
      "                                        n_jobs=None, num_parallel_tree=None,\n",
      "                                        random_state=42, ...)), 'model__learning_rate': 0.2, 'model__max_depth': 3, 'model__n_estimators': 100, 'model__subsample': 0.8}\n",
      "Recall (CV): 0.376\n",
      "\n",
      "Ансамбль (ADASYN) - Recall: 0.762 ± 0.212\n",
      "[0 1 0 1 0 0 0 0 1 0 1 0 1 1 1 1 1 0 0 1 1 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0\n",
      " 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 1 0 0 1 0 1 0 0 0 1]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.71      0.78        56\n",
      "           1       0.30      0.50      0.38        14\n",
      "\n",
      "    accuracy                           0.67        70\n",
      "   macro avg       0.58      0.61      0.58        70\n",
      "weighted avg       0.74      0.67      0.70        70\n",
      "\n"
     ]
    }
   ],
   "source": [
    "train_matrix_base = '/home/aaanpilov/diploma/project/numpy_matrixes/average_stimulus/hc_data'\n",
    "test_matrix_base = '/home/aaanpilov/diploma/project/numpy_matrixes/average_stimulus/test_data'\n",
    "\n",
    "schz_matrix_base = '/home/aaanpilov/diploma/project/numpy_matrixes/average_stimulus/schz_data'\n",
    "card_train_matrix_base = '/home/aaanpilov/diploma/project/numpy_matrixes/average_stimulus/card_hc_data'\n",
    "card_test_matrix_base = '/home/aaanpilov/diploma/project/numpy_matrixes/average_stimulus/card_test_data'\n",
    "\n",
    "# train_different_params(train_matrix_base, card_train_matrix_base)\n",
    "# print('SCHZ'*20)\n",
    "\n",
    "# train - test\n",
    "# train_different_params(train_matrix_base, test_matrix_base)\n",
    "\n",
    "# test - train\n",
    "# train_different_params(test_matrix_base, train_matrix_base)\n",
    "\n",
    "# test - schz\n",
    "train_different_params(test_matrix_base, schz_matrix_base)\n",
    "\n",
    "# train_different_params(train_matrix_base, card_train_matrix_base)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def draw_all_subjects(matrix):\n",
    "    N = matrix.shape[0]  # Длина массива\n",
    "    sub_num = N // 5\n",
    "\n",
    "    subjects = np.array_split(matrix, sub_num)\n",
    "    for idx, sub in enumerate(subjects):\n",
    "        print(f'sub-{idx:02d}')\n",
    "        draw_heat_map(subjects[idx]\n",
    "                      )"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

==================================================

📄 notebooks/plot_ranks_matrixes.ipynb
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from fmri_processing.utils import draw_heat_map"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "auc_train_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/HC/auc.npy'\n",
    "auc_test_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/test/auc.npy'\n",
    "\n",
    "max_train_matrix = './ranks_matrix/HC_raw_matrix_max.npy'\n",
    "max_test_matrix = './ranks_matrix/test_matrix_max.npy'\n",
    "\n",
    "min_train_matrix = './ranks_matrix/HC_raw_matrix_min.npy'\n",
    "min_test_matrix = './ranks_matrix/test_matrix_min.npy'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-00\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-01\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-02\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-03\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-04\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-05\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-06\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-07\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-08\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-09\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-10\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-11\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-12\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-13\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-14\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-15\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-16\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "matrix = np.load(auc_train_matrix)\n",
    "N = matrix.shape[0]  # Длина массива\n",
    "sub_num = N // 5\n",
    "\n",
    "subjects = np.array_split(matrix, sub_num)\n",
    "for idx, sub in enumerate(subjects):\n",
    "    print(f'sub-{idx:02d}')\n",
    "    draw_heat_map(subjects[idx])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-00\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-01\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-02\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-03\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-04\n"
     ]
    },
    {
     "data": {
      "image/png": "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2/X1119r6tSpCg0N1U033eT38xs5cqT69OmjBg0aqHHjxhozZoxGjx7t2v6///1PVapU0fTp0z3adsSIET7j+arntm3bfF6h61IWLVqkI0eOaPr06WrdurWrPCUlJUdxJOnuu+/W0KFD9dhjj+lf//qXIiMjc328C0PINm3a5DFZ3d2FoXJZr/B0Mb/++qu+/PJLzZw5U0WKFLnofiVLlvQ4Zps2bVShQgVNnjxZw4YN0+zZs+VwODRr1iyPoVmBDBEEgCsNczAA+KVnz57au3evPvjgA69tZ86c0alTp3IVd82aNdq5c6drLocvRYoUUfv27fXNN9+4Lq8qSQcOHNDnn3+uli1bKioq6pLHOXPmjOtyuhe+YJos9/t44403fD529uzZev/99/Wf//xHN99880W/9F5Mq1atJEn169fXk08+qZdfftnji7Gv+qxatUorVqzwGW/mzJnau3eva3316tVatWqVOnXqlKN6+Tru2bNn9c477+QojiTFxMSoW7du2rhxo/r16xfQ8a699lolJibqjTfe0PHjxz22XXhsmTJl1Lp1a3300UceV3jKGv+CZ555Ri1atFDXrl1z9LzOnDkjSZc8d9LS0jR58uQcxQWAKxkZDAB+uffeezVt2jQ99NBDWrhwoVq0aKHMzExt3bpV06ZN09y5c9W4ceMcxRw1apQmTJigKlWqeF3SNqsxY8Zo3rx5atmypR555BEVLVpU7733nhwOh1555RWv/WfOnKnSpUu7hkj9/PPPGjx4sCQpKipKrVu31iuvvKJz586pYsWK+vHHH33+cp+amqr7779f//d//6fu3bvn6Pn5MmLECH399dd64IEHtGzZMoWEhOiWW27R9OnT1aNHD3Xu3FkpKSl69913VatWLde9MtxVrVpVLVu21MMPPyyHw6E33nhDpUqV0lNPPZWjujRv3lwlS5ZUnz59NGjQINlsNn3yySe5vtHilClT9Pbbb3tMiM7N8UJCQjRp0iR16dJFDRo00H333afy5ctr69at2rx5s+bOnStJevPNN9WyZUtde+216t+/vxITE7V792599913Wr9+vUfMH3/8UcuWLcv2ORw4cECffvqpJOnw4cN67733VLRoUd1yyy2SpPbt2ys0NFRdunTRgw8+qJMnT+qDDz5Q2bJltX///pw2GQBcmQrs+lUAgs6lLlNrjDFn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Npf3PF6af4nPrM+x9OqjXvv4+t+Hz1jlVeZMutazDj6es69YEduPe6yn3F7Ka59z0d7nR9bn6Os89vWa6DRqkcf6p9uu89rHl+LfRXqVHa3n2X6+2j35rqleZcM3dvdY39zsM699qsy936tsXMsvPdaf/O4er33slU96lTk3RXmVJf73iMe67dAxr312PVI128f5+n/5+l/sG3TWY92f9pSk4n96t6k/nwspPUK9yrL+f0LqpHvt4/grwqsscYZn3X2dV1k/JyT/3i9MmZLZ7iNJmZv+8FhPfby51z6+PtOyvnZ8tef5lt7tcCbd870oodIhr32yvu9cLH7W92lfn8cn6p31KguP8jyPfP1vfJ3vWffztY+/558z+rxXWW4k1dzmVbb5/dpeZSfiPdsm6+tNkg43icn2cb74Ot99tcPhVp6vp919ns42dkG5+qsX8yz2zjuG51nsYEEGAwAAAHBHBiMgzMEAAAAAYBkyGAAAAICbK28CQf4igwEAAADAMmQwAAAAAHdkMAJCBwMAAABww2VqA8MQKQAAAACWIYMBAAAAuGOIVEDIYAAAAACwDBkMAAAAwA1zMAJDBgMAAACAZchgAAAAAO6YgxEQMhgAAABAEFqyZIm6dOmiChUqyGazaebMmV77bNmyRV27dlV0dLSKFy+u6667Tnv27Mn/yrohgwEAAAB4CI45GKdOnVL9+vXVr18/3XrrrV7bd+7cqZYtW+r+++/XyJEjFRUVpc2bNyssLMzvY1x77bWX3L5u3boc15sOBgAAAOAuSIZIderUSZ06dbro9uHDh+vmm2/WK6+84iq7+uqrc3SM9evX64knnlBERISMMUpOTtZDDz2kmJiYXNebDgYAAACQTxwOhxwOh0eZ3W6X3W7PURyn06nvvvtOTz31lDp06KBff/1ViYmJGjZsmLp3756jWEOHDlXZsmUlSa+//roee+wxValSJUcx3DEHAwAAAHBn8m5JTk5WdHS0x5KcnJzjKh48eFAnT57USy+9pI4dO+rHH39Ujx49dOutt2rx4sV+xylevLhOnjwpSTp//rwyMjL01FNPucpygwwGAAAAkE+GDRumIUOGeJTlNHsh/ZPBkKRu3brp8ccflyQ1aNBAy5cv17vvvqukpCS/4tStW1fDhw/XY489pmnTpik2NlZFihRR48aNNX36dNWqVSvHdaOD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grFOhSFWMNapMMQKxjoFa6xgrFMwx8KV54qe5A0AAAAgf13RGQwAAAAA+YsOBgAAAADL0MEAAAAAYBk6GAAAAAAsQwfDT8yFBwAAALJXtKArYKXDhw/ro48+0ooVK5SamipJio2NVfPmzdW3b1+VKVMm17Htdrs2bNigmjVrWlVdAAAA4IpzxVym9pdfflGHDh101VVXqV27dipXrpwk6cCBA5o/f75Onz6tuXPnqnHjxpeMM2TIEJ/lEyZM0D333KNSpUpJksaNG+dXvSZOnKjVq1fr5ptvVq9evfTJJ58oOTlZTqdTt956q0aNGqWiRS//ft7q1au9OnbNmjVTkyZNAorbtm1bTZ48WfHx8Tl63IYNG7R27Vq1adNGVapU0ebNm/X222/L6XSqR48e6tChQ0D1CgZ51eYS7X4xZ8+e1cyZM33+iNGtWzeFhoYGFL9KlSqaO3euqlWrlqPHffvtt1q9erU6dOigFi1aaMGCBXrttddc7zP9+/cPqF4FrbC0+99//60SJUooIiLCo/zcuXNasWKFWrdune3jw8LCVLp0aUnSzz//rHfffVd79uxRfHy8BgwYoGbNmuWoTpKUmpqqVatWebR906ZNFRsbm+NYWd1333168cUXVaFChYBjXWlod1zOrpgOxvXXX6/69evr3Xfflc1m89hmjNFDDz2kjRs3asWKFZeMExISovr166tEiRIe5YsXL1bjxo1VvHhx2Ww2LViwINs6jRkzRq+88orat2+vZcuWafDgwXr11Vf1+OOPKyQkROPHj9fDDz+skSNH5ui5BtOH0MGDB3Xbbbdp2bJliouL8+jY7dmzRy1atNDXX3+tsmXLXjLOrFmzfJbfeuutmjBhgipXrixJ6tq1a7Z1mj59unr27KkSJUrI4XBoxowZuv3229W4cWMVKVJEP/30k6ZOnaq77rrLr+coSU6nUyEh3iMKnU6n/v77b8XFxWUbw+FwKCQkRMWKFZMk7dy5Ux999JGr3e+//34lJiZmG8eqNpdo95y0+44dO9ShQwft27dPTZs29Wj3VatWqVKlSvrhhx9UtWrVbGO9+eabPsuHDBmip556yvUFYtCgQdnGeu+99zRw4EDVr19f27dv19tvv61HHnlEd9xxh4oUKaKpU6cqOTlZjz32WLaxLqDd87fd9+/fr27dumnt2rWy2Wy666679M4777je4w8cOKAKFSooMzPzknGaNm2q559/Xrfccou++eYb3XrrrbrllltUs2ZNbdu2Td9++62mT5+uW265Jds6SdKpU6f04IMP6ssvv5TNZlNMTIwk6ejRozLG6M4779R7772nq666KttYGzdu9FneuHFjTZs2TVWqVJEk1atXL9tYBw8e1KZNm9SoUSNFR0frwIED+vjjj+V0OtW5c2fVrVvXr+d3QTCd71LhaXdc4cwVIiwszGzZsuWi27ds2WLCwsKyjZOcnGwSExPN/PnzPcqLFi1qNm/enKM6XX311ebrr782xhizfv16U6RIEfPpp5+6tk+fPt1UrVrV73j79u0z1113nQkJCTFFihQx9957rzlx4oRre2pqqgkJCck2TpMmTczs2bONMcbMnDnThISEmK5du5qnn37a9OjRwxQrVsy1PTu33Xabadasmdm6davXtq1bt5rmzZubf/3rX9nGsdlsJiQkxNhstosu/jw3Y4y59tprzZgxY4wxxnzxxRemRIkSZtSoUa7tr732mmnQoIFfsdLS0sztt99uwsLCTNmyZc3zzz9vzp8/79rub5sbY0xSUpL573//a4wxZunSpcZut5t69eqZO+64wzRs2NBcddVVZvny5dnGsarNjaHdc9Lu7dq1M926dTNpaWk+69utWzfTvn17v+pks9lMpUqVTEJCgsdis9lMxYoVTUJCgklMTPQrVq1atcz7779vjDFmwYIFJiwszLz99tuu7ZMnTzY1a9b0KxbtXjDt3rt3b9O0aVPzyy+/mHnz5plGjRqZxo0bm6NHjxpj/ml3m82WbZzixYubXbt2GWOMadq0qXnppZc8tr/11lumYcOGftXJGGPuv/9+U61aNTNnzhyP8+D8+fNm7ty5pnr16ub//u///Ip1qfeaC+X+nFsLFy40xYsXNzabzcTGxpr169ebSpUqmWrVqplrrrnG2O12M3fuXL/qFIznuzFXfrujcLhiOhgJCQnm448/vuj2jz/+2MTHx/sVa/Xq1aZ69ermiSeeMGfPnjXG5K6DER4ebv7880/XerFixcymTZtc67t37zZXXXWV3/GC8UMoIiLCrFu37qLb16xZYyIiIrKN07FjR9O5c2dz4MABj/LctHvx4sVNSkqKMcYYp9NpihUrZjZu3OjavnPnTr/qZIwxgwYNMtWrVzf//e9/zQcffGDi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Sm93FA4MkQIAAJeFn3/+WadOnVLHjh19bj916pTWrFmjpKSkyzZWMLrSnx+sRwcDAAAAgGUYIgUAAADAMnQwAAAAAFiGDgYAAAAAy9DBAAAAAGAZOhgAkIf++usv9evXTxUqVFBoaKji4+P12GOP6ciRI3l2zMzMTDVv3ly33nqrR3laWpoqV66s4cOH59mxAQDgKlIAkEd27dqlZs2aqXr16hozZowSExO1efNmDR06VGfPntXKlSsVExOTJ8fetm2bGjRooA8++EB33323JKl3797asGGDfvnlF4WGhubJcQEAIIMBAHlkwIABCg0N1Y8//qikpCTFxcWpU6dO+umnn7R3716PTILD4dDTTz+typUry263q2rVqvrwww8lSYsWLZLNZtPx48f9Pnb16tX10ksv6dFHH9X+/fv1zTff6Msvv9TUqVPpXAAA8hQdDADIA0ePHtXcuXP1yCOPKDw83GNbbGys7r77bn311Veuu9/27t1bX3zxhd58801t2bJF7733niIiIgKqw6OPPqr69evr3nvvVf/+/fXCCy+ofv36AcUEACA7RQu6AgBwJdq+fbuMMapZs6bP7TVr1tSxY8d06NAhHT9+XNOmTdO8efPUrl07SVKVKlUCroPNZtOkSZNUs2ZN1a1bV88880zAMQEAyA4ZDADIQ/5Mc1u/fr2KFCmipKSkS+5XqVIlRUZGKjExUQ888IDS0tKyjf3RRx/pqquuUkpKiv7++2+/6w0AQG7RwQCAPFC1alXZbDZt2bLF5/YtW7aoZMmSKlOmjNcQqov5+eef9euvv+qDDz7QvHnzsr0a1PLlyzV+/Hh9++23atKkie6//36/OjwAAASCDgYA5IFSpUrppptu0jvvvKMzZ854bEtNTdVnn32mO+64QzabTXXr1pXT6dTixYsvGTMxMVFVq1ZVu3btdPvtt2v9+vUX3ff06dPq27evHn74Yd1www368MMPtXr1ar377rtWPD0AAC6KDgYA5JGJEyfK4XCoQ4cOWrJkif766y/NmTNHN910kypWrKgXX3xRkpSQkKA+ffqoX79+mjlzplJSUrRo0SJNmzbNI57D4VBGRoa2bt2qH374QXXq1LnosYcNGyZjjF566SXXMV577TU99dRT2r17d549ZwAAuA8GAOShP//8UyNGjNCcOXN09OhRxcbGqnv37hoxYoRKlSrl2i8jI0PPPvusvvzySx05ckRxcXF69tlndd9992nRokW64YYbXPuWLl1a7du318SJE1WyZEmvYy5evFg33nijFi1apJYtW3ps69Chg86fP6+ffvpJNpst7544AKDQooMBAAAAwDIMkQIAAABgGToYAAAAACxDBwMAAACAZehgAAAAALAMHQwAAAAAlqGDAQAAAMAydDAAAAAAWIYOBgAAAADL0MEAAAAAYBk6GAAAAAAsQwcDAAAAgGXoYAAAAACwzP8HbCDuoWRoOwQAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-05\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-06\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-07\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-08\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAxgAAAIwCAYAAAAF9c2LAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABl6UlEQVR4nO3deXyM5/7/8fcEmYREYovEEqIoaj2UogRVy1FL21PValE91SWoalV1U9VKV0tLUaele+uconShaq29KEqpLbogdiGWQeb6/dGv+c3kHjLJTJIhr+fjMY9H7uu+5zOfuTJLrnyu675txhgjAAAAAAiAkPxOAAAAAMDVgwEGAAAAgIBhgAEAAAAgYBhgAAAAAAgYBhgAAAAAAoYBBgAAAICAYYABAAAAIGAYYAAAAAAIGAYYAAAAAAKGAQYAAACAgGGAARRgNpvNp9vixYvzO1UAAHCFKJzfCQDIPx999JHH9ocffqj58+db2mvWrJmXaQEAgCuYzRhj8jsJAMGhf//+mjBhgvhYAAAAOcUUKQA+czgcGj58uKpWrSq73a6KFSvqySeflMPh8DjuctOtKleubIn7wgsveD22T58+Hsf9/PPP6tixo4oXL66IiAjddNNNWrVqlccx06ZN84hRtGhR1alTR//5z388jtu0aZP69OmjKlWqKCwsTLGxserbt6+OHDliyW/RokVq0aKFSpQo4RG7f//+l+2vxYsXW6aY7du3T5UrV1ajRo2Unp4uSTp37pyef/55NWzYUFFRUSpWrJhatGihRYsWecTbs2ePbDab3njjDY0ZM0aVKlVSeHi4EhMTtXnzZtdxffr0yXLa2549eyRJX331lTp16qRy5crJbrfrmmuu0ciRI5WRkXHZ5yb9/99bTEyMzp8/77Hvs88+cz3W4cOHXe3ZebzVq1frn//8p0qUKKFixYqpbt26GjdunMcx27ZtU/fu3VWmTBmFh4fr2muv1TPPPGPJ0V16erpiY2Mtv5tWrVp59FHp0qXVqVMnj76VpKlTp6pNmzaKiYmR3W5XrVq1NHHixCz7CwAKCqZIAfCJ0+lUly5dtGzZMvXr1081a9bUL7/8ojFjxmj79u2aNWuWx/E333yzevXq5dH25ptv6tixY5d8DPepWY899pjHvi1btqhFixYqXry4nnzySRUpUkSTJ09Wq1attGTJEjVp0sTj+DFjxqh06dI6ceKE3n//fT3wwAOqXLmy2rZtK0maP3++du/erfvuu0+xsbHasmWL3n33XW3ZskWrVq1y/VGakpKiTp06KS4uTs8//7zKlCkjSbr33nuz14GS0tLS1LFjRxUpUkTffvutIiIiJEknTpzQf/7zH91111164IEHdPLkSb333ntq37691qxZo/r163vE+fDDD3Xy5EklJSXp7NmzGjdunNq0aaNffvlFZcuW1YMPPuh6nhdzvfXWW3Xbbbe52i4+j2nTpikiIkKDBw9WRESEFi5cqOeff14nTpzQ66+/7tPzOnnypL7++mvdeuutrrapU6cqLCxMZ8+e9TjW18ebP3++brnlFsXFxenRRx9VbGystm7dqq+//lqPPvqopL8HiS1atFCRIkXUr18/Va5cWbt27dKcOXP08ssvXzLfN998UwcOHPC6r0aNGnrmmWdkjNGuXbs0evRo/fOf/9Qff/zhOmbixIm67rrr1KVLFxUuXFhz5szRI488IqfTqaSkJJ/6DACuagYA/k9SUpK51MfCRx99ZEJCQsyPP/7o0T5p0iQjySxfvtzVJskkJSVZYnTq1MlUqlTJ0v7MM88Ym83m0VapUiXTu3dv13a3bt1MaGio2bVrl6tt3759JjIy0rRs2dLVNnXqVCPJpKSkuNq2b99uJJnXXnvN1Xb69GlLHp999pmRZJYuXepqmzx5spFkVq5c6XHspZ6ju0WLFhlJZtGiRebs2bOmVatWJiYmxuzcudPjuAsXLhiHw+HRduzYMVO2bFnTt29fV1tKSoqRZMLDw81ff/3lal+9erWRZB577DGveUgyw4cP97rPWz88+OCDpmjRoubs2bOXfX7Dhw83ksxdd91lbrnlFlf777//bkJCQsxdd91lJJlDhw5l6/EuXLhgEhISTKVKlcyxY8c8jnU6na6fW7ZsaSIjI83vv/9+yWMu5njRwYMHTWRkpOnYsaPrd3NRYmKiSUxM9Ij19NNPG0nm4MGDl30O7du3N1WqVLG0A0BBxBQpAD7573//q5o1a6pGjRo6fPiw69amTRtJskznyY5z587Jbrdfcn9GRoa+//57devWTVWqVHG1x8XF6e6779ayZct04sQJj/scO3ZMhw8f1u7duzVmzBgVKlRIiYmJrv3h4eGun8+ePavDhw/rhhtukCStX7/ete/kyZOSpFKlSuX4+TmdTvXq1UurVq3St99+q2uuucZjf6FChRQaGuo69ujRo7pw4YIaNWrkkctF3bp1U/ny5V3bjRs3VpMmTfTtt99mOzf3fjh58qQOHz6sFi1a6PTp09q2bZtPMfr27au5c+cqNTVVkvTBBx+oadOmql69eo4e7+eff1ZKSooGDRqk6Ohoj/tfrCwdOnRIS5cuVd++fRUfH+/1GG9GjhypqKgoDRw40Ov+8+fP6/Dhwzp06JBWrlypmTNnqm7duipdurTX55CWlqbDhw8rMTFRu3fvVlpa2iUfGwAKCqZIAfDJjh07tHXrVtfUmswOHjyY49jHjx93TRfy5tChQzp9+rSuvfZay76aNWvK6XTqzz//1HXXXedq/8c//uH62W63a/z48WrcuLGr7ejRoxoxYoQ+//xzS+7ufyQ2bdpUkjRkyBAlJydf8vlfzjPPPOOadnX69Gmvx3zwwQd68803tW3bNo/1DAkJCZZjq1WrZmmrXr26pk+fnu3ctmzZomeffVYLFy60DNJ8/WO5fv36ql27tj788EMNGTJE06ZN09NPP60///wzR4+3a9cuSVLt2rUv+Zi7d+/O8pjMUlJSNHnyZE2cOFFhYWFej1mxYoXH77hatWqaNWuWx6Bl+fLlGj58uFauXGn5faalpSkqKsrnnADgasQAA4BPnE6n6tSpo9GjR3vdX7FixRzHTk1NVWxsbI7v783HH3+ssmXL6uzZs1q4cKGSkpIUFhbmWjjevXt3rVixQkOGDFH9+vUVEREhp9OpDh06yOl0uuI0a9ZMr7/+ukaMGKFatWrlKJfVq1dr2rRpGj9+vPr166cNGzZ4VGw+/vhj9enTR926ddOQIUMUExOjQoUKKTk52fXHdm44fvy4EhMTVbx4cb344ou65pprFBYWpvXr12vo0KEe/ZCVvn376p133lHjxo2Vmpqq7t27680338y1x8uJZ555RtWqVVPv3r31448/ej2mbt26rrwPHTqkt956S61atdL69esVGxurXbt26aabblKNGjU0evRoVaxYUaGhofr22281ZsyYXH8OAHAlYIABwCfXXHONNm7cqJtuuumyU1By4tdff/WoOGRWpkwZFS1aVL/99ptl37Zt2xQSEmIZ4DRv3tx1xqpbbrlFW7ZsUXJysvr06aNjx45pwYIFGjFihJ5//nnXfXbs2OH18Z94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uzR58mQVLVo0y1ibNm3y2t6oUSNNnz5dVapUkSTVrVs3y1gHDx7U5s2b1bBhQ0VFRenAgQP64IMP5HQ61alTJ9WpU8en53dRML3epYLT77jKmatEWFiY2bp16yX3b9261YSFhWUZJzk52SQkJJgFCxZ4tBcuXNhs2bIlWzldc8015ssvvzTGGLNhwwZTqFAh8/HHH7v2z5gxw1StWtXnePv27TPXX3+9CQkJMYUKFTL33nuvOXnypGt/amqqCQkJyTJO48aNzZw5c4wxxsyaNcuEhISYLl26mKFDh5pbb73VFClSxLU/K7fffrtp2rSp2bZtm2Xftm3bTLNmzcy//vWvLOPYbDYTEhJibDbbJW++PDdjjPnHP/5hXnrpJWOMMZ999pmJjo42L774omv/G2+8YerXr+9TrLS0NHPHHXeYsLAwExMTY5577jlz4cIF135f+9wYYxITE81///tfY4wxy5YtM3a73dStW9fceeedpkGDBqZo0aJmxYoVWcYJVJ8bQ79np9/btm1runbtatLS0rzm27VrV9OuXTufcrLZbKZChQqmcuXKHjebzWbKly9vKleubBISEnyKVatWLfPuu+8aY4xZuHChCQsLMxMmTHDtnzp1qqlZs6ZPsej3/On3Xr16mSZNmpiffvrJzJ8/3zRs2NA0atTIHD161Bjzd7/bbLYs4xQrVszs3r3bGGNMkyZNzCuvvOKx/+233zYNGjTwKSdjjLn//vtNtWrVzNy5cz1eBxcuXDDz5s0z1atXN//+9799inW5z5qL7b68thYtWmSKFStmbDabiY2NNRs2bDAVKlQw1apVM9dee62x2+1m3rx5PuUUjK93Y67+fkfBcNUMMCpXrmw++OCDS+7/4IMPTKVKlXyKtWbNGlO9enXz+OOPm3PnzhljcjbACA8PN7///rtru0iRImbz5s2u7T179piiRYv6HC8Yv4QiIiLM+vXrL7l/7dq1JiIiIss4HTp0MJ06dTIHDhzwaM9JvxcrVsykpKQYY4xxOp2mSJEiZtOmTa79u3bt8iknY4wZOHCgqV69uvnvf/9rpkyZYipVqmQ6depkHA6HMcb3PjfGmOLFi5vt27cbY/7+Mnrsscc89j/77LOmefPmWcYJVJ8bQ78b43u/h4eHm19++eWS+zdt2mTCw8N9yunBBx809evXN7/++qtHe6A+Z9zz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AcMAAwBy0Z9//qm+ffuqXLlyCg0NVaVKlfToo4/qyJEjufaYGRkZatasmW677TaP9rS0NFWsWFHPPPNMrj02AACcRQoAcsnu3bvVtGlTVa9eXS+99JISEhK0ZcsWDRkyROfOndOqVatUsmTJXHns7du3q379+poyZYp69uwpSerVq5c2btyon376SaGhobnyuAAAUMEAgFySlJSk0NBQff/990pMTFR8fLw6duyoH374QXv37vWoJDgcDg0dOlQVK1aU3W5X1apV9d5770mSFi9eLJvNpuPHj/v82NWrV9crr7yiAQMGaP/+/frqq6/0+eef68MPP2RwAQDIVQwwACAXHD16VPPmzdMjjzyi8PBwj32xsbHq2bOnvvjiC9fVb3v16qXPPvtMb731lrZu3arJkycrIiLCrxwGDBigevXq6d5771W/fv30/PPPq169en7FBAAgK4XzOwEAuBrt2LFDxhjVrFnT6/6aNWvq2LFjOnTokI4fP67p06dr/vz5atu2rSSpSpUqfudgs9k0ceJE1axZU3Xq1NFTTz3ld0wAALJCBQMAcpEvy9w2bNigQoUKKTEx8bLHVahQQZGRkUpISNADDzygtLS0LGO///77Klq0qFJSUvTXX3/5nDcAADnFAAMAckHVqlVls9m0detWr/u3bt2qEiVKqEyZMpYpVJfy448/6ueff9aUKVM0f/78LM8GtWLFCo0ZM0Zff/21GjdurPvvv9+nAQ8AAP5ggAEAuaBUqVK6+eab9c477+jMmTMe+1JTU/XJJ5/ozjvvlM1mU506deR0OrVkyZLLxkxISFDVqlXVtm1b3XHHHdqwYcMljz19+rT69Omjhx9+WK1bt9Z7772nNWvWaNKkSYF4egAAXBIDDADIJePHj5fD4VD79u21dOlS/fnnn5o7d65uvvlmlS9fXi+//LIkqXLlyurdu7f69u2rWbNmKSUlRYsXL9b06dM94jkcDp09e1bbtm3Td999p9q1a1/ysYcNGyZjjF555RXXY7zxxht68skntWfPnlx7zgAAcB0MAMhFv//+u4YPH665c+fq6NGjio2NVbdu3TR8+HCVKlXKddzZs2f19NNP6/PPP9eRI0cUHx+vp59+Wvfdd58WL16s1q1bu44tXbq02rVrp/Hjx6tEiRKWx1yyZIluuukmLV68WDfeeKPHvvbt2+vChQv64YcfZLPZcu+JAwAKLAYYAAAAAAKGKVIAAAAAAoYBBgAAAICAYYABAAAAIGAYYAAAAAAIGAYYAAAAAAKGAQYAAACAgGGAAQAAACBgGGAAAAAACBgGGAAAAAAChgEGAAAAgIBhgAEAAAAgYBhgAAAAAAiY/wdy+sYIw0WlFgAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-09\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "matrix = np.load(auc_test_matrix)\n",
    "N = matrix.shape[0]  # Длина массива\n",
    "sub_num = N // 5\n",
    "\n",
    "subjects = np.array_split(matrix, sub_num)\n",
    "for idx, sub in enumerate(subjects):\n",
    "    print(f'sub-{idx:02d}')\n",
    "    draw_heat_map(subjects[idx])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

==================================================

📄 notebooks/visualizing.ipynb
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Построить временной ряд для вокселя"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(553, 132)\n"
     ]
    },
    {
     "ename": "IndexError",
     "evalue": "too many indices for array: array is 2-dimensional, but 4 were indexed",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[13], line 10\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;66;03m# Выберите координаты вокселя (x, y, z, временная точка)\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;66;03m# Например, возьмем воксель в позиции (30, 30, 30) и все временные точки\u001b[39;00m\n\u001b[1;32m      9\u001b[0m x, y, z \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m77\u001b[39m, \u001b[38;5;241m57\u001b[39m, \u001b[38;5;241m35\u001b[39m\n\u001b[0;32m---> 10\u001b[0m time_series \u001b[38;5;241m=\u001b[39m \u001b[43mdata\u001b[49m\u001b[43m[\u001b[49m\u001b[43mx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mz\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m:\u001b[49m\u001b[43m]\u001b[49m  \u001b[38;5;66;03m# для 4D данных (3D + время)\u001b[39;00m\n\u001b[1;32m     12\u001b[0m \u001b[38;5;66;03m# Построение графика\u001b[39;00m\n\u001b[1;32m     13\u001b[0m plt\u001b[38;5;241m.\u001b[39mfigure(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m12\u001b[39m, \u001b[38;5;241m6\u001b[39m))\n",
      "\u001b[0;31mIndexError\u001b[0m: too many indices for array: array is 2-dimensional, but 4 were indexed"
     ]
    }
   ],
   "source": [
    "import nibabel as nib\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "data = np.load('./numpy_data//HC_data/sub-02.npy')\n",
    "print(data.shape)\n",
    "# Выберите координаты вокселя (x, y, z, временная точка)\n",
    "# Например, возьмем воксель в позиции (30, 30, 30) и все временные точки\n",
    "x, y, z = 77, 57, 35\n",
    "time_series = data[x, y, z, :]  # для 4D данных (3D + время)\n",
    "\n",
    "# Построение графика\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(time_series)\n",
    "plt.title(f'Временной ряд для вокселя ({x}, {y}, {z})')\n",
    "plt.xlabel('Временные точки')\n",
    "plt.ylabel('Интенсивность сигнала')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# То же самое, только с использованием NiftiMasker"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "from nilearn import datasets, plotting, image\n",
    "from nilearn.maskers import NiftiLabelsMasker\n",
    "import nibabel as nib\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Загрузка фМРТ данных и атласа\n",
    "fmri_path = './data/HC/sub-02/denoised_data.nii.gz'\n",
    "atlas_path = './atlas/atlas_resample.nii'  # Например, Schaefer, AAL, Harvard-Oxford\n",
    "\n",
    "# Если нет своего атласа, можно загрузить стандартный:\n",
    "# atlas = datasets.fetch_atlas_harvard_oxford('cort-maxprob-thr25-2mm')\n",
    "# atlas_path = atlas.maps\n",
    "\n",
    "# fmri_img = np.load(fmri_path)\n",
    "atlas_img = nib.load(atlas_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Размерность данных: (553, 132) (временные точки × регионы)\n"
     ]
    }
   ],
   "source": [
    "# Создаем маскер для извлечения временных рядов по регионам атласа\n",
    "masker = NiftiLabelsMasker(\n",
    "    labels_img=atlas_img,\n",
    "    standardize=True,       # Нормализация сигнала (z-score)\n",
    "    detrend=False,          # Удаление линейного тренда\n",
    "    low_pass=0.1,          # Низкочастотная фильтрация (если нужно)\n",
    "    high_pass=0.01,        # Высокочастотная фильтрация (если нужно)\n",
    "    t_r=1.0               # Время повторения (TR) в секундах (уточните для ваших данных!)\n",
    ")\n",
    "\n",
    "# Извлечение временных рядов для всех регионов\n",
    "time_series_all_rois = masker.fit_transform(fmri_path)  # Форма: (timepoints, rois)\n",
    "print(f\"Размерность данных: {time_series_all_rois.shape} (временные точки × регионы)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-1\n",
      "Воксель (77, 57, 35) принадлежит региону 0.0\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Координаты вокселя (MNI или воксельные)\n",
    "x, y, z = 77, 57, 35\n",
    "\n",
    "# Определяем, к какому региону принадлежит воксель\n",
    "atlas_data = atlas_img.get_fdata()\n",
    "roi_value = atlas_data[x, y, z]\n",
    "print(int(roi_value) - 1)\n",
    "print(f\"Воксель ({x}, {y}, {z}) принадлежит региону {roi_value}\")\n",
    "\n",
    "# Извлекаем сигнал для этого региона (если roi_value != 0)\n",
    "\n",
    "roi_signal = time_series_all_rois[:, 131]  # Индексы начинаются с 0!\n",
    "\n",
    "# Визуализация\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(roi_signal, label=f'Регион {roi_value}', color='red')\n",
    "plt.title(f'Временной ряд для региона {roi_value}')\n",
    "plt.xlabel('Временные точки')\n",
    "plt.ylabel('Сигнал (нормализованный)')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Для проверки: извлечем сигнал вручную из исходных данных\n",
    "raw_fmri_data = fmri_img.get_fdata()\n",
    "voxel_signal = raw_fmri_data[x, y, z, :]\n",
    "\n",
    "# Нормализуем для сравнения\n",
    "voxel_signal = (voxel_signal - np.mean(voxel_signal)) / np.std(voxel_signal)\n",
    "\n",
    "# Визуализация\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(roi_signal, label=f'Усредненный сигнал региона {roi_value}', color='red')\n",
    "plt.plot(voxel_signal, label='Исходный сигнал вокселя', linestyle='--', alpha=0.7)\n",
    "plt.title('Сравнение региона и вокселя')\n",
    "plt.xlabel('Временные точки')\n",
    "plt.ylabel('Сигнал (z-score)')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0\n",
      " 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1\n",
      " 0 0 0 0 1 0 0 0 0 1 0]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "matrix = np.load('./results/ranks_matrix.npy')\n",
    "N = matrix.shape[0]  # Длина массива\n",
    "labels = np.zeros(N, dtype=int)  # Создаем массив из нулей\n",
    "labels[3::5] = 1  # Каждый 4-й элемен\n",
    "print(labels)\n",
    "X = matrix\n",
    "y = labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GroupShuffleSplit\n",
    "\n",
    "# Группы для разделения (17 испытуемых → 17 групп)\n",
    "groups = np.repeat(np.arange(17), 5)  # [0,0,0,0,0, 1,1,1,1,1, ..., 16,16,16,16,16]\n",
    "\n",
    "splitter = GroupShuffleSplit(n_splits=1, test_size=0.3, random_state=42)\n",
    "train_idx, test_idx = next(splitter.split(X, y, groups))\n",
    "\n",
    "X_train, X_test = X[train_idx], X[test_idx]\n",
    "y_train, y_test = y[train_idx], y[test_idx]\n",
    "\n",
    "print(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Logistic Regression\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.92      0.88        24\n",
      "           1       0.50      0.33      0.40         6\n",
      "\n",
      "    accuracy                           0.80        30\n",
      "   macro avg       0.67      0.62      0.64        30\n",
      "weighted avg       0.78      0.80      0.78        30\n",
      "\n",
      "ROC-AUC: 0.8402777777777777\n",
      "\n",
      "Random Forest\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      1.00      0.89        24\n",
      "           1       0.00      0.00      0.00         6\n",
      "\n",
      "    accuracy                           0.80        30\n",
      "   macro avg       0.40      0.50      0.44        30\n",
      "weighted avg       0.64      0.80      0.71        30\n",
      "\n",
      "ROC-AUC: 0.986111111111111\n",
      "\n",
      "SVM\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.88      0.86        24\n",
      "           1       0.40      0.33      0.36         6\n",
      "\n",
      "    accuracy                           0.77        30\n",
      "   macro avg       0.62      0.60      0.61        30\n",
      "weighted avg       0.75      0.77      0.76        30\n",
      "\n",
      "ROC-AUC: 0.7569444444444444\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "XGBoost\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.92      0.94        24\n",
      "           1       0.71      0.83      0.77         6\n",
      "\n",
      "    accuracy                           0.90        30\n",
      "   macro avg       0.84      0.88      0.85        30\n",
      "weighted avg       0.91      0.90      0.90        30\n",
      "\n",
      "ROC-AUC: 0.9652777777777778\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.svm import SVC\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.metrics import classification_report, roc_auc_score\n",
    "\n",
    "models = {\n",
    "    \"Logistic Regression\": LogisticRegression(class_weight='balanced', max_iter=1000),\n",
    "    \"Random Forest\": RandomForestClassifier(class_weight='balanced', random_state=42),\n",
    "    \"SVM\": SVC(kernel='linear', class_weight='balanced', probability=True),\n",
    "    \"XGBoost\": XGBClassifier(colsample_bytree=0.8, learning_rate=0.01, max_depth=3, scale_pos_weight=4, subsample=0.8)  # Вес для класса 1: 68/17 = 4\n",
    "}\n",
    "\n",
    "# from imblearn.over_sampling import SMOTE\n",
    "\n",
    "# smote = SMOTE(random_state=42)\n",
    "# X_train_smote, y_train_smote = smote.fit_resample(X_train, y_train)\n",
    "\n",
    "# model = XGBClassifier(scale_pos_weight=1)  # Теперь классы сбалансированы SMOTE\n",
    "# model.fit(X_train_smote, y_train_smote)\n",
    "# y_pred = model.predict(X_test)\n",
    "# y_proba = model.predict_proba(X_test)[:, 1]\n",
    "\n",
    "# print(classification_report(y_test, y_pred))\n",
    "# print(\"ROC-AUC:\", roc_auc_score(y_test, y_proba))\n",
    "\n",
    "\n",
    "\n",
    "for name, model in models.items():\n",
    "    model.fit(X_train, y_train)\n",
    "    y_pred = model.predict(X_test)\n",
    "    y_proba = model.predict_proba(X_test)[:, 1]\n",
    "    \n",
    "    print(f\"\\n{name}\")\n",
    "    print(classification_report(y_test, y_pred))\n",
    "    print(\"ROC-AUC:\", roc_auc_score(y_test, y_proba))\n",
    "\n",
    "model = models[\"XGBoost\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "matrix_test = np.load('./results/test_matrix.npy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(50, 132)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "matrix_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "N_test = matrix_test.shape[0]  # Длина массива\n",
    "labels_test = np.zeros(N_test, dtype=int)  # Создаем массив из нулей\n",
    "labels_test[3::5] = 1  # Каждый 4-й элемен\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(50,)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labels_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.93      0.88        40\n",
      "           1       0.50      0.30      0.37        10\n",
      "\n",
      "    accuracy                           0.80        50\n",
      "   macro avg       0.67      0.61      0.63        50\n",
      "weighted avg       0.77      0.80      0.78        50\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(labels_test, model.predict(matrix_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from fmri_processing.utils import draw_heat_map"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "matrix = np.load('./numpy_matrixes/average_matrix/HC/auc.npy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "draw_heat_map(matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

==================================================

📄 notebooks/train_on_test_data copy.ipynb
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "proportional_train_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/proportional/raw_HC/auc.npy'\n",
    "proportional_test_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/proportional/raw_test/auc.npy'\n",
    "\n",
    "reduced_train_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/reduced_ranks/auc_raw_HC.npy'\n",
    "reduced_test_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/reduced_ranks/auc_test.npy'\n",
    "\n",
    "ranks_train_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/raw_HC/auc.npy'\n",
    "ranks_test_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/raw_test/auc.npy'\n",
    "\n",
    "\n",
    "train_matrix = proportional_train_matrix\n",
    "test_matrix = proportional_test_matrix \n",
    "\n",
    "# train_matrix = ranks_train_matrix\n",
    "# test_matrix = ranks_test_matrix\n",
    "\n",
    "# train_matrix = reduced_train_matrix\n",
    "# test_matrix = reduced_test_matrix\n",
    "\n",
    "train_matrix, test_matrix = test_matrix, train_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "# train_matrix  = '/home/aaanpilov/diploma/project/numpy_matrixes/average_stimulus/HC/max.npy'\n",
    "# test_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/average_stimulus/test/max.npy'\n",
    "\n",
    "# train_matrix, test_matrix = test_matrix, train_matrix\n",
    "def draw_all_subjects(matrix):\n",
    "    N = matrix.shape[0]  # Длина массива\n",
    "    sub_num = N // 5\n",
    "\n",
    "    subjects = np.array_split(matrix, sub_num)\n",
    "    for idx, sub in enumerate(subjects):\n",
    "        print(f'sub-{idx:02d}')\n",
    "        draw_heat_map(subjects[idx])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "def z_score_matrix(matrix):\n",
    "    shape = matrix.shape\n",
    "\n",
    "    # 1. Разбиваем матрицу на группы по 5 элементов\n",
    "    flattened = matrix.flatten()  # Преобразуем в 1D-массив\n",
    "    num_groups = len(flattened) // 5\n",
    "    groups = flattened[:num_groups * 5].reshape(-1, 5)  # Группы по 5 элементов\n",
    "\n",
    "    # 2. Вычисляем z-показатели для каждой группы\n",
    "    z_scores = np.zeros_like(groups)\n",
    "    for i in range(groups.shape[0]):\n",
    "        group = groups[i]\n",
    "        mean = np.mean(group)\n",
    "        std = np.std(group)\n",
    "        if std != 0:\n",
    "            z_scores[i] = (group - mean) / std\n",
    "        else:\n",
    "            z_scores[i] = 0  # Если все элементы одинаковые\n",
    "\n",
    "    # 3. Собираем обратно в матрицу\n",
    "    flattened_z = z_scores.flatten()\n",
    "    # Если исходная длина не делилась на 5, добавляем оставшиеся элементы без изменений\n",
    "    if len(flattened) % 5 != 0:\n",
    "        remaining = flattened[num_groups * 5:]\n",
    "        flattened_z = np.concatenate([flattened_z, remaining])\n",
    "\n",
    "    # Преобразуем обратно в исходную размерность\n",
    "    result_matrix = flattened_z.reshape(shape)\n",
    "    return result_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GroupShuffleSplit\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "def prepare_data(train_matrix):\n",
    "    matrix = np.load(train_matrix)\n",
    "    N = matrix.shape[0]  # Длина массива\n",
    "    sub_num = N // 5    # Количество испытуемых\n",
    "\n",
    "    labels = np.zeros(N, dtype=int)  # Создаем массив из нулей\n",
    "    labels[3::5] = 1  # Каждый 4-й элемен\n",
    "    print(matrix.shape)\n",
    "\n",
    "    X = matrix\n",
    "    y = labels\n",
    "\n",
    "\n",
    "    # Группы для разделения\n",
    "    groups = np.repeat(np.arange(sub_num), 5)  # [0,0,0,0,0, 1,1,1,1,1,...]\n",
    "\n",
    "    splitter = GroupShuffleSplit(n_splits=1, test_size=0.3, random_state=30)\n",
    "    train_idx, test_idx = next(splitter.split(X, y, groups))\n",
    "\n",
    "    X_train, X_test = X[train_idx], X[test_idx]\n",
    "    y_train, y_test = y[train_idx], y[test_idx]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.svm import SVC\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.metrics import recall_score, classification_report\n",
    "from sklearn.model_selection import GroupShuffleSplit\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.pipeline import Pipeline\n",
    "import numpy as np\n",
    "from fmri_processing.utils import draw_heat_map\n",
    "\n",
    "def train_best_model_by_recall(X, y, groups, target_class=1, test_size=0.3, random_state=42, verbose=True):\n",
    "    \"\"\"\n",
    "    Обучает модели и возвращает лучшую по recall для указанного класса\n",
    "    \n",
    "    Параметры:\n",
    "    X - признаки\n",
    "    y - целевая переменная\n",
    "    groups - группы для кросс-валидации\n",
    "    target_class - класс, для которого оптимизируем recall (по умолчанию 1)\n",
    "    test_size - доля тестовой выборки\n",
    "    random_state - для воспроизводимости\n",
    "    verbose - вывод информации о процессе обучения\n",
    "    \"\"\"\n",
    "    # 1. Разделение на train/test с сохранением групп\n",
    "    splitter = GroupShuffleSplit(n_splits=1, test_size=test_size, random_state=random_state)\n",
    "    train_idx, test_idx = next(splitter.split(X, y, groups))\n",
    "    \n",
    "    X_train, X_test = X[train_idx], X[test_idx]\n",
    "    y_train, y_test = y[train_idx], y[test_idx]\n",
    "    groups_train = groups[train_idx]\n",
    "    \n",
    "    # 2. Инициализация моделей\n",
    "    models = {\n",
    "        \"Logistic Regression\": Pipeline([\n",
    "            ('scaler', StandardScaler()),\n",
    "            ('model', LogisticRegression(class_weight='balanced', \n",
    "                                       max_iter=1000, \n",
    "                                       random_state=random_state))\n",
    "        ]),\n",
    "        \"Random Forest\": RandomForestClassifier(class_weight='balanced_subsample', \n",
    "                                              random_state=random_state),\n",
    "        \"SVM\": Pipeline([\n",
    "            ('scaler', StandardScaler()),\n",
    "            ('model', SVC(kernel='rbf', \n",
    "                         class_weight='balanced', \n",
    "                         probability=True, \n",
    "                         random_state=random_state))\n",
    "        ]),\n",
    "        \"XGBoost\": XGBClassifier(\n",
    "            scale_pos_weight=4,  # Автоматический расчет\n",
    "            random_state=random_state\n",
    "        )\n",
    "    }\n",
    "\n",
    "    # 3. Кросс-валидация по группам\n",
    "    gss = GroupShuffleSplit(n_splits=5, test_size=0.2, random_state=random_state)\n",
    "    model_recalls = []\n",
    "\n",
    "    for name, model in models.items():\n",
    "        recall_scores = []\n",
    "        \n",
    "        for fold, (train_idx_fold, val_idx_fold) in enumerate(gss.split(X_train, y_train, groups_train)):\n",
    "            model.fit(X_train[train_idx_fold], y_train[train_idx_fold])\n",
    "            y_pred = model.predict(X_train[val_idx_fold])\n",
    "            recall = recall_score(y_train[val_idx_fold], y_pred, pos_label=target_class)\n",
    "            recall_scores.append(recall)\n",
    "        \n",
    "        print(recall_scores)\n",
    "        mean_recall = np.mean(recall_scores)\n",
    "        std_recall = np.std(recall_scores)\n",
    "        model_recalls.append((name, mean_recall, std_recall, model))\n",
    "        \n",
    "        if verbose:\n",
    "            print(f\"{name:<20} | Recall (class {target_class}): {mean_recall:.3f} ± {std_recall:.3f}\")\n",
    "\n",
    "    # 4. Выбор лучшей модели\n",
    "    best_name, best_recall, best_std, best_model = max(model_recalls, key=lambda x: x[1])\n",
    "    \n",
    "    # 5. Финальное обучение на полном train наборе\n",
    "    best_model.fit(X_train, y_train)\n",
    "    \n",
    "    # 6. Оценка на тестовом наборе\n",
    "    test_recall = recall_score(y_test, best_model.predict(X_test), pos_label=target_class)\n",
    "    \n",
    "    if verbose:\n",
    "        print(f\"\\n{'='*50}\")\n",
    "        print(f\"BEST MODEL: {best_name}\")\n",
    "        print(f\"CV Recall (class {target_class}): {best_recall:.3f} ± {best_std:.3f}\")\n",
    "        print(f\"Test Recall (class {target_class}): {test_recall:.3f}\")\n",
    "        print(\"=\"*50)\n",
    "\n",
    "    return best_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(50, 132)\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'X' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[9], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m prepare_data(train_matrix)\n\u001b[0;32m----> 2\u001b[0m model \u001b[38;5;241m=\u001b[39m train_best_model_by_recall(\u001b[43mX\u001b[49m, y, groups, \u001b[38;5;241m1\u001b[39m, verbose\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'X' is not defined"
     ]
    }
   ],
   "source": [
    "prepare_data(train_matrix)\n",
    "model = train_best_model_by_recall(X, y, groups, 1, verbose=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.88      0.88        68\n",
      "           1       0.50      0.47      0.48        17\n",
      "\n",
      "    accuracy                           0.80        85\n",
      "   macro avg       0.68      0.68      0.68        85\n",
      "weighted avg       0.80      0.80      0.80        85\n",
      "\n"
     ]
    }
   ],
   "source": [
    "matrix_test = np.load(test_matrix)\n",
    "matrix_test = z_score_matrix(matrix_test)\n",
    "N_test = matrix_test.shape[0]  # Длина массива\n",
    "sub_num_test = N_test // 5\n",
    "\n",
    "labels_test = np.zeros(N_test, dtype=int)  # Создаем массив из нулей\n",
    "labels_test[3::5] = 1  # Каждый 4-й элемен\n",
    "print(classification_report(labels_test, model.predict(matrix_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

==================================================

📄 notebooks/train_on_test_data.ipynb
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.svm import SVC\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.metrics import recall_score, classification_report\n",
    "from sklearn.model_selection import GroupShuffleSplit\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.model_selection import GroupShuffleSplit\n",
    "import numpy as np\n",
    "from fmri_processing.utils import draw_heat_map\n",
    "from fmri_processing.functions import funcs\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# train_matrix  = '/home/aaanpilov/diploma/project/numpy_matrixes/average_stimulus/HC/max.npy'\n",
    "# test_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/average_stimulus/test/max.npy'\n",
    "\n",
    "# train_matrix, test_matrix = test_matrix, train_matrix\n",
    "def draw_all_subjects(matrix):\n",
    "    N = matrix.shape[0]  # Длина массива\n",
    "    sub_num = N // 5\n",
    "\n",
    "    subjects = np.array_split(matrix, sub_num)\n",
    "    for idx, sub in enumerate(subjects):\n",
    "        print(f'sub-{idx:02d}')\n",
    "        draw_heat_map(subjects[idx])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "def z_score_matrix(matrix):\n",
    "    shape = matrix.shape\n",
    "\n",
    "    # 1. Разбиваем матрицу на группы по 5 элементов\n",
    "    flattened = matrix.flatten()  # Преобразуем в 1D-массив\n",
    "    num_groups = len(flattened) // 5\n",
    "    groups = flattened[:num_groups * 5].reshape(-1, 5)  # Группы по 5 элементов\n",
    "\n",
    "    # 2. Вычисляем z-показатели для каждой группы\n",
    "    z_scores = np.zeros_like(groups)\n",
    "    for i in range(groups.shape[0]):\n",
    "        group = groups[i]\n",
    "        mean = np.mean(group)\n",
    "        std = np.std(group)\n",
    "        if std != 0:\n",
    "            z_scores[i] = (group - mean) / std\n",
    "        else:\n",
    "            z_scores[i] = 0  # Если все элементы одинаковые\n",
    "\n",
    "    # 3. Собираем обратно в матрицу\n",
    "    flattened_z = z_scores.flatten()\n",
    "    # Если исходная длина не делилась на 5, добавляем оставшиеся элементы без изменений\n",
    "    if len(flattened) % 5 != 0:\n",
    "        remaining = flattened[num_groups * 5:]\n",
    "        flattened_z = np.concatenate([flattened_z, remaining])\n",
    "\n",
    "    # Преобразуем обратно в исходную размерность\n",
    "    result_matrix = flattened_z.reshape(shape)\n",
    "    return result_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def prepare_data(train_matrix):\n",
    "    matrix = np.load(train_matrix)\n",
    "    N = matrix.shape[0]  # Длина массива\n",
    "    sub_num = N // 5    # Количество испытуемых\n",
    "\n",
    "    labels = np.zeros(N, dtype=int)  # Создаем массив из нулей\n",
    "    labels[3::5] = 1  # Каждый 4-й элемен\n",
    "    print(matrix.shape)\n",
    "\n",
    "    X = matrix\n",
    "    y = labels\n",
    "\n",
    "\n",
    "    # Группы для разделения\n",
    "    groups = np.repeat(np.arange(sub_num), 5)  # [0,0,0,0,0, 1,1,1,1,1,...]\n",
    "\n",
    "    splitter = GroupShuffleSplit(n_splits=1, test_size=0.3, random_state=30)\n",
    "    train_idx, test_idx = next(splitter.split(X, y, groups))\n",
    "\n",
    "    X_train, X_test = X[train_idx], X[test_idx]\n",
    "    y_train, y_test = y[train_idx], y[test_idx]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_best_model_by_recall_(train_matrix, target_class=1, test_size=0.3, random_state=42, verbose=True):\n",
    "    \"\"\"\n",
    "    Обучает модели и возвращает лучшую по recall для указанного класса\n",
    "    \n",
    "    Параметры:\n",
    "    X - признаки\n",
    "    y - целевая переменная\n",
    "    groups - группы для кросс-валидации\n",
    "    target_class - класс, для которого оптимизируем recall (по умолчанию 1)\n",
    "    test_size - доля тестовой выборки\n",
    "    random_state - для воспроизводимости\n",
    "    verbose - вывод информации о процессе обучения\n",
    "    \"\"\"\n",
    "    \n",
    "    matrix = np.load(train_matrix)\n",
    "    N = matrix.shape[0]  # Длина массива\n",
    "    sub_num = N // 5    # Количество испытуемых\n",
    "\n",
    "    labels = np.zeros(N, dtype=int)  # Создаем массив из нулей\n",
    "    labels[3::5] = 1  # Каждый 4-й элемен\n",
    "    print(matrix.shape)\n",
    "\n",
    "    X = matrix\n",
    "    y = labels\n",
    "\n",
    "\n",
    "    # Группы для разделения\n",
    "    groups = np.repeat(np.arange(sub_num), 5)  # [0,0,0,0,0, 1,1,1,1,1,...]\n",
    "\n",
    "    splitter = GroupShuffleSplit(n_splits=1, test_size=0.3, random_state=30)\n",
    "    train_idx, test_idx = next(splitter.split(X, y, groups))\n",
    "\n",
    "    X_train, X_test = X[train_idx], X[test_idx]\n",
    "    y_train, y_test = y[train_idx], y[test_idx]\n",
    "    \n",
    "    \n",
    "    # 1. Разделение на train/test с сохранением групп\n",
    "    splitter = GroupShuffleSplit(n_splits=1, test_size=test_size, random_state=random_state)\n",
    "    train_idx, test_idx = next(splitter.split(X, y, groups))\n",
    "    \n",
    "    X_train, X_test = X[train_idx], X[test_idx]\n",
    "    y_train, y_test = y[train_idx], y[test_idx]\n",
    "    groups_train = groups[train_idx]\n",
    "    \n",
    "    # 2. Инициализация моделей\n",
    "    models = {\n",
    "        \"Logistic Regression\": Pipeline([\n",
    "            ('scaler', StandardScaler()),\n",
    "            ('model', LogisticRegression(class_weight='balanced', \n",
    "                                       max_iter=1000, \n",
    "                                       random_state=random_state))\n",
    "        ]),\n",
    "        \"Random Forest\": RandomForestClassifier(class_weight='balanced_subsample', \n",
    "                                              random_state=random_state),\n",
    "        \"SVM\": Pipeline([\n",
    "            ('scaler', StandardScaler()),\n",
    "            ('model', SVC(kernel='rbf', \n",
    "                         class_weight='balanced', \n",
    "                         probability=True, \n",
    "                         random_state=random_state))\n",
    "        ]),\n",
    "        \"XGBoost\": XGBClassifier(\n",
    "            scale_pos_weight=4,  # Автоматический расчет\n",
    "            random_state=random_state\n",
    "        )\n",
    "    }\n",
    "\n",
    "    # 3. Кросс-валидация по группам\n",
    "    gss = GroupShuffleSplit(n_splits=5, test_size=0.3, random_state=random_state)\n",
    "    model_recalls = []\n",
    "\n",
    "    for name, model in models.items():\n",
    "        recall_scores = []\n",
    "        \n",
    "        for fold, (train_idx_fold, val_idx_fold) in enumerate(gss.split(X_train, y_train, groups_train)):\n",
    "            model.fit(X_train[train_idx_fold], y_train[train_idx_fold])\n",
    "            y_pred = model.predict(X_train[val_idx_fold])\n",
    "            recall = recall_score(y_train[val_idx_fold], y_pred, pos_label=target_class)\n",
    "            recall_scores.append(recall)\n",
    "        \n",
    "        print(recall_scores)\n",
    "        mean_recall = np.mean(recall_scores)\n",
    "        std_recall = np.std(recall_scores)\n",
    "        model_recalls.append((name, mean_recall, std_recall, model))\n",
    "        \n",
    "        if verbose:\n",
    "            print(f\"{name:<20} | Recall (class {target_class}): {mean_recall:.3f} ± {std_recall:.3f}\")\n",
    "\n",
    "        model.fit(X_train, y_train)\n",
    "    # # 4. Выбор лучшей модели\n",
    "    # best_name, best_recall, best_std, best_model = max(model_recalls, key=lambda x: x[1])\n",
    "    \n",
    "    # # 5. Финальное обучение на полном train наборе\n",
    "    # best_model.fit(X_train, y_train)\n",
    "    \n",
    "    # # 6. Оценка на тестовом наборе\n",
    "    # test_recall = recall_score(y_test, best_model.predict(X_test), pos_label=target_class)\n",
    "    \n",
    "    # if verbose:\n",
    "    #     print(f\"\\n{'='*50}\")\n",
    "    #     print(f\"BEST MODEL: {best_name}\")\n",
    "    #     print(f\"CV Recall (class {target_class}): {best_recall:.3f} ± {best_std:.3f}\")\n",
    "    #     print(f\"Test Recall (class {target_class}): {test_recall:.3f}\")\n",
    "    #     print(\"=\"*50)\n",
    "\n",
    "    return models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_best_model_by_recall(train_matrix, target_class=1, test_size=0.3, random_state=42, verbose=True):\n",
    "    \"\"\"\n",
    "    Обучает модели и возвращает лучшую по recall для указанного класса\n",
    "    \n",
    "    Параметры:\n",
    "    train_matrix - путь к файлу с матрицей признаков\n",
    "    target_class - класс, для которого оптимизируем recall\n",
    "    test_size - доля валидационной выборки в кросс-валидации\n",
    "    random_state - для воспроизводимости\n",
    "    verbose - вывод информации о процессе обучения\n",
    "    \n",
    "    Возвращает:\n",
    "    Лучшую модель (по recall на валидации), метрики моделей\n",
    "    \"\"\"\n",
    "    \n",
    "    # 1. Загрузка данных и подготовка\n",
    "    matrix = np.load(train_matrix)\n",
    "    N = matrix.shape[0]\n",
    "    sub_num = N // 5\n",
    "\n",
    "    labels = np.zeros(N, dtype=int)\n",
    "    labels[3::5] = 1\n",
    "    \n",
    "    X = matrix\n",
    "    y = labels\n",
    "    groups = np.repeat(np.arange(sub_num), 5)\n",
    "\n",
    "    # 2. Инициализация моделей\n",
    "    models = {\n",
    "        \"Logistic Regression\": Pipeline([\n",
    "            ('scaler', StandardScaler()),\n",
    "            ('model', LogisticRegression(class_weight='balanced', \n",
    "                                       max_iter=1000, \n",
    "                                       random_state=random_state))\n",
    "        ]),\n",
    "\n",
    "\n",
    "\n",
    "    }\n",
    "    # from sklearn.model_selection import RandomizedSearchCV\n",
    "    # from scipy.stats import loguniform  # для логарифмического распределения C\n",
    "\n",
    "    # param_dist = {\n",
    "    #     'model__C': loguniform(1e-4, 100),  # C в диапазоне [0.0001, 100]\n",
    "    #     'model__penalty': ['l1', 'l2', 'elasticnet', None],\n",
    "    #     'model__solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'],\n",
    "    #     'model__l1_ratio': [0, 0.25, 0.5, 0.75, 1]  # для elasticnet\n",
    "    # }\n",
    "\n",
    "    # random_search = RandomizedSearchCV(\n",
    "    #     estimator=models['Logistic Regression'],\n",
    "    #     param_distributions=param_dist,\n",
    "    #     n_iter=50,  # количество случайных комбинаций\n",
    "    #     scoring='accuracy',\n",
    "    #     cv=5,\n",
    "    #     n_jobs=-1,\n",
    "    #     verbose=1,\n",
    "    #     random_state=random_state\n",
    "    # )\n",
    "\n",
    "    # models['Logistic Regression'] = random_search\n",
    "\n",
    "    # 3. Кросс-валидация по группам\n",
    "    gss = GroupShuffleSplit(n_splits=5, test_size=test_size, random_state=random_state)\n",
    "    model_recalls = []\n",
    "\n",
    "    for name, model in models.items():\n",
    "        recall_scores = []\n",
    "        \n",
    "        for train_idx, val_idx in gss.split(X, y, groups):\n",
    "            model.fit(X[train_idx], y[train_idx])\n",
    "            y_pred = model.predict(X[val_idx])\n",
    "            recall = recall_score(y[val_idx], y_pred, pos_label=target_class)\n",
    "            recall_scores.append(recall)\n",
    "        \n",
    "        mean_recall = np.mean(recall_scores)\n",
    "        std_recall = np.std(recall_scores)\n",
    "        model_recalls.append((name, mean_recall, std_recall, model))\n",
    "        \n",
    "        if verbose:\n",
    "            print(f\"{name:<20} | Recall (class {target_class}): {mean_recall:.3f} ± {std_recall:.3f}\")\n",
    "        model.fit(X, y)\n",
    "    # # 4. Выбор лучшей модели\n",
    "    # best_model_info = max(model_recalls, key=lambda x: x[1])\n",
    "    # best_model = best_model_info[3]\n",
    "    \n",
    "    # # 5. Финальное обучение на всех данных\n",
    "    # best_model.fit(X, y)\n",
    "    \n",
    "    return models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn.model_selection import LeaveOneGroupOut\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.svm import SVC\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.metrics import recall_score\n",
    "\n",
    "def train_best_model_by_recall(train_matrix, target_class=1, random_state=42, verbose=True):\n",
    "    \"\"\"\n",
    "    Обучает модели и возвращает лучшую по recall для указанного класса\n",
    "    \n",
    "    Параметры:\n",
    "    train_matrix - путь к файлу с матрицей признаков\n",
    "    target_class - класс, для которого оптимизируем recall\n",
    "    random_state - для воспроизводимости\n",
    "    verbose - вывод информации о процессе обучения\n",
    "    \n",
    "    Возвращает:\n",
    "    Лучшую модель (по recall на валидации), метрики моделей\n",
    "    \"\"\"\n",
    "    \n",
    "    # 1. Загрузка данных и подготовка\n",
    "    matrix = np.load(train_matrix)\n",
    "    N = matrix.shape[0]\n",
    "    sub_num = N // 5\n",
    "\n",
    "    labels = np.zeros(N, dtype=int)\n",
    "    labels[3::5] = 1\n",
    "    \n",
    "    X = matrix\n",
    "    y = labels\n",
    "    groups = np.repeat(np.arange(sub_num), 5)\n",
    "\n",
    "    # 2. Инициализация моделей\n",
    "    models = {\n",
    "        \"Logistic Regression\": Pipeline([\n",
    "            ('scaler', StandardScaler()),\n",
    "            ('model', LogisticRegression(class_weight='balanced', \n",
    "                                       max_iter=1000, \n",
    "                                       random_state=random_state))\n",
    "        ]),\n",
    "        \"Random Forest\": RandomForestClassifier(\n",
    "            class_weight='balanced_subsample', \n",
    "            random_state=random_state\n",
    "        ),\n",
    "        \"SVM\": Pipeline([\n",
    "            ('scaler', StandardScaler()),\n",
    "            ('model', SVC(kernel='rbf', \n",
    "                         class_weight='balanced', \n",
    "                         probability=True, \n",
    "                         random_state=random_state))\n",
    "        ]),\n",
    "        \"XGBoost\": XGBClassifier(\n",
    "            scale_pos_weight=(len(y) - sum(y)) / sum(y),\n",
    "            random_state=random_state,\n",
    "            eval_metric='logloss'\n",
    "        )\n",
    "    }\n",
    "\n",
    "    # 3. Кросс-валидация с LeaveOneGroupOut\n",
    "    logo = LeaveOneGroupOut()\n",
    "    model_recalls = []\n",
    "\n",
    "    for name, model in models.items():\n",
    "        recall_scores = []\n",
    "        \n",
    "        for train_idx, val_idx in logo.split(X, y, groups=groups):\n",
    "            model.fit(X[train_idx], y[train_idx])\n",
    "            y_pred = model.predict(X[val_idx])\n",
    "            recall = recall_score(y[val_idx], y_pred, pos_label=target_class)\n",
    "            recall_scores.append(recall)\n",
    "        \n",
    "        mean_recall = np.mean(recall_scores)\n",
    "        std_recall = np.std(recall_scores)\n",
    "        model_recalls.append((name, mean_recall, std_recall, model))\n",
    "        \n",
    "        if verbose:\n",
    "            print(f\"{name:<20} | Recall (class {target_class}): {mean_recall:.3f} ± {std_recall:.3f}\")\n",
    "\n",
    "        model.fit(X,y)\n",
    "    # # 4. Выбор и финальное обучение лучшей модели\n",
    "    # best_model_info = max(model_recalls, key=lambda x: x[1])\n",
    "    # best_model = best_model_info[3].fit(X, y)  # Обучаем на всех данных\n",
    "    \n",
    "    return models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn.base import BaseEstimator, TransformerMixin\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.model_selection import LeaveOneGroupOut, GroupKFold\n",
    "from sklearn.metrics import recall_score, make_scorer\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from imblearn.pipeline import Pipeline as ImbPipeline\n",
    "from sklearn.feature_selection import SelectFromModel\n",
    "import optuna\n",
    "\n",
    "class GroupPreprocessor(BaseEstimator, TransformerMixin):\n",
    "    \"\"\"Универсальный препроцессинг для 2D данных\"\"\"\n",
    "    def __init__(self):\n",
    "        self.scalers = {}\n",
    "        self.selector = None\n",
    "\n",
    "    def fit(self, X, y=None, groups=None):\n",
    "        # Гарантируем 2D формат\n",
    "        if X.ndim != 2:\n",
    "            raise ValueError(f\"Ожидается 2D массив. Получено {X.ndim}D\")\n",
    "        \n",
    "        # Групповая стандартизация\n",
    "        unique_groups = np.unique(groups)\n",
    "        for group in unique_groups:\n",
    "            mask = groups == group\n",
    "            self.scalers[group] = StandardScaler().fit(X[mask])\n",
    "        \n",
    "        # Отбор признаков\n",
    "        self.selector = SelectFromModel(\n",
    "            LogisticRegression(penalty='l1', solver='saga')\n",
    "        ).fit(X, y)\n",
    "        \n",
    "        return self\n",
    "\n",
    "    def transform(self, X, groups=None):\n",
    "        if X.ndim != 2:\n",
    "            raise ValueError(f\"Ожидается 2D массив. Получено {X.ndim}D\")\n",
    "        \n",
    "        # Применение групповой нормализации\n",
    "        X_scaled = X.copy()\n",
    "        unique_groups = np.unique(groups)\n",
    "        for group in unique_groups:\n",
    "            mask = groups == group\n",
    "            X_scaled[mask] = self.scalers[group].transform(X[mask])\n",
    "        \n",
    "        # Отбор признаков\n",
    "        return self.selector.transform(X_scaled)\n",
    "\n",
    "def train_best_model_by_recall(train_matrix, target_class=1, random_state=42, verbose=True):\n",
    "    # 1. Загрузка и гарантия 2D формата\n",
    "    matrix = np.load(train_matrix)\n",
    "    if matrix.ndim == 3:\n",
    "        matrix = matrix.reshape(-1, matrix.shape[-1])\n",
    "    \n",
    "    # 2. Подготовка меток и групп\n",
    "    n_samples = matrix.shape[0]\n",
    "    labels = np.zeros(n_samples, dtype=int)\n",
    "    labels[3::5] = 1  # 4-й элемент в каждом блоке из 5\n",
    "    groups = np.repeat(np.arange(n_samples//5), 5)\n",
    "\n",
    "    # 3. Гарантия совпадения размеров\n",
    "    if len(groups) != n_samples:\n",
    "        raise ValueError(\n",
    "            f\"Несоответствие размеров: данные {n_samples},\" \n",
    "            f\" группы {len(groups)}\"\n",
    "        )\n",
    "\n",
    "    # 4. Определение моделей\n",
    "    models = {\n",
    "        \"Logistic Regression\": LogisticRegression(max_iter=1000),\n",
    "        \"Random Forest\": RandomForestClassifier(),\n",
    "        \"SVM\": SVC(probability=True)\n",
    "    }\n",
    "\n",
    "    # 5. Функция для оптимизации\n",
    "    def objective(trial):\n",
    "        model_name = trial.suggest_categorical(\"model\", list(models.keys()))\n",
    "        \n",
    "        # Параметры для выбранной модели\n",
    "        params = {}\n",
    "        if model_name == \"Logistic Regression\":\n",
    "            params.update({\n",
    "                'C': trial.suggest_float('C', 0.1, 10, log=True),\n",
    "                'solver': trial.suggest_categorical('solver', ['lbfgs', 'saga'])\n",
    "            })\n",
    "        elif model_name == \"Random Forest\":\n",
    "            params.update({\n",
    "                'n_estimators': trial.suggest_int('n_estimators', 100, 500),\n",
    "                'max_depth': trial.suggest_int('max_depth', 3, 20)\n",
    "            })\n",
    "        elif model_name == \"SVM\":\n",
    "            params.update({\n",
    "                'C': trial.suggest_float('C', 0.1, 10, log=True),\n",
    "                'kernel': trial.suggest_categorical('kernel', ['rbf', 'linear'])\n",
    "            })\n",
    "        \n",
    "        # Полный пайплайн\n",
    "        model = models[model_name].set_params(**params)\n",
    "        pipeline = ImbPipeline([\n",
    "            ('preproc', GroupPreprocessor()),\n",
    "            ('smote', SMOTE(random_state=random_state)),\n",
    "            ('model', model)\n",
    "        ])\n",
    "        \n",
    "        # Кросс-валидация\n",
    "        scores = []\n",
    "        for train_idx, val_idx in GroupKFold(n_splits=5).split(matrix, groups=groups):\n",
    "            pipeline.fit(matrix[train_idx], labels[train_idx])\n",
    "            y_pred = pipeline.predict(matrix[val_idx])\n",
    "            scores.append(recall_score(labels[val_idx], y_pred, pos_label=target_class))\n",
    "        \n",
    "        return np.mean(scores)\n",
    "\n",
    "    # 6. Запуск оптимизации\n",
    "    study = optuna.create_study(direction='maximize')\n",
    "    study.optimize(objective, n_trials=30, timeout=3600)  # Ограничение 1 час\n",
    "    \n",
    "    # 7. Лучшая модель\n",
    "    best_params = study.best_params\n",
    "    best_model = models[best_params['model']].set_params(**best_params)\n",
    "    \n",
    "    final_pipeline = ImbPipeline([\n",
    "        ('preproc', GroupPreprocessor()),\n",
    "        ('smote', SMOTE(random_state=random_state)),\n",
    "        ('model', best_model)\n",
    "    ]).fit(matrix, labels)\n",
    "\n",
    "    return {\n",
    "        'study': study,\n",
    "        'pipeline': final_pipeline,\n",
    "        'feature_importances': final_pipeline.named_steps['preproc'].selector.get_support()\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/pandas/core/computation/expressions.py:20: UserWarning: Pandas requires version '2.7.3' or newer of 'numexpr' (version '2.7.1' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/xgboost/core.py:265: FutureWarning: Your system has an old version of glibc (< 2.28). We will stop supporting Linux distros with glibc older than 2.28 after **May 31, 2025**. Please upgrade to a recent Linux distro (with glibc 2.28+) to use future versions of XGBoost.\n",
      "Note: You have installed the 'manylinux2014' variant of XGBoost. Certain features such as GPU algorithms or federated learning are not available. To use these features, please upgrade to a recent Linux distro with glibc 2.28+, and install the 'manylinux_2_28' variant.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n",
    "from sklearn.svm import SVC\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.model_selection import LeaveOneGroupOut, GroupKFold, GridSearchCV\n",
    "from sklearn.metrics import recall_score\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from imblearn.pipeline import Pipeline as ImbPipeline\n",
    "from sklearn.metrics import make_scorer, recall_score\n",
    "from sklearn.feature_selection import SelectFromModel\n",
    "\n",
    "def train_best_model_by_recall(train_matrix, target_class=1, random_state=42, verbose=True):\n",
    "    # 1. Загрузка и преобразование данных\n",
    "    matrix = np.load(train_matrix)\n",
    "    \n",
    "    X = matrix\n",
    "    \n",
    "    # Создание меток (пример: 1 ложный ответ на 5 вопросов)\n",
    "    labels = np.zeros(X.shape[0], dtype=int)\n",
    "    labels[3::5] = 1  # 4-й ответ в каждом блоке из 5 - ложный\n",
    "    \n",
    "    # Группы для валидации (по испытуемым)\n",
    "    groups = np.repeat(np.arange(X.shape[0] // 5), 5)\n",
    "\n",
    "    # 2. Пайплайн с обработкой\n",
    "    def create_pipeline(model):\n",
    "        return ImbPipeline([\n",
    "            ('scaler', StandardScaler()),  # Простая стандартизация\n",
    "            ('smote', SMOTE(random_state=random_state)),\n",
    "            ('feature_selector', SelectFromModel(\n",
    "                LogisticRegression(penalty='l1', solver='saga', random_state=random_state)\n",
    "            )),\n",
    "            ('model', model)\n",
    "        ])\n",
    "\n",
    "    # 3. Модели и параметры (обновленный список)\n",
    "    models = {\n",
    "        # Существующие модели с расширенными параметрами\n",
    "        \"Logistic Regression\": {\n",
    "            'pipeline': create_pipeline(LogisticRegression(max_iter=1000)),\n",
    "            'params': {\n",
    "                'model__C': [0.1, 1, 10, 100],  # Добавлен 100\n",
    "                'model__class_weight': ['balanced', None],\n",
    "                'model__solver': ['lbfgs', 'saga', 'liblinear']  # Добавлен liblinear\n",
    "            }\n",
    "        },\n",
    "        \"Random Forest\": {\n",
    "            'pipeline': create_pipeline(RandomForestClassifier()),\n",
    "            'params': {\n",
    "                'model__n_estimators': [100, 200, 300],  # Добавлен 300\n",
    "                'model__max_depth': [None, 10, 20],  # Добавлен 20\n",
    "                'model__class_weight': ['balanced_subsample', None]\n",
    "            }\n",
    "        },\n",
    "        \n",
    "        # Новые модели\n",
    "        \"SVM\": {\n",
    "            'pipeline': create_pipeline(SVC(probability=True)),  # probability=True для голосования\n",
    "            'params': {\n",
    "                'model__C': [0.1, 1, 10],\n",
    "                'model__kernel': ['linear', 'rbf'],\n",
    "                'model__class_weight': ['balanced']\n",
    "            }\n",
    "        },\n",
    "        \"XGBoost\": {\n",
    "            'pipeline': create_pipeline(XGBClassifier()),\n",
    "            'params': {\n",
    "                'model__n_estimators': [100, 200],\n",
    "                'model__max_depth': [3, 5, 7],  # Добавлена глубина 7\n",
    "                'model__learning_rate': [0.01, 0.1, 0.2],  # Добавлен 0.2\n",
    "                'model__subsample': [0.8, 1.0]  # Новый параметр\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "\n",
    "    # 4. Обучение с групповой валидацией\n",
    "    optimized_models = {}\n",
    "    recall_scorer = make_scorer(recall_score, pos_label=target_class)\n",
    "    \n",
    "    for name, config in models.items():\n",
    "        gs = GridSearchCV(\n",
    "            estimator=config['pipeline'],\n",
    "            param_grid=config['params'],\n",
    "            cv=GroupKFold(n_splits=5),\n",
    "            scoring=recall_scorer,\n",
    "            n_jobs=-1,\n",
    "            verbose=0\n",
    "        )\n",
    "        gs.fit(X, labels, groups=groups)\n",
    "        optimized_models[name] = gs.best_estimator_\n",
    "        \n",
    "        if verbose:\n",
    "            print(f\"{name} - Лучшие параметры: {gs.best_params_}\")\n",
    "            print(f\"Recall (CV): {gs.best_score_:.3f}\\n\")\n",
    "\n",
    "    # 5. Создание и оценка ансамбля\n",
    "    ensemble = VotingClassifier(\n",
    "        estimators=[(name, model) for name, model in optimized_models.items()],\n",
    "        voting='soft',\n",
    "        n_jobs=-1\n",
    "    )\n",
    "    \n",
    "    logo = LeaveOneGroupOut()\n",
    "    recall_scores = []\n",
    "    \n",
    "    for train_idx, val_idx in logo.split(X, labels, groups=groups):\n",
    "        ensemble.fit(X[train_idx], labels[train_idx])\n",
    "        y_pred = ensemble.predict(X[val_idx])\n",
    "        recall_scores.append(recall_score(labels[val_idx], y_pred, pos_label=target_class))\n",
    "    \n",
    "    if verbose:\n",
    "        print(f\"Ансамбль - Recall: {np.mean(recall_scores):.3f} ± {np.std(recall_scores):.3f}\")\n",
    "    \n",
    "    return {'models': optimized_models, 'ensemble': ensemble.fit(X, labels)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_and_predict_on_test(train_matrix, test_matrix):\n",
    "    models = train_best_model_by_recall(train_matrix)\n",
    "    model = models['ensemble']\n",
    "    matrix_test = np.load(test_matrix)\n",
    "    N_test = matrix_test.shape[0]  # Длина массива\n",
    "    sub_num_test = N_test // 5\n",
    "\n",
    "    labels_test = np.zeros(N_test, dtype=int)  # Создаем массив из нулей\n",
    "    labels_test[3::5] = 1  # Каждый 4-й элемен\n",
    "    print(model.predict(matrix_test))\n",
    "    print(classification_report(labels_test, model.predict(matrix_test)))\n",
    "    # print(models['ensemble'].predict(test_matrix))\n",
    "    return\n",
    "    # for name, model in models.items():\n",
    "    #     print(f'Model: {name}')\n",
    "    #     matrix_test = np.load(test_matrix)\n",
    "    #     N_test = matrix_test.shape[0]  # Длина массива\n",
    "    #     sub_num_test = N_test // 5\n",
    "\n",
    "    #     labels_test = np.zeros(N_test, dtype=int)  # Создаем массив из нулей\n",
    "    #     labels_test[3::5] = 1  # Каждый 4-й элемен\n",
    "    #     print(model.predict(matrix_test))\n",
    "    #     print(classification_report(labels_test, model.predict(matrix_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "proportional_train_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/proportional/raw_HC/auc.npy'\n",
    "proportional_test_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/proportional/raw_test/auc.npy'\n",
    "\n",
    "reduced_train_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/reduced_ranks/auc_raw_HC.npy'\n",
    "reduced_test_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/reduced_ranks/auc_test.npy'\n",
    "\n",
    "ranks_train_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/raw_HC/auc.npy'\n",
    "ranks_test_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/raw_test/auc.npy'\n",
    "\n",
    "# train_matrix  = '/home/aaanpilov/diploma/project/numpy_matrixes/average_stimulus/HC/max.npy'\n",
    "# test_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/average_stimulus/test/max.npy'\n",
    "\n",
    "train_matrix = proportional_train_matrix\n",
    "test_matrix = proportional_test_matrix \n",
    "\n",
    "# train_matrix = ranks_train_matrix\n",
    "# test_matrix = ranks_test_matrix\n",
    "\n",
    "# train_matrix = reduced_train_matrix\n",
    "# test_matrix = reduced_test_matrix\n",
    "\n",
    "train_matrix, test_matrix = test_matrix, train_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_different_params(train_matrix_base, test_matrix_base):\n",
    "    for func_name in funcs.keys():\n",
    "        if func_name in ('max_min', 'min', 'max'):\n",
    "            continue\n",
    "        train_matrix = os.path.join(train_matrix_base, func_name + '.npy')\n",
    "        test_matrix = os.path.join(test_matrix_base, func_name + '.npy')\n",
    "\n",
    "        # print('-'*10 + func_name + '-'*10)\n",
    "        train_and_predict_on_test(train_matrix, test_matrix)\n",
    "        # print('-' * 100, sep='\\n\\n\\n\\n\\n\\n')\n",
    "\n",
    "        # train_matrix, test_matrix = test_matrix, train_matrix\n",
    "\n",
    "        # print('TEST AND TRAIN DATA REVERT' * 10)\n",
    "        # print('-'*10 + func_name + '-'*10)\n",
    "        # train_and_predict_on_test(train_matrix, test_matrix)\n",
    "        # print('-' * 100, sep='\\n\\n\\n\\n\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Пропорциональные баллы"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cards = np.load(cards_matrix+'/auc.npy')\n",
    "\n",
    "draw_all_subjects(cards)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression - Лучшие параметры: {'model__C': 1, 'model__class_weight': 'balanced', 'model__solver': 'saga'}\n",
      "Recall (CV): 0.800\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest - Лучшие параметры: {'model__class_weight': 'balanced_subsample', 'model__max_depth': None, 'model__n_estimators': 100}\n",
      "Recall (CV): 0.583\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ансамбль - Recall: 0.706 ± 0.456\n",
      "[0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 1 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 1\n",
      " 0 1 0 1 0 0 0 0 0 0 0 1 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.88      0.90        40\n",
      "           1       0.58      0.70      0.64        10\n",
      "\n",
      "    accuracy                           0.84        50\n",
      "   macro avg       0.75      0.79      0.77        50\n",
      "weighted avg       0.85      0.84      0.85        50\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "train_matrix_base = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/proportional/raw_hc_data'\n",
    "test_matrix_base = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/proportional/raw_test_data'\n",
    "\n",
    "schz_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/proportional/raw_schz_data'\n",
    "\n",
    "cards_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/proportional/raw_card_hc_data'\n",
    "\n",
    "train_different_params(train_matrix_base, test_matrix_base)\n",
    "\n",
    "# train_different_params(test_matrix_base, cards_matrix)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Баллы по 1,2 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cards = np.load(reduced_cards_matrix_base+'/auc.npy')\n",
    "\n",
    "draw_all_subjects(cards)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression - Лучшие параметры: {'model__C': 0.1, 'model__class_weight': 'balanced', 'model__solver': 'lbfgs'}\n",
      "Recall (CV): 0.517\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest - Лучшие параметры: {'model__class_weight': 'balanced_subsample', 'model__max_depth': 10, 'model__n_estimators': 200}\n",
      "Recall (CV): 0.500\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ансамбль - Recall: 0.588 ± 0.492\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 0\n",
      " 0 0 0 0 0 0 1 0 0 0 0 1 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.95      0.90        40\n",
      "           1       0.67      0.40      0.50        10\n",
      "\n",
      "    accuracy                           0.84        50\n",
      "   macro avg       0.77      0.68      0.70        50\n",
      "weighted avg       0.82      0.84      0.82        50\n",
      "\n"
     ]
    }
   ],
   "source": [
    "reduced_train_matrix_base = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/reduced_ranks/raw_hc_data'\n",
    "reduced_test_matrix_base = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/reduced_ranks/raw_test_data'\n",
    "\n",
    "\n",
    "reduced_schz_matrix_base = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/reduced_ranks/raw_schz_data'\n",
    "\n",
    "reduced_cards_matrix_base = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/reduced_ranks/raw_card_hc_data'\n",
    "\n",
    "\n",
    "train_different_params(reduced_train_matrix_base, reduced_test_matrix_base)\n",
    "\n",
    "# train_different_params(reduced_train_matrix_base, reduced_schz_matrix_base)\n",
    "\n",
    "# train_different_params(reduced_train_matrix_base, reduced_cards_matrix_base)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Просто баллы"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-00\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-01\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-02\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-03\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-04\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-05\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-06\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-07\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-08\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-09\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-10\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-11\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-12\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-13\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-14\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-15\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sub-16\n"
     ]
    },
    {
     "data": {
      "image/png": "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zXXmzBnt2LEjx/Gy43xY2cXDzM6dO6fvvvvO7fabNm3S//73PyUlJSkoyP1X0bFjx3TgwAHNmDFDe/bsUYsWLSzbHD9+3GW/TU1NtWzj6T5x0V9//aV27dqpWLFimj9/vsLDwx3rcmOfBYCrDYdIAQXc7t27tX37dsehNVkdPXrU69h///23yyE2Wf355586c+aMatSoYVlXq1Yt2e12/f7777rmmmsc7ddff73j77CwME2aNEk33HCDo+348eMaM2aMPvnkE0vuzv98Nm7cWJI0bNgwJSUlXfL5X87TTz/tOMTmzJkzbreZOXOmXnvtNe3YsUPnz593tFeuXNmybbVq1Sxt1atX1+zZs3Oc2y+//KJnnnlGS5cutfzD6+6fcF8EBQW5/LMt/ZO3JMeckKyefPJJNW/eXJ06dXI75yU9Pd3xmthsNj311FMaNmyYZTt3+05Wnu4TF3Xq1Ek7d+5UmTJlLCdGyI19FgCuNgwwgALObrerdu3aGj9+vNv1FSpU8Dr24cOHFRMT4/X93fnwww9VtmxZpaena+nSpRo4cKDCw8Mdk4R79OihNWvWaNiwYapbt66KFi0qu92u9u3by263O+I0adJEr7zyisaMGaPExESvclm/fr1mzJihSZMm6cEHH1RycrJLxebDDz9Unz591K1bNw0bNkxlypRRoUKFlJSUpF9//dWnfricv//+Wy1btlRkZKTGjh2rqlWrKjw8XJs3b9bw4cNd+iE/fPvtt/ruu++0du3aS24TGhqqxYsX68yZM/r+++/10ksvqUKFCurfv7/Ldp9//rkiIyMdy7t27dLAgQNdtvF0n7hox44d+uabb9SjRw899thjmj59uk/PN7t9FgCuNgwwgAKuatWq2rJli26++eZLTnb11rZt21x+vc2qdOnSKly4sHbu3GlZt2PHDgUFBVkGOE2bNnWcsapTp0765ZdflJSUpD59+ujEiRNasmSJxowZ4zIZeffu3W4f//HHH9fu3bv1+eef64MPPlBoaKj+9a9/efz8xowZo969e6tu3bpq0KCBnnvuOY0bN86x/rPPPlOVKlU0Z84cl74dPXq023ju8ty1a5fbM3RdzvLly/XXX39pzpw5LocVpaSk5CiOp+x2u/bu3euoWkj/5C3JkrsxRk8++aS6d+/uOEzJnaCgIMck6C5duuj48eMaNWqUZYDR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4wZ5c6fly5dr+fLlWr16tX766Sf99ddf2r17twoXLqzHHnvM62QAAACAfGdy8RZAPvroI73zzjt67LHHFBwcrLvuukvvvvuuRo0apXXr1nkd16sBhjtVq1bVxIkTdfDgQX+FBAAAAJBLDh8+rNq1a0uSihYtqtTUVElSp06d9NVXX3kd16sBxunTp922N2jQQCtXrvQ6GQAAACDfFZAKRlxcnP744w9J/xQLvv32W0nSDz/8oLCwMK/jejXAKFu2rPr27atVq1Z5/cAAAAAA8k/37t21ZMkSSdIjjzyikSNHqlq1aurVq5f69u3rdVyvJnl/+OGHmjFjhlq3bq1KlSqpb9++6tWrF5O7AQAAcOUrIKepffHFFx1/33nnnapYsaLWrl2ratWqqXPnzl7H9aqC0a1bN82dO1cHDx7UgAEDNGvWLMXHx6tTp06aM2eOLly44HVCAAAAAPJe48aNNXToUJ8GF5KPk7xLly6toUOHauvWrRo/fry+++473X777YqNjdWoUaN05swZn5IDAAAA8prN5N4tv+3atctleevWrerVq5caNGighg0bqnfv3vr55599egyfBhhHjhzRyy+/rMTERD355JO6/fbbtWTJEr322muaM2eOunXr5lNyAAAAAPzjwoULuvbaa/X7779LkubPn6/rr79ef/zxhzp37qxOnTrp0KFDqlevnhYsWOD143g1B2POnDmaPn26Fi1apMTERD388MO69957Vbx4ccc2TZo0Ua1atbxODAAAAMgXAVBpyA3BwcGKjIzU+fPnJUnPPPOMRo4cqdGjR7ts9+yzz+qZZ55Rp06dvHocryoY999/v2JjY7V69WolJydr0KBBLoMLSYqNjdXTTz/tVVIAAAAA/K9s2bL666+/JEm7d+/WPffcY9nmnnvu0Y4dO7x+DK8qGH/88YcKFy582W0iIiIsoyEAAAAA+adly5Z677331LBhQ1WoUEGbN29WQkKCyzabN29W6dKlvX4MrwYYx44du+z6ihUrepUMAAAAkN8CYTJ2bnn88cfVoEEDlSlTRt27d1f//v2VkpKiJk2aSJJWr16tl156SYMHD/b6MbwaYFSqVEk22z/nBzbGWP7OzMz0ONbZs2e1adMmRUdHKzEx0WVdenq6Zs+erV69el3y/hkZGcrIyHBps1+4oKBgr54aAAAAcNWqUqWKVq9e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6JZbblHPnj313//+V0lJSbLb7br11ls1duxYBQdf+eO8DRs2WAZ2jRs31g033OBT3NatW2v69Ok5vmLlli1btGnTJrVq1UpVqlTRL7/8osmTJ8tut6t79+5q166dT3kFgtzqc4l+v5Rz585p7ty5bn/E6Nq1q0JDQ32KX6VKFS1atEjVqlXL0f0WLFigDRs2qF27dmratKmWLl2qV1991fE58+CDD/qUV34rKP1+4MABFS9eXEWLFnVpP3/+vNauXasWLVpke//w8HCVKlVKkvT9999r6tSp2r9/v+Lj4zVw4EA1btw4RzlJ0uHDh7V+/XqXvm/UqJFiYmJyHCur+++/X88//7xiY2N9jnW1od9xJbtqBhg33nij6tSpo6lTp8pms7msM8ZowIAB2rp1q9auXXvZOEFBQapTp46KFy/u0r5ixQo1aNBARYoUkc1m09KlS7PN6bnnntPLL7+stm3bavXq1RoyZIheeeUVPfroowoKCtLrr7+uhx56SGPGjMnRcw2kL6GjR4/qtttu0+rVq1WxYkWXgd3+/fvVtGlTff755ypTpsxl48yfP99t+6233qqJEyeqQoUKkqQuXbpkm9OcOXPUo0cPFS9eXBkZGfriiy90xx13qEGDBipUqJC+++47ffDBB7r77rs9eo6SZLfbFRRkPaLQbrfrwIEDqlixYrYxMjIyFBQUpJCQEEnSr7/+qvfff9/R7w888IAqV66cbRx/9blEv+ek3/fs2aN27drp0KFDatSokUu/r1+/XnFxcfrmm2+UkJCQbaw33njDbfvQoUP1xBNPOP6BGDx4cLax3n77bQ0aNEh16tTR7t27NXnyZD388MO68847VahQIX3wwQdKSkrSf/7zn2xjXUS/522///HHH+ratas2bdokm82mu+++W2+99ZbjM/7IkSOKjY1VZmbmZeM0atRII0eOVKdOnTRv3jzdeuut6tSpk2rVqqVdu3ZpwYIFmjNnjjp16pRtTpJ0+vRp9e/fX5988olsNpuio6MlScePH5cxRnfddZfefvttFS5cONtYW7duddveoEEDzZ49W1WqVJEkXXfdddnGOnr0qH7++WfVr19fUVFROnLkiGbOnCm73a6OHTuqdu3aHj2/iwJpf5cKTr/jKmeuEuHh4Wb79u2XXL99+3YTHh6ebZykpCRTuXJls2TJEpf24OBg88sv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HtOkSRPz999/G2P+mYDZpk0bc9ddd+VprIiICMdx8PXq1XNcZO2ijz76yCQmJnqUU6DGstls5rvvvjP/+c9/TKlSpUxISIjp0qWL+fLLL01mZqZHMfwdy58XLA3UWBEREebXX391LGdmZpqQkBBz+PBhY4wx3377rYmNjc2zOBf58yKH/orlz4FKdvz1o11OY/nrmlf+jOXvgQqufgwwriD+uuqyP6/eXKZMGZeLqdntdjNgwABTsWJF8+uvv3r8oeOvOP6OFRkZ6fiyunhqP+dTB/7000+mbNmyeR7LXxeDDNRYzoOCKlWqmG+//dZl/erVq02FChXyNFbJkiUd1/koU6aM2/Pce3rBt0CN5dxX586dM59++qlp166dKVSokImNjTVPPfWUx/+8+SuWPy9YGqix4uPjzapVqxzLhw4dMjabzZw5c8YY889F+8LDw/MszkX+vMihv2L5c9CzZcuWy94+/fRTj78r/BnLX9e88mcsfw56UDAE5fchWvBcuXLlNGfOHNntdre3zZs352kc6Z+5Ds7HGNtsNk2ZMkWdO3dWy5YttWvXrjyN4+9YF+8vSUFBQQoPD1dUVJRjXbFixZSamprnsRo2bKhNmzbpzz//VIMGDfTzzz87YudUoMa6eL/09HSVK1fOZV358uX1559/5mmsDh06aMqUKZKkli1b6rPPPnNZP3v2bCUkJHiUT6DGchYSEqIePXpo4cKF2rt3r/r166ePPvpINWrUyNNYMTEx2rZtmyRp9+7dyszMdCxL0i+//KIyZcp4lEegxurWrZsGDBighQsXatmyZbrnnnvUsmVLRURESJJ27typ8uXL51mci4oXL659+/Zdcv2+fftUvHjxPI21evVqPffcc25PdhIZGalx48bp+++/9yinunXrql69eqpbt67lVq9ePY/nLvk7VmpqqkqUKOFYDgsL05w5c1SpUiXddNNNOnr0aJ7H+u677/TGG2+oQYMGatOmjVavXq1y5cqpdevWOn78uCR5/VmPq1R+j3Dguc6dO5uRI0decn1ycrJHvyD4K44xxjRs2NB88MEHbtcNHDjQFC9e3KNfR/wVx9+xrrvuOsfV2I0xltOtrly50lSuXDnPYznz5WKQgRrLZrOZ2rVrm3r16pmiRYtarv+yYsUKU758+TyNdfDgQVOpUiXTokULM3ToUBMREWGaNWtm+vXrZ1q0aGFCQ0PdnlP/SorlXHVwx263WypAuR3LnxcsDdRYJ0+eND169HBcJLZJkyYu84IWLVpkZs+enWdxLvLnRQ79FcufV3YvWbKkee+998y+ffvc3r766iuPvyv8Gctf17zyZyx/XegXBQcDjCvIypUrXf5BzerUqVNm+fLleRbHGGNeeOEF06FDh0uuf+ihhzwarPgrjr9jTZkyxSxYsOCS60eMGGEeeOCBPI+VlbcXgwzUWM8++6zLbeHChS7rH3/8cdOzZ888j3XixAkzfPhwk5iYaMLDw01oaKiJj483d999t/nhhx88e3IBHKtSpUrm2LFjOXrs3I7lzwuWBmqsi86ePet2Am1O+SuOMf69yKE/Yvlz0NO2bVszbty4S67PyY9t/ozlz2te+SuWPwc9KBg4TS0AALislJQUl1PLXjwtcn7EeumllzRx4kQdPnzYcViOMUYxMTEaMmSInnjiCY/ifPHFFzp9+rTuvfdet+tPnDih+fPnq3fv3nkay5/XvPJXrOHDhys5OVmLFi1yG+O2227Tl19+Kbvdnm1OKBgYYAAAgBzz17WXvI3lz0HPlSQ/+j03LvSLqxuTvAEAQI4dP35cM2fOzLdYlStXVuPGjdW4cWPH4OL3339X3759/ZJToMbKj34PDg6+5OBC+ucK8mPGjPFLTrg6eHa5UgAAUKDMnz//suv37t2bL7Eu5+I/zP74dT+/YhX0fsfVgQEGAACw6Natm2w2my53JLWnpyb1V6xA/efbn7Gu9n5HwcAcDAAAYFG+fHm99dZb6tq1q9v1ycnJql+/vjIzM/MsVlBQkEf/MHuSU6DGutr7HQUDczAAAIBF/fr1tWnTpkuuz+4fztyI5c8LxQZqrKu931EwMMAAAAAWw4YNU5MmTS65PiEhQcuWLcvTWIH4z7e/Y13t/Y6CgUOkAADAFeH777/X6dOn1b59e7frT58+rY0bN6ply5ZXbKxAdLU/P/gfAwwAAAAAfsMhUgAAAAD8hgEGAAAAAL9hgAEAAADAbxhgAAAAAPAbBhgAkEN9+vSRzWaTzWZTaGioEhISNHbsWF24cCG/UwMAIN8F53cCAHAlat++vaZPn66MjAx9/fXXGjhwoEJCQjRixIj8Tg0AgHxFBQMAvBAWFqaYmBjFx8froYceUps2bTR//nxJ0qpVq9S8eXNFRESoQoUKGjx4sE6fPu24b6VKlRwVkIu3xx9/XJL07LPPqm7duo5tz507p4SEBNlsNv3999+O9s8//1zXXHONwsLCVKlSJb322msu+VWqVEkTJkxwaevTp4+6devmWG7VqpWGDBni9vkNGTJErVq1ynG/AADAAAMA/CAiIkLnzp3Tr7/+qvbt2+u2227T1q1b9emnn2rVqlUaNGiQy/Zjx47VH3/84biNHj3abdxJkybpyJEjLm2bNm1Sjx491LNnT/3000969tlnNXLkSM2YMSO3nh4AAB5jgAEAPjDG6LvvvtOiRYvUunVrJSUl6Z577tGQIUNUrVo1NWnSRG+88YY++OADpaenO+5XrFgxxcTEOG7FihWzxD5+/Liee+45DR8+3KV9/PjxuvnmmzVy5EhVr15dffr00aBBg/TKK6/k+vMFACA7DDAAwAsLFixQ0aJFFR4erg4dOujOO+/Us88+qy1btmjGjBkqWrSo49auXTvZ7XalpKTk6DHGjh2rm266Sc2aNXNp3759u5o2berS1rRpU+3evVuZmZmOtuHDh7vk8dFHH1ke46233lLRokVVsmRJNWrUSF9++WWOcgQAICsmeQOAF2666SZNmTJFoaGhio2NVXDwPx+np06dUv/+/TV48GDLfSpWrOhx/N27d+vdd99VcnKyDhw44FWOw4YNU58+fRzLw4cPdxmASNI999yjp59+WhkZGZo+fbpuv/127d2716vHAwBAYoABAF4pUqSIEhISLO3XX3+9tm3b5nZdTgwfPlz//ve/lZCQYBlg1KpVS6tXr3ZpW716tapXr65ChQo52kqVKuWSR7FixVwmiktSVFSUY5sxY8botdde0/bt233KHQBQsDHAAAA/Gj58uG688UYNGjRI//73v1WkSBFt27ZNixcv1qRJkzyKsWfPHu3fv1979uxxu/6xxx5Tw4YNNW7cON15551au3atJk2apLfeeivH+WZmZio9PV0ZGRl67733FBISoho1amjBggU5jgUAgMQcDADwq+uuu04rVqzQrl271Lx5c9WrV0+jRo1SbGysxzFOnz6tp59+WtHR0W7XX3/99Zo9e7Y++eQTXXvttRo1apTGjh3rcjiUpyZNmqSIiAiVKVNG77//vj766CNVqFAhx3EAALjIZowx+Z0EAAAAgKsDFQwAAAAAfsMAAwAAAIDfMMAAAAAA4DcMMAAAAAD4DQMMAAAAAH7DAAMAAACA3zDAAAAAAOA3DDAAAAAA+A0DDAAAAAB+wwADAAAAgN8wwAAAAADgNwwwAAAAAPjN/wM409ssG/2b6QAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from yaml import safe_load\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def draw_all_subjects(matrix):\n",
    "    N = matrix.shape[0]  # Длина массива\n",
    "    sub_num = N // 5\n",
    "\n",
    "    subjects = np.array_split(matrix, sub_num)\n",
    "    def draw_heat_map(data):\n",
    "        '''\n",
    "            Создает тепловую карту для данных размера (x, 132)\n",
    "        '''\n",
    "        plt.figure(figsize=(10, 6))  # Задаем размер графика\n",
    "        sns.heatmap(data, cmap='viridis', cbar_kws={'label': 'Сумма баллов'})  # 'viridis' — цветовая карта\n",
    "        plt.title('Тепловая карта признаков')\n",
    "        plt.xlabel('Регионы')\n",
    "        plt.ylabel('Стимулы')\n",
    "        plt.show()\n",
    "    for idx, sub in enumerate(subjects):\n",
    "        print(f'sub-{idx:02d}')\n",
    "        draw_heat_map(subjects[idx])\n",
    "\n",
    "cards = np.load(ranks_train_matrix+'/auc.npy')\n",
    "\n",
    "draw_all_subjects(cards)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'train_different_params' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[1], line 12\u001b[0m\n\u001b[1;32m      6\u001b[0m ranks_card_hc_matrix \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/raw_card_hc_data\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;66;03m# train_different_params(ranks_test_matrix, ranks_train_matrix)\u001b[39;00m\n\u001b[1;32m      9\u001b[0m \u001b[38;5;66;03m# print('SCHZ'*30)\u001b[39;00m\n\u001b[1;32m     10\u001b[0m \u001b[38;5;66;03m# train_different_params(ranks_test_matrix, ranks_schz_matrix)\u001b[39;00m\n\u001b[0;32m---> 12\u001b[0m \u001b[43mtrain_different_params\u001b[49m(ranks_train_matrix, ranks_card_hc_matrix)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'train_different_params' is not defined"
     ]
    }
   ],
   "source": [
    "ranks_train_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/raw_hc_data'\n",
    "ranks_test_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/raw_test_data'\n",
    "\n",
    "ranks_schz_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/raw_schz_data'\n",
    "\n",
    "ranks_card_hc_matrix = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/raw_card_hc_data'\n",
    "\n",
    "# train_different_params(ranks_test_matrix, ranks_train_matrix)\n",
    "# print('SCHZ'*30)\n",
    "# train_different_params(ranks_test_matrix, ranks_schz_matrix)\n",
    "\n",
    "train_different_params(ranks_train_matrix, ranks_card_hc_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cards = np.load(test_matrix_base+'/auc.npy')\n",
    "\n",
    "draw_all_subjects(cards)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression - Лучшие параметры: {'model__C': 0.1, 'model__class_weight': 'balanced', 'model__solver': 'lbfgs'}\n",
      "Recall (CV): 0.600\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest - Лучшие параметры: {'model__class_weight': None, 'model__max_depth': None, 'model__n_estimators': 100}\n",
      "Recall (CV): 0.667\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ансамбль - Recall: 0.647 ± 0.478\n",
      "[0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 1 0\n",
      " 0 1 0 0 0 0 0 0 0 0 0 1 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.97      0.95        40\n",
      "           1       0.88      0.70      0.78        10\n",
      "\n",
      "    accuracy                           0.92        50\n",
      "   macro avg       0.90      0.84      0.86        50\n",
      "weighted avg       0.92      0.92      0.92        50\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "train_matrix_base = '/home/aaanpilov/diploma/project/numpy_matrixes/average_stimulus/hc_data'\n",
    "test_matrix_base = '/home/aaanpilov/diploma/project/numpy_matrixes/average_stimulus/test_data'\n",
    "\n",
    "schz_matrix_base = '/home/aaanpilov/diploma/project/numpy_matrixes/average_stimulus/schz_data'\n",
    "card_train_matrix_base = '/home/aaanpilov/diploma/project/numpy_matrixes/average_stimulus/card_hc_data'\n",
    "card_test_matrix_base = '/home/aaanpilov/diploma/project/numpy_matrixes/average_stimulus/card_test_data'\n",
    "\n",
    "# train_different_params(train_matrix_base, card_train_matrix_base)\n",
    "# print('SCHZ'*20)\n",
    "train_different_params(train_matrix_base, test_matrix_base)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_matrix_base = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/prizes/HC'\n",
    "test_matrix_base = '/home/aaanpilov/diploma/project/numpy_matrixes/ranks_matrix/prizes/test'\n",
    "\n",
    "\n",
    "train_different_params(train_matrix_base, test_matrix_base)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------auc----------\n",
      "Logistic Regression  | Recall (class 1): 0.294 ± 0.456\n",
      "Random Forest        | Recall (class 1): 0.000 ± 0.000\n",
      "SVM                  | Recall (class 1): 0.206 ± 0.404\n",
      "XGBoost              | Recall (class 1): 0.059 ± 0.235\n",
      "Model: Logistic Regression\n",
      "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 1 0 1 0 0 0\n",
      " 0 0 1 1 0 0 0 0 0 0 1 0 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      0.85      0.84        40\n",
      "           1       0.33      0.30      0.32        10\n",
      "\n",
      "    accuracy                           0.74        50\n",
      "   macro avg       0.58      0.57      0.58        50\n",
      "weighted avg       0.73      0.74      0.73        50\n",
      "\n",
      "Model: Random Forest\n",
      "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      1.00      0.89        40\n",
      "           1       0.00      0.00      0.00        10\n",
      "\n",
      "    accuracy                           0.80        50\n",
      "   macro avg       0.40      0.50      0.44        50\n",
      "weighted avg       0.64      0.80      0.71        50\n",
      "\n",
      "Model: SVM\n",
      "[0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 0 1\n",
      " 0 0 1 1 0 0 0 0 0 0 0 0 1]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.78      0.70      0.74        40\n",
      "           1       0.14      0.20      0.17        10\n",
      "\n",
      "    accuracy                           0.60        50\n",
      "   macro avg       0.46      0.45      0.45        50\n",
      "weighted avg       0.65      0.60      0.62        50\n",
      "\n",
      "Model: XGBoost\n",
      "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0\n",
      " 0 0 0 1 0 0 0 0 0 0 0 0 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.81      0.95      0.87        40\n",
      "           1       0.33      0.10      0.15        10\n",
      "\n",
      "    accuracy                           0.78        50\n",
      "   macro avg       0.57      0.53      0.51        50\n",
      "weighted avg       0.71      0.78      0.73        50\n",
      "\n",
      "----------------------------------------------------------------------------------------------------\n",
      "----------max----------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression  | Recall (class 1): 0.235 ± 0.424\n",
      "Random Forest        | Recall (class 1): 0.000 ± 0.000\n",
      "SVM                  | Recall (class 1): 0.029 ± 0.169\n",
      "XGBoost              | Recall (class 1): 0.000 ± 0.000\n",
      "Model: Logistic Regression\n",
      "[0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 1 1 0 0 0 1 0 1 1 0 0 0 0 1 0 0 0\n",
      " 0 0 0 1 0 0 0 0 0 0 1 0 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.82      0.80      0.81        40\n",
      "           1       0.27      0.30      0.29        10\n",
      "\n",
      "    accuracy                           0.70        50\n",
      "   macro avg       0.55      0.55      0.55        50\n",
      "weighted avg       0.71      0.70      0.71        50\n",
      "\n",
      "Model: Random Forest\n",
      "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      1.00      0.89        40\n",
      "           1       0.00      0.00      0.00        10\n",
      "\n",
      "    accuracy                           0.80        50\n",
      "   macro avg       0.40      0.50      0.44        50\n",
      "weighted avg       0.64      0.80      0.71        50\n",
      "\n",
      "Model: SVM\n",
      "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.81      0.95      0.87        40\n",
      "           1       0.33      0.10      0.15        10\n",
      "\n",
      "    accuracy                           0.78        50\n",
      "   macro avg       0.57      0.53      0.51        50\n",
      "weighted avg       0.71      0.78      0.73        50\n",
      "\n",
      "Model: XGBoost\n",
      "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      0.97      0.88        40\n",
      "           1       0.00      0.00      0.00        10\n",
      "\n",
      "    accuracy                           0.78        50\n",
      "   macro avg       0.40      0.49      0.44        50\n",
      "weighted avg       0.64      0.78      0.70        50\n",
      "\n",
      "----------------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "train_matrix_base = '/home/aaanpilov/diploma/project/numpy_matrixes/average_stimulus/card_hc_data'\n",
    "test_matrix_base = '/home/aaanpilov/diploma/project/numpy_matrixes/average_stimulus/card_test_data'\n",
    "for func_name in funcs.keys():\n",
    "    if func_name in ('max_min', 'min'):\n",
    "        continue\n",
    "    train_matrix = os.path.join(train_matrix_base, func_name + '.npy')\n",
    "    test_matrix = os.path.join(test_matrix_base, func_name + '.npy')\n",
    "\n",
    "    print('-'*10 + func_name + '-'*10)\n",
    "    train_and_predict_on_test(train_matrix, test_matrix)\n",
    "    print('-' * 100, sep='\\n\\n\\n\\n\\n\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

==================================================

📄 notebooks/train_on_average.ipynb
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn.model_selection import LeaveOneGroupOut\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.metrics import accuracy_score, classification_report, recall_score\n",
    "\n",
    "def train_best_model(X):\n",
    "    \"\"\"\n",
    "    Обучает и выбирает лучшую модель на основе кросс-валидации с учетом групп\n",
    "    Возвращает обученную модель с наивысшим recall для класса 1\n",
    "    \n",
    "    Параметры:\n",
    "    X - матрица признаков (n_samples, n_features)\n",
    "    y - вектор меток (n_samples,)\n",
    "    groups - вектор групп для кросс-валидации (n_samples,)\n",
    "    \"\"\"\n",
    "    n_subs = X.shape[0]\n",
    "    print(X.shape)\n",
    "    y = np.array([0]*(n_subs//2) + [1]*(n_subs//2))\n",
    "    groups = np.repeat(np.arange(n_subs//2), 2)\n",
    "    models = {\n",
    "        'Logistic Regression (L1)': make_pipeline(\n",
    "            StandardScaler(),\n",
    "            LogisticRegression(penalty='l1', solver='saga', max_iter=10000, random_state=42)\n",
    "        ),\n",
    "        'Linear SVM': make_pipeline(\n",
    "            StandardScaler(),\n",
    "            SVC(kernel='linear', random_state=42)\n",
    "        ),\n",
    "        'Random Forest': RandomForestClassifier(n_estimators=100, max_depth=3, random_state=42),\n",
    "        'Gradient Boosting': GradientBoostingClassifier(n_estimators=50, learning_rate=0.1, max_depth=2, random_state=42),\n",
    "        'SVM (RBF)': make_pipeline(\n",
    "            StandardScaler(),\n",
    "            SVC(kernel='rbf', random_state=42)\n",
    "        ),\n",
    "        'MLP': make_pipeline(\n",
    "            StandardScaler(),\n",
    "            MLPClassifier(hidden_layer_sizes=(50,), alpha=0.01, max_iter=1000, random_state=42)\n",
    "        )\n",
    "    }\n",
    "\n",
    "    logo = LeaveOneGroupOut()\n",
    "    best_recall = 0\n",
    "    best_model = None\n",
    "    best_model_name = ''\n",
    "\n",
    "    # Перебор моделей и выбор лучшей по recall класса 1\n",
    "    for model_name, model in models.items():\n",
    "        recalls = []\n",
    "        for train_idx, test_idx in logo.split(X, y, groups):\n",
    "            X_train, X_test = X[train_idx], X[test_idx]\n",
    "            y_train, y_test = y[train_idx], y[test_idx]\n",
    "            \n",
    "            model.fit(X_train, y_train)\n",
    "            y_pred = model.predict(X_test)\n",
    "            recalls.append(recall_score(y_test, y_pred, pos_label=1))  # focus on recall for class 1\n",
    "        \n",
    "        mean_recall = np.mean(recalls)\n",
    "        print(f'{model_name} - Средний recall класса 1: {mean_recall:.3f}')\n",
    "        \n",
    "        if mean_recall > best_recall:\n",
    "            best_recall = mean_recall\n",
    "            best_model = model\n",
    "            best_model_name = model_name\n",
    "\n",
    "\n",
    "    best_model = models['Gradient Boosting']\n",
    "    # Финалное обучение лучшей модели на всех данных\n",
    "    print(f'\\nЛучшая модель: {best_model_name} с recall класса 1: {best_recall:.3f}')\n",
    "    best_model.fit(X, y)\n",
    "    \n",
    "    return best_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_path = '/home/aaanpilov/diploma/project/numpy_matrixes/average_matrix/test/'\n",
    "train_path = '/home/aaanpilov/diploma/project/numpy_matrixes/average_matrix/HC/'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "auc\n",
      "(34, 132)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression (L1) - Средний recall класса 1: 0.500\n",
      "Linear SVM - Средний recall класса 1: 0.471\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest - Средний recall класса 1: 0.441\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gradient Boosting - Средний recall класса 1: 0.471\n",
      "SVM (RBF) - Средний recall класса 1: 0.529\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MLP - Средний recall класса 1: 0.382\n"
     ]
    },
    {
     "ename": "KeyError",
     "evalue": "'SVM (RBF)'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/sklearn/pipeline.py:265\u001b[0m, in \u001b[0;36mPipeline.__getitem__\u001b[0;34m(self, ind)\u001b[0m\n\u001b[1;32m    264\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 265\u001b[0m     name, est \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msteps\u001b[49m\u001b[43m[\u001b[49m\u001b[43mind\u001b[49m\u001b[43m]\u001b[49m\n\u001b[1;32m    266\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[1;32m    267\u001b[0m     \u001b[38;5;66;03m# Not an int, try get step by name\u001b[39;00m\n",
      "\u001b[0;31mTypeError\u001b[0m: list indices must be integers or slices, not str",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[22], line 7\u001b[0m\n\u001b[1;32m      5\u001b[0m matrix \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mload(train_path \u001b[38;5;241m+\u001b[39m option \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m.npy\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      6\u001b[0m matrix_test \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mload(test_path \u001b[38;5;241m+\u001b[39m option \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m.npy\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m----> 7\u001b[0m model \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_best_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmatrix\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      9\u001b[0m n_test \u001b[38;5;241m=\u001b[39m matrix_test\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m0\u001b[39m]    \n\u001b[1;32m     10\u001b[0m labels_test \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marray([\u001b[38;5;241m0\u001b[39m] \u001b[38;5;241m*\u001b[39m (n_test\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m2\u001b[39m) \u001b[38;5;241m+\u001b[39m [\u001b[38;5;241m1\u001b[39m] \u001b[38;5;241m*\u001b[39m (n_test\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m2\u001b[39m))\n",
      "Cell \u001b[0;32mIn[20], line 72\u001b[0m, in \u001b[0;36mtrain_best_model\u001b[0;34m(X)\u001b[0m\n\u001b[1;32m     68\u001b[0m         best_model \u001b[38;5;241m=\u001b[39m model\n\u001b[1;32m     69\u001b[0m         best_model_name \u001b[38;5;241m=\u001b[39m model_name\n\u001b[0;32m---> 72\u001b[0m best_model \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mSVM (RBF)\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\n\u001b[1;32m     73\u001b[0m \u001b[38;5;66;03m# Финалное обучение лучшей модели на всех данных\u001b[39;00m\n\u001b[1;32m     74\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mЛучшая модель: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mbest_model_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m с recall класса 1: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mbest_recall\u001b[38;5;132;01m:\u001b[39;00m\u001b[38;5;124m.3f\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m)\n",
      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/sklearn/pipeline.py:268\u001b[0m, in \u001b[0;36mPipeline.__getitem__\u001b[0;34m(self, ind)\u001b[0m\n\u001b[1;32m    265\u001b[0m     name, est \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msteps[ind]\n\u001b[1;32m    266\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[1;32m    267\u001b[0m     \u001b[38;5;66;03m# Not an int, try get step by name\u001b[39;00m\n\u001b[0;32m--> 268\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mnamed_steps\u001b[49m\u001b[43m[\u001b[49m\u001b[43mind\u001b[49m\u001b[43m]\u001b[49m\n\u001b[1;32m    269\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m est\n",
      "\u001b[0;31mKeyError\u001b[0m: 'SVM (RBF)'"
     ]
    }
   ],
   "source": [
    "options = ['auc', 'max', 'min', 'max_min']\n",
    "\n",
    "for option in options:\n",
    "    print(option)\n",
    "    matrix = np.load(train_path + option + '.npy')\n",
    "    matrix_test = np.load(test_path + option + '.npy')\n",
    "    model = train_best_model(matrix)\n",
    "\n",
    "    n_test = matrix_test.shape[0]    \n",
    "    labels_test = np.array([0] * (n_test//2) + [1] * (n_test//2))\n",
    "    print(classification_report(labels_test, model.predict(matrix_test)))\n",
    "    print(model.predict(matrix_test))\n",
    "    break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(34, 132)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression (L1) - Средний recall класса 1: 0.500\n",
      "Linear SVM - Средний recall класса 1: 0.471\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest - Средний recall класса 1: 0.441\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gradient Boosting - Средний recall класса 1: 0.471\n",
      "SVM (RBF) - Средний recall класса 1: 0.529\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MLP - Средний recall класса 1: 0.382\n",
      "\n",
      "Лучшая модель: SVM (RBF) с recall класса 1: 0.529\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.53      1.00      0.69        10\n",
      "           1       1.00      0.10      0.18        10\n",
      "\n",
      "    accuracy                           0.55        20\n",
      "   macro avg       0.76      0.55      0.44        20\n",
      "weighted avg       0.76      0.55      0.44        20\n",
      "\n",
      "[0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.47      0.80      0.59        10\n",
      "           1       0.33      0.10      0.15        10\n",
      "\n",
      "    accuracy                           0.45        20\n",
      "   macro avg       0.40      0.45      0.37        20\n",
      "weighted avg       0.40      0.45      0.37        20\n",
      "\n",
      "[1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.47      0.90      0.62        10\n",
      "           1       0.00      0.00      0.00        10\n",
      "\n",
      "    accuracy                           0.45        20\n",
      "   macro avg       0.24      0.45      0.31        20\n",
      "weighted avg       0.24      0.45      0.31        20\n",
      "\n",
      "[0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      1.00      0.91        10\n",
      "           1       1.00      0.80      0.89        10\n",
      "\n",
      "    accuracy                           0.90        20\n",
      "   macro avg       0.92      0.90      0.90        20\n",
      "weighted avg       0.92      0.90      0.90        20\n",
      "\n",
      "[0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 0 1 0 1 1]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.62      1.00      0.77        10\n",
      "           1       1.00      0.40      0.57        10\n",
      "\n",
      "    accuracy                           0.70        20\n",
      "   macro avg       0.81      0.70      0.67        20\n",
      "weighted avg       0.81      0.70      0.67        20\n",
      "\n",
      "[0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0]\n"
     ]
    }
   ],
   "source": [
    "train_path = '/home/aaanpilov/diploma/project/numpy_matrixes/average_matrix/HC/auc.npy'\n",
    "test_path = '/home/aaanpilov/diploma/project/numpy_matrixes/average_matrix/propose/test/auc'\n",
    "\n",
    "matrix = np.load(train_path)\n",
    "model = train_best_model(matrix)\n",
    "\n",
    "for k in range(5):\n",
    "    matrix_test = np.load(test_path + str(k) + '.npy')\n",
    "    n_test = matrix_test.shape[0]    \n",
    "    labels_test = np.array([0] * (n_test//2) + [1] * (n_test//2))\n",
    "    print(classification_report(labels_test, model.predict(matrix_test)))\n",
    "    print(model.predict(matrix_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(20, 132)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression (L1) - Средний recall класса 1: 0.300\n",
      "Linear SVM - Средний recall класса 1: 0.450\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest - Средний recall класса 1: 0.350\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gradient Boosting - Средний recall класса 1: 0.450\n",
      "SVM (RBF) - Средний recall класса 1: 0.450\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 due to no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MLP - Средний recall класса 1: 0.350\n",
      "\n",
      "Лучшая модель: Linear SVM с recall класса 1: 0.450\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.50      1.00      0.67        17\n",
      "           1       0.00      0.00      0.00        17\n",
      "\n",
      "    accuracy                           0.50        34\n",
      "   macro avg       0.25      0.50      0.33        34\n",
      "weighted avg       0.25      0.50      0.33        34\n",
      "\n",
      "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.52      0.94      0.67        17\n",
      "           1       0.67      0.12      0.20        17\n",
      "\n",
      "    accuracy                           0.53        34\n",
      "   macro avg       0.59      0.53      0.43        34\n",
      "weighted avg       0.59      0.53      0.43        34\n",
      "\n",
      "[0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.53      1.00      0.69        17\n",
      "           1       1.00      0.12      0.21        17\n",
      "\n",
      "    accuracy                           0.56        34\n",
      "   macro avg       0.77      0.56      0.45        34\n",
      "weighted avg       0.77      0.56      0.45        34\n",
      "\n",
      "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.77      1.00      0.87        17\n",
      "           1       1.00      0.71      0.83        17\n",
      "\n",
      "    accuracy                           0.85        34\n",
      "   macro avg       0.89      0.85      0.85        34\n",
      "weighted avg       0.89      0.85      0.85        34\n",
      "\n",
      "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 0 1 1 0 1 1 1 1 1 1 1 0]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.57      1.00      0.72        17\n",
      "           1       1.00      0.24      0.38        17\n",
      "\n",
      "    accuracy                           0.62        34\n",
      "   macro avg       0.78      0.62      0.55        34\n",
      "weighted avg       0.78      0.62      0.55        34\n",
      "\n",
      "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 1]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/home/aaanpilov/.local/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1334: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "train_path = '/home/aaanpilov/diploma/project/numpy_matrixes/average_matrix/test/auc.npy'\n",
    "test_path = '/home/aaanpilov/diploma/project/numpy_matrixes/average_matrix/propose/HC/auc'\n",
    "\n",
    "matrix = np.load(train_path)\n",
    "model = train_best_model(matrix)\n",
    "\n",
    "for k in range(5):\n",
    "    matrix_test = np.load(test_path + str(k) + '.npy')\n",
    "    n_test = matrix_test.shape[0]    \n",
    "    labels_test = np.array([0] * (n_test//2) + [1] * (n_test//2))\n",
    "    print(classification_report(labels_test, model.predict(matrix_test)))\n",
    "    print(model.predict(matrix_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

==================================================

📁 notebooks/catboost_info
--------------------------------------------------

📄 notebooks/catboost_info/learn_error.tsv
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iter	Logloss
0	0.5597688968
1	0.4636582595
2	0.3885651002
3	0.3193856753
4	0.2691212801
5	0.2265260586
6	0.1930832496
7	0.1514257926
8	0.1292173129
9	0.11008347
10	0.09773819263
11	0.0882818974
12	0.08080603526
13	0.07150732554
14	0.06557814892
15	0.05971214863
16	0.05434921155
17	0.05017982538
18	0.04709427173
19	0.04347762695
20	0.04041578219
21	0.03744587531
22	0.03522211772
23	0.03255051833
24	0.03076625787
25	0.02915217326
26	0.02768558722
27	0.02611564214
28	0.02499203957
29	0.02399364343
30	0.02299315196
31	0.02163828795
32	0.02078301173
33	0.01988202563
34	0.01922628742
35	0.01868294409
36	0.01787973138
37	0.01715764633
38	0.01662449653
39	0.0161733868
40	0.01570789401
41	0.01506447104
42	0.01467471054
43	0.01419978646
44	0.01377206353
45	0.01328065762
46	0.01286609471
47	0.01239584845
48	0.01202438542
49	0.0117586278
50	0.01146889421
51	0.01113555752
52	0.0108785721
53	0.01061199032
54	0.01037498965
55	0.01015043488
56	0.009822207002
57	0.009603508963
58	0.009416901148
59	0.009238429941
60	0.008998596324
61	0.008803963088
62	0.008635969116
63	0.008437087903
64	0.00821842024
65	0.007999948584
66	0.007817092996
67	0.007678593581
68	0.007515626458
69	0.007295924311
70	0.007156695311
71	0.007015612263
72	0.006910220935
73	0.006778455124
74	0.006659385677
75	0.006539193483
76	0.006442615619
77	0.006337507413
78	0.006231435216
79	0.006126883511
80	0.00602636429
81	0.005929595003
82	0.005844031389
83	0.00576561804
84	0.005679857272
85	0.005593588719
86	0.005511189309
87	0.005439514151
88	0.005361348391
89	0.0053019409
90	0.005215585232
91	0.005146691432
92	0.005083227387
93	0.005024390725
94	0.004971451484
95	0.004909326824
96	0.004856887918
97	0.004796954875
98	0.004741751804
99	0.004688348335
100	0.004637001799
101	0.00458653701
102	0.004536991223
103	0.004488628644
104	0.004441612615
105	0.004397287678
106	0.004349952707
107	0.004318514696
108	0.004275084975
109	0.00423127642
110	0.004180779251
111	0.004138998687
112	0.00409864405
113	0.00405628664
114	0.004017731605
115	0.003974767832
116	0.003934129499
117	0.003894445415
118	0.003859975304
119	0.00382512464
120	0.003790919024
121	0.003756956699
122	0.003718935526
123	0.003678917885
124	0.003643731945
125	0.003612983685
126	0.003583155286
127	0.0035543906
128	0.003525623908
129	0.003490650883
130	0.003466124145
131	0.003438430337
132	0.003407879804
133	0.003381323356
134	0.003356080216
135	0.003319412183
136	0.003298835399
137	0.003274597801
138	0.003249658415
139	0.003217994594
140	0.003194028368
141	0.003173697167
142	0.003140600541
143	0.003122844948
144	0.003101021051
145	0.00307859681
146	0.00305733887
147	0.003035858274
148	0.003007404793
149	0.002986729718
150	0.002960438912
151	0.002935071977
152	0.0029098019
153	0.002886675871
154	0.002867820458
155	0.002845461552
156	0.002830072664
157	0.002802751672
158	0.002780401363
159	0.002757479652
160	0.002740430431
161	0.002722403178
162	0.002701200545
163	0.002675955112
164	0.002657328947
165	0.002643186312
166	0.00262425668
167	0.002603698235
168	0.002587997856
169	0.002571548693
170	0.002556997423
171	0.002537221003
172	0.002521326336
173	0.002502683264
174	0.002491822036
175	0.002475712448
176	0.002462124595
177	0.002446163732
178	0.002428562022
179	0.002412975121
180	0.002395424419
181	0.002382607557
182	0.00236454692
183	0.002350074741
184	0.002335329325
185	0.002323584774
186	0.002307370305
187	0.002292899272
188	0.002277555087
189	0.002263871523
190	0.002250844326
191	0.00223951228
192	0.002224733337
193	0.002213346844
194	0.00220214991
195	0.0021923438
196	0.002183390925
197	0.002169282964
198	0.002155632354
199	0.002143076406

==================================================

📄 notebooks/catboost_info/time_left.tsv
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iter	Passed	Remaining
0	6	1211
1	6	689
2	7	515
3	8	439
4	9	376
5	10	345
6	11	317
7	11	287
8	12	270
9	13	253
10	14	243
11	15	239
12	19	276
13	20	274
14	21	265
15	22	256
16	27	292
17	28	284
18	29	276
19	30	271
20	31	264
21	36	292
22	37	285
23	37	278
24	38	271
25	43	290
26	44	283
27	45	277
28	46	271
29	46	266
30	51	278
31	52	273
32	52	267
33	53	263
34	54	258
35	55	254
36	59	261
37	60	257
38	61	252
39	62	248
40	62	244
41	64	241
42	68	249
43	69	245
44	70	241
45	71	238
46	72	235
47	76	241
48	77	237
49	77	233
50	78	229
51	79	225
52	80	222
53	84	228
54	85	224
55	85	221
56	86	217
57	87	214
58	91	217
59	91	214
60	92	211
61	93	207
62	94	204
63	94	201
64	95	198
65	96	195
66	99	198
67	100	195
68	101	192
69	102	189
70	103	187
71	107	191
72	108	188
73	109	185
74	109	182
75	110	180
76	111	177
77	114	179
78	115	176
79	116	174
80	116	171
81	117	168
82	117	166
83	118	163
84	119	161
85	120	159
86	124	161
87	124	158
88	125	156
89	126	154
90	126	151
91	127	149
92	131	151
93	132	148
94	132	146
95	133	144
96	134	142
97	134	140
98	135	138
99	136	136
100	139	136
101	140	134
102	141	132
103	141	130
104	142	128
105	143	126
106	143	124
107	145	123
108	146	121
109	146	119
110	147	117
111	147	116
112	148	114
113	148	112
114	149	110
115	150	108
116	151	107
117	152	105
118	153	104
119	154	102
120	155	101
121	156	100
122	157	98
123	157	96
124	158	94
125	158	93
126	158	91
127	159	89
128	159	87
129	160	86
130	161	84
131	161	83
132	162	81
133	162	80
134	163	78
135	163	77
136	164	75
137	164	73
138	164	72
139	165	70
140	165	69
141	166	67
142	166	66
143	167	65
144	167	63
145	168	62
146	168	60
147	169	59
148	169	58
149	170	56
150	170	55
151	171	54
152	171	52
153	172	51
154	172	50
155	172	48
156	173	47
157	173	46
158	174	44
159	174	43
160	174	42
161	175	41
162	175	39
163	176	38
164	177	37
165	178	36
166	178	35
167	179	34
168	179	32
169	180	31
170	180	30
171	181	29
172	181	28
173	182	27
174	182	26
175	183	25
176	183	23
177	184	22
178	185	21
179	185	20
180	186	19
181	186	18
182	186	17
183	187	16
184	187	15
185	188	14
186	188	13
187	188	12
188	189	11
189	189	9
190	190	8
191	190	7
192	191	6
193	193	5
194	193	4
195	194	3
196	194	2
197	195	1
198	195	0
199	196	0
95	270	5
196	271	4
197	272	2
198	272	1
199	273	0
8	9
196	479	7
197	480	4
198	481	2
199	482	0

==================================================

📄 notebooks/catboost_info/catboost_training.json
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
"meta":{"test_sets":[],"test_metrics":[],"learn_metrics":[{"best_value":"Min","name":"Logloss"}],"launch_mode":"Train","parameters":"","iteration_count":200,"learn_sets":["learn"],"name":"experiment"},
"iterations":[
{"learn":[0.5597688968],"iteration":0,"passed_time":0.006088310005,"remaining_time":1.211573691},
{"learn":[0.4636582595],"iteration":1,"passed_time":0.00696324503,"remaining_time":0.6893612579},
{"learn":[0.3885651002],"iteration":2,"passed_time":0.007843240552,"remaining_time":0.5150394629},
{"learn":[0.3193856753],"iteration":3,"passed_time":0.008969577101,"remaining_time":0.439509278},
{"learn":[0.2691212801],"iteration":4,"passed_time":0.009650920527,"remaining_time":0.3763859005},
{"learn":[0.2265260586],"iteration":5,"passed_time":0.01067287053,"remaining_time":0.3450894804},
{"learn":[0.1930832496],"iteration":6,"passed_time":0.01150662012,"remaining_time":0.3172539546},
{"learn":[0.1514257926],"iteration":7,"passed_time":0.0119954141,"remaining_time":0.2878899385},
{"learn":[0.1292173129],"iteration":8,"passed_time":0.01272915623,"remaining_time":0.2701409822},
{"learn":[0.11008347],"iteration":9,"passed_time":0.01332752753,"remaining_time":0.2532230231},
{"learn":[0.09773819263],"iteration":10,"passed_time":0.01417546655,"remaining_time":0.243560289},
{"learn":[0.0882818974],"iteration":11,"passed_time":0.0152697466,"remaining_time":0.2392260301},
{"learn":[0.08080603526],"iteration":12,"passed_time":0.01925424231,"remaining_time":0.2769648702},
{"learn":[0.07150732554],"iteration":13,"passed_time":0.02068576195,"remaining_time":0.2748251231},
{"learn":[0.06557814892],"iteration":14,"passed_time":0.02156580758,"remaining_time":0.2659782935},
{"learn":[0.05971214863],"iteration":15,"passed_time":0.02233098492,"remaining_time":0.2568063265},
{"learn":[0.05434921155],"iteration":16,"passed_time":0.02714800768,"remaining_time":0.2922403179},
{"learn":[0.05017982538],"iteration":17,"passed_time":0.02810570439,"remaining_time":0.2841798999},
{"learn":[0.04709427173],"iteration":18,"passed_time":0.0290409846,"remaining_time":0.2766535901},
{"learn":[0.04347762695],"iteration":19,"passed_time":0.03014076606,"remaining_time":0.2712668945},
{"learn":[0.04041578219],"iteration":20,"passed_time":0.03105042311,"remaining_time":0.2646678922},
{"learn":[0.03744587531],"iteration":21,"passed_time":0.03610823538,"remaining_time":0.2921484499},
{"learn":[0.03522211772],"iteration":22,"passed_time":0.03705868706,"remaining_time":0.2851907657},
{"learn":[0.03255051833],"iteration":23,"passed_time":0.03793218912,"remaining_time":0.2781693868},
{"learn":[0.03076625787],"iteration":24,"passed_time":0.03875172923,"remaining_time":0.2712621046},
{"learn":[0.02915217326],"iteration":25,"passed_time":0.04345700016,"remaining_time":0.2908276165},
{"learn":[0.02768558722],"iteration":26,"passed_time":0.04426782218,"remaining_time":0.2836419718},
{"learn":[0.02611564214],"iteration":27,"passed_time":0.04512916902,"remaining_time":0.2772220383},
{"learn":[0.02499203957],"iteration":28,"passed_time":0.04604526944,"remaining_time":0.2715083129},
{"learn":[0.02399364343],"iteration":29,"passed_time":0.04695031693,"remaining_time":0.266051796},
{"learn":[0.02299315196],"iteration":30,"passed_time":0.05116489995,"remaining_time":0.2789312288},
{"learn":[0.02163828795],"iteration":31,"passed_time":0.05208780449,"remaining_time":0.2734609736},
{"learn":[0.02078301173],"iteration":32,"passed_time":0.05291359757,"remaining_time":0.2677748725},
{"learn":[0.01988202563],"iteration":33,"passed_time":0.05396881659,"remaining_time":0.2634948104},
{"learn":[0.01922628742],"iteration":34,"passed_time":0.05487270167,"remaining_time":0.2586855936},
{"learn":[0.01868294409],"iteration":35,"passed_time":0.05579008475,"remaining_time":0.2541548305},
{"learn":[0.01787973138],"iteration":36,"passed_time":0.05939962262,"remaining_time":0.2616794186},
{"learn":[0.01715764633],"iteration":37,"passed_time":0.06028828613,"remaining_time":0.257018483},
{"learn":[0.01662449653],"iteration":38,"passed_time":0.0611358644,"remaining_time":0.2523813889},
{"learn":[0.0161733868],"iteration":39,"passed_time":0.06206048249,"remaining_time":0.24824193},
{"learn":[0.01570789401],"iteration":40,"passed_time":0.06292940504,"remaining_time":0.2440433025},
{"learn":[0.01506447104],"iteration":41,"passed_time":0.06413639891,"remaining_time":0.2412750245},
{"learn":[0.01467471054],"iteration":42,"passed_time":0.06838810895,"remaining_time":0.2496961187},
{"learn":[0.01419978646],"iteration":43,"passed_time":0.06931906018,"remaining_time":0.245767577},
{"learn":[0.01377206353],"iteration":44,"passed_time":0.07019301317,"remaining_time":0.2417759342},
{"learn":[0.01328065762],"iteration":45,"passed_time":0.07115828559,"remaining_time":0.2382255648},
{"learn":[0.01286609471],"iteration":46,"passed_time":0.07220547796,"remaining_time":0.2350518751},
{"learn":[0.01239584845],"iteration":47,"passed_time":0.0763142615,"remaining_time":0.2416618281},
{"learn":[0.01202438542],"iteration":48,"passed_time":0.07715502564,"remaining_time":0.2377634464},
{"learn":[0.0117586278],"iteration":49,"passed_time":0.07790202527,"remaining_time":0.2337060758},
{"learn":[0.01146889421],"iteration":50,"passed_time":0.07859032312,"remaining_time":0.2296070224},
{"learn":[0.01113555752],"iteration":51,"passed_time":0.07927361058,"remaining_time":0.2256248916},
{"learn":[0.0108785721],"iteration":52,"passed_time":0.0801500387,"remaining_time":0.2223029375},
{"learn":[0.01061199032],"iteration":53,"passed_time":0.08444925729,"remaining_time":0.2283257697},
{"learn":[0.01037498965],"iteration":54,"passed_time":0.08520741005,"remaining_time":0.2246377174},
{"learn":[0.01015043488],"iteration":55,"passed_time":0.0859808846,"remaining_time":0.2210937033},
{"learn":[0.009822207002],"iteration":56,"passed_time":0.08675329695,"remaining_time":0.2176442362},
{"learn":[0.009603508963],"iteration":57,"passed_time":0.08754461852,"remaining_time":0.2143333764},
{"learn":[0.009416901148],"iteration":58,"passed_time":0.09115234263,"remaining_time":0.2178386493},
{"learn":[0.009238429941],"iteration":59,"passed_time":0.091909343,"remaining_time":0.2144551337},
{"learn":[0.008998596324],"iteration":60,"passed_time":0.09269700698,"remaining_time":0.2112276061},
{"learn":[0.008803963088],"iteration":61,"passed_time":0.09344162166,"remaining_time":0.2079829643},
{"learn":[0.008635969116],"iteration":62,"passed_time":0.09420110719,"remaining_time":0.2048500267},
{"learn":[0.008437087903],"iteration":63,"passed_time":0.09495934012,"remaining_time":0.2017885978},
{"learn":[0.00821842024],"iteration":64,"passed_time":0.09580695848,"remaining_time":0.198983683},
{"learn":[0.007999948584],"iteration":65,"passed_time":0.09651424572,"remaining_time":0.1959531656},
{"learn":[0.007817092996],"iteration":66,"passed_time":0.09985799222,"remaining_time":0.1982255666},
{"learn":[0.007678593581],"iteration":67,"passed_time":0.1006694456,"remaining_time":0.195417159},
{"learn":[0.007515626458],"iteration":68,"passed_time":0.1014232593,"remaining_time":0.1925572025},
{"learn":[0.007295924311],"iteration":69,"passed_time":0.1022780125,"remaining_time":0.1899448803},
{"learn":[0.007156695311],"iteration":70,"passed_time":0.1030199015,"remaining_time":0.1871770041},
{"learn":[0.007015612263],"iteration":71,"passed_time":0.1074974601,"remaining_time":0.1911065956},
{"learn":[0.006910220935],"iteration":72,"passed_time":0.1083359595,"remaining_time":0.1884748884},
{"learn":[0.006778455124],"iteration":73,"passed_time":0.1090258206,"remaining_time":0.1856385594},
{"learn":[0.006659385677],"iteration":74,"passed_time":0.1097687919,"remaining_time":0.1829479864},
{"learn":[0.006539193483],"iteration":75,"passed_time":0.1105274256,"remaining_time":0.1803342207},
{"learn":[0.006442615619],"iteration":76,"passed_time":0.111242018,"remaining_time":0.1776982885},
{"learn":[0.006337507413],"iteration":77,"passed_time":0.1146094737,"remaining_time":0.1792609717},
{"learn":[0.006231435216],"iteration":78,"passed_time":0.1154130206,"remaining_time":0.1767718417},
{"learn":[0.006126883511],"iteration":79,"passed_time":0.1161175321,"remaining_time":0.1741762982},
{"learn":[0.00602636429],"iteration":80,"passed_time":0.1167433604,"remaining_time":0.1715118504},
{"learn":[0.005929595003],"iteration":81,"passed_time":0.1173744696,"remaining_time":0.1689047245},
{"learn":[0.005844031389],"iteration":82,"passed_time":0.1179785928,"remaining_time":0.166307173},
{"learn":[0.00576561804],"iteration":83,"passed_time":0.1187021839,"remaining_time":0.1639220635},
{"learn":[0.005679857272],"iteration":84,"passed_time":0.1193922153,"remaining_time":0.1615306443},
{"learn":[0.005593588719],"iteration":85,"passed_time":0.1202335106,"remaining_time":0.1593793047},
{"learn":[0.005511189309],"iteration":86,"passed_time":0.1241930746,"remaining_time":0.1613082463},
{"learn":[0.005439514151],"iteration":87,"passed_time":0.1248311883,"remaining_time":0.1588760579},
{"learn":[0.005361348391],"iteration":88,"passed_time":0.1254487795,"remaining_time":0.1564585901},
{"learn":[0.0053019409],"iteration":89,"passed_time":0.1260777042,"remaining_time":0.1540949718},
{"learn":[0.005215585232],"iteration":90,"passed_time":0.1267595787,"remaining_time":0.151832902},
{"learn":[0.005146691432],"iteration":91,"passed_time":0.1275714329,"remaining_time":0.149757769},
{"learn":[0.005083227387],"iteration":92,"passed_time":0.1313287974,"remaining_time":0.1510987239},
{"learn":[0.005024390725],"iteration":93,"passed_time":0.1320770797,"remaining_time":0.1489379835},
{"learn":[0.004971451484],"iteration":94,"passed_time":0.1327576114,"remaining_time":0.1467320968},
{"learn":[0.004909326824],"iteration":95,"passed_time":0.1334253566,"remaining_time":0.1445441364},
{"learn":[0.004856887918],"iteration":96,"passed_time":0.134066176,"remaining_time":0.1423589292},
{"learn":[0.004796954875],"iteration":97,"passed_time":0.134713098,"remaining_time":0.1402115918},
{"learn":[0.004741751804],"iteration":98,"passed_time":0.1353272821,"remaining_time":0.1380611666},
{"learn":[0.004688348335],"iteration":99,"passed_time":0.1360869881,"remaining_time":0.1360869881},
{"learn":[0.004637001799],"iteration":100,"passed_time":0.1397043021,"remaining_time":0.1369378803},
{"learn":[0.00458653701],"iteration":101,"passed_time":0.1403817174,"remaining_time":0.134876552},
{"learn":[0.004536991223],"iteration":102,"passed_time":0.1410093093,"remaining_time":0.1327951748},
{"learn":[0.004488628644],"iteration":103,"passed_time":0.141701856,"remaining_time":0.1308017132},
{"learn":[0.004441612615],"iteration":104,"passed_time":0.1425779735,"remaining_time":0.1289991188},
{"learn":[0.004397287678],"iteration":105,"passed_time":0.143154309,"remaining_time":0.1269481609},
{"learn":[0.004349952707],"iteration":106,"passed_time":0.1436761616,"remaining_time":0.1248774115},
{"learn":[0.004318514696],"iteration":107,"passed_time":0.1454221837,"remaining_time":0.1238781565},
{"learn":[0.004275084975],"iteration":108,"passed_time":0.1460656485,"remaining_time":0.1219447157},
{"learn":[0.00423127642],"iteration":109,"passed_time":0.1466035544,"remaining_time":0.1199483627},
{"learn":[0.004180779251],"iteration":110,"passed_time":0.1471650292,"remaining_time":0.1179971855},
{"learn":[0.004138998687],"iteration":111,"passed_time":0.1476756785,"remaining_time":0.1160308902},
{"learn":[0.00409864405],"iteration":112,"passed_time":0.1481821592,"remaining_time":0.1140871491},
{"learn":[0.00405628664],"iteration":113,"passed_time":0.1487081303,"remaining_time":0.1121833263},
{"learn":[0.004017731605],"iteration":114,"passed_time":0.149215593,"remaining_time":0.1102897861},
{"learn":[0.003974767832],"iteration":115,"passed_time":0.1500605158,"remaining_time":0.1086645114},
{"learn":[0.003934129499],"iteration":116,"passed_time":0.1510908832,"remaining_time":0.1071841308},
{"learn":[0.003894445415],"iteration":117,"passed_time":0.1520468664,"remaining_time":0.1056596868},
{"learn":[0.003859975304],"iteration":118,"passed_time":0.1532167032,"remaining_time":0.104290361},
{"learn":[0.00382512464],"iteration":119,"passed_time":0.1542922744,"remaining_time":0.1028615163},
{"learn":[0.003790919024],"iteration":120,"passed_time":0.1558995787,"remaining_time":0.1017856753},
{"learn":[0.003756956699],"iteration":121,"passed_time":0.1565415104,"remaining_time":0.1000839165},
{"learn":[0.003718935526],"iteration":122,"passed_time":0.1571150201,"remaining_time":0.0983565573},
{"learn":[0.003678917885],"iteration":123,"passed_time":0.1576738494,"remaining_time":0.0966388109},
{"learn":[0.003643731945],"iteration":124,"passed_time":0.1580761139,"remaining_time":0.09484566831},
{"learn":[0.003612983685],"iteration":125,"passed_time":0.1584723057,"remaining_time":0.0930710367},
{"learn":[0.003583155286],"iteration":126,"passed_time":0.1588592785,"remaining_time":0.09131281363},
{"learn":[0.0035543906],"iteration":127,"passed_time":0.1592739187,"remaining_time":0.08959157925},
{"learn":[0.003525623908],"iteration":128,"passed_time":0.1597027883,"remaining_time":0.08789843389},
{"learn":[0.003490650883],"iteration":129,"passed_time":0.1602782321,"remaining_time":0.08630366343},
{"learn":[0.003466124145],"iteration":130,"passed_time":0.1612140835,"remaining_time":0.08491428824},
{"learn":[0.003438430337],"iteration":131,"passed_time":0.1617976942,"remaining_time":0.08335032729},
{"learn":[0.003407879804],"iteration":132,"passed_time":0.1623344577,"remaining_time":0.08177750874},
{"learn":[0.003381323356],"iteration":133,"passed_time":0.1628472414,"remaining_time":0.08020834278},
{"learn":[0.003356080216],"iteration":134,"passed_time":0.1632696276,"remaining_time":0.07861130219},
{"learn":[0.003319412183],"iteration":135,"passed_time":0.1636794478,"remaining_time":0.07702562249},
{"learn":[0.003298835399],"iteration":136,"passed_time":0.1640807904,"remaining_time":0.07545321017},
{"learn":[0.003274597801],"iteration":137,"passed_time":0.1644625623,"remaining_time":0.07388897728},
{"learn":[0.003249658415],"iteration":138,"passed_time":0.164893346,"remaining_time":0.07236326694},
{"learn":[0.003217994594],"iteration":139,"passed_time":0.1652981758,"remaining_time":0.07084207534},
{"learn":[0.003194028368],"iteration":140,"passed_time":0.1657139483,"remaining_time":0.06934129751},
{"learn":[0.003173697167],"iteration":141,"passed_time":0.16642822,"remaining_time":0.06797772367},
{"learn":[0.003140600541],"iteration":142,"passed_time":0.166887112,"remaining_time":0.06652143625},
{"learn":[0.003122844948],"iteration":143,"passed_time":0.1673032853,"remaining_time":0.06506238874},
{"learn":[0.003101021051],"iteration":144,"passed_time":0.1677371053,"remaining_time":0.06362441924},
{"learn":[0.00307859681],"iteration":145,"passed_time":0.1681775289,"remaining_time":0.06220264768},
{"learn":[0.00305733887],"iteration":146,"passed_time":0.1686072904,"remaining_time":0.06079038363},
{"learn":[0.003035858274],"iteration":147,"passed_time":0.1691452063,"remaining_time":0.05942939682},
{"learn":[0.003007404793],"iteration":148,"passed_time":0.1697385071,"remaining_time":0.05809841519},
{"learn":[0.002986729718],"iteration":149,"passed_time":0.1703368183,"remaining_time":0.05677893943},
{"learn":[0.002960438912],"iteration":150,"passed_time":0.1708764077,"remaining_time":0.0554499601},
{"learn":[0.002935071977],"iteration":151,"passed_time":0.1712868892,"remaining_time":0.05409059658},
{"learn":[0.0029098019],"iteration":152,"passed_time":0.1716987536,"remaining_time":0.05274406156},
{"learn":[0.002886675871],"iteration":153,"passed_time":0.1721035233,"remaining_time":0.05140754591},
{"learn":[0.002867820458],"iteration":154,"passed_time":0.1725194461,"remaining_time":0.0500862908},
{"learn":[0.002845461552],"iteration":155,"passed_time":0.1729162192,"remaining_time":0.04877124131},
{"learn":[0.002830072664],"iteration":156,"passed_time":0.1733221012,"remaining_time":0.0474703844},
{"learn":[0.002802751672],"iteration":157,"passed_time":0.1737089236,"remaining_time":0.04617578982},
{"learn":[0.002780401363],"iteration":158,"passed_time":0.1740863967,"remaining_time":0.04489020292},
{"learn":[0.002757479652],"iteration":159,"passed_time":0.1744747122,"remaining_time":0.04361867806},
{"learn":[0.002740430431],"iteration":160,"passed_time":0.1748704732,"remaining_time":0.04235992829},
{"learn":[0.002722403178],"iteration":161,"passed_time":0.1752958757,"remaining_time":0.04111878566},
{"learn":[0.002701200545],"iteration":162,"passed_time":0.1758287712,"remaining_time":0.03991205235},
{"learn":[0.002675955112],"iteration":163,"passed_time":0.1767725189,"remaining_time":0.03880372367},
{"learn":[0.002657328947],"iteration":164,"passed_time":0.1774341314,"remaining_time":0.03763754303},
{"learn":[0.002643186312],"iteration":165,"passed_time":0.1780314706,"remaining_time":0.03646427711},
{"learn":[0.00262425668],"iteration":166,"passed_time":0.1785919032,"remaining_time":0.0352906156},
{"learn":[0.002603698235],"iteration":167,"passed_time":0.1791907254,"remaining_time":0.03413156675},
{"learn":[0.002587997856],"iteration":168,"passed_time":0.17973284,"remaining_time":0.03296874581},
{"learn":[0.002571548693],"iteration":169,"passed_time":0.1802299012,"remaining_time":0.03180527668},
{"learn":[0.002556997423],"iteration":170,"passed_time":0.1807092456,"remaining_time":0.0306465972},
{"learn":[0.002537221003],"iteration":171,"passed_time":0.1812017573,"remaining_time":0.02949796048},
{"learn":[0.002521326336],"iteration":172,"passed_time":0.1817361559,"remaining_time":0.02836344629},
{"learn":[0.002502683264],"iteration":173,"passed_time":0.1823009876,"remaining_time":0.02724037745},
{"learn":[0.002491822036],"iteration":174,"passed_time":0.1828438337,"remaining_time":0.02612054767},
{"learn":[0.002475712448],"iteration":175,"passed_time":0.1833809579,"remaining_time":0.02500649427},
{"learn":[0.002462124595],"iteration":176,"passed_time":0.1839682062,"remaining_time":0.02390547312},
{"learn":[0.002446163732],"iteration":177,"passed_time":0.1845265745,"remaining_time":0.02280665527},
{"learn":[0.002428562022],"iteration":178,"passed_time":0.1850934004,"remaining_time":0.0217148682},
{"learn":[0.002412975121],"iteration":179,"passed_time":0.1856815104,"remaining_time":0.02063127893},
{"learn":[0.002395424419],"iteration":180,"passed_time":0.1861155307,"remaining_time":0.01953698941},
{"learn":[0.002382607557],"iteration":181,"passed_time":0.1864982146,"remaining_time":0.01844487837},
{"learn":[0.00236454692],"iteration":182,"passed_time":0.1869060607,"remaining_time":0.01736285809},
{"learn":[0.002350074741],"iteration":183,"passed_time":0.1873009999,"remaining_time":0.01628704347},
{"learn":[0.002335329325],"iteration":184,"passed_time":0.1877250897,"remaining_time":0.01522095322},
{"learn":[0.002323584774],"iteration":185,"passed_time":0.1881135155,"remaining_time":0.01415908181},
{"learn":[0.002307370305],"iteration":186,"passed_time":0.188504727,"remaining_time":0.01310460669},
{"learn":[0.002292899272],"iteration":187,"passed_time":0.1888894451,"remaining_time":0.01205677309},
{"learn":[0.002277555087],"iteration":188,"passed_time":0.1892894349,"remaining_time":0.01101684542},
{"learn":[0.002263871523],"iteration":189,"passed_time":0.1897695409,"remaining_time":0.009987870571},
{"learn":[0.002250844326],"iteration":190,"passed_time":0.1902387542,"remaining_time":0.00896412978},
{"learn":[0.00223951228],"iteration":191,"passed_time":0.1907204635,"remaining_time":0.00794668598},
{"learn":[0.002224733337],"iteration":192,"passed_time":0.1912930112,"remaining_time":0.006938088491},
{"learn":[0.002213346844],"iteration":193,"passed_time":0.1931713278,"remaining_time":0.005974370961},
{"learn":[0.00220214991],"iteration":194,"passed_time":0.1936975794,"remaining_time":0.004966604601},
{"learn":[0.0021923438],"iteration":195,"passed_time":0.1941858824,"remaining_time":0.003962977192},
{"learn":[0.002183390925],"iteration":196,"passed_time":0.1947912182,"remaining_time":0.002966363728},
{"learn":[0.002169282964],"iteration":197,"passed_time":0.1953187625,"remaining_time":0.001972916793},
{"learn":[0.002155632354],"iteration":198,"passed_time":0.1957978364,"remaining_time":0.0009839087254},
{"learn":[0.002143076406],"iteration":199,"passed_time":0.1962706372,"remaining_time":0}
]}
==================================================

📁 notebooks/catboost_info/tmp
--------------------------------------------------

📁 notebooks/catboost_info/learn
--------------------------------------------------

📄 notebooks/catboost_info/learn/events.out.tfevents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Ошибка чтения файла: 'utf-8' codec can't decode byte 0x80 in position 10: invalid start byte]

==================================================

📁 configs
--------------------------------------------------

📄 configs/raw_card_test_data.yaml
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
subjects:
- data_path: /home/aaanpilov/diploma/project/data/card_test_data/1374_Stolbov_A_P/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_test_data/1374_Stolbov_A_P/1374
    Столбов карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_test_data/1374_Stolbov_A_P.npy
- data_path: /home/aaanpilov/diploma/project/data/card_test_data/1386_Pitersky_A_Yu/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_test_data/1386_Pitersky_A_Yu/1386
    Питерский Карта + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_test_data/1386_Pitersky_A_Yu.npy
- data_path: /home/aaanpilov/diploma/project/data/card_test_data/1387_Shumov_A_D/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_test_data/1387_Shumov_A_D/1387
    Шумов карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_test_data/1387_Shumov_A_D.npy
- data_path: /home/aaanpilov/diploma/project/data/card_test_data/1392_Bushlakin_R_O/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_test_data/1392_Bushlakin_R_O/1392
    Бушлакин карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_test_data/1392_Bushlakin_R_O.npy
- data_path: /home/aaanpilov/diploma/project/data/card_test_data/1393_Rogachev_S_I/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_test_data/1393_Rogachev_S_I/1393
    Рогачёв карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_test_data/1393_Rogachev_S_I.npy
- data_path: /home/aaanpilov/diploma/project/data/card_test_data/1394_Bunin_D_L/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_test_data/1394_Bunin_D_L/1394
    Бунин карта + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_test_data/1394_Bunin_D_L.npy
- data_path: /home/aaanpilov/diploma/project/data/card_test_data/1396_Egorov_A_V/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_test_data/1396_Egorov_A_V/1396
    Егоров карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_test_data/1396_Egorov_A_V.npy
- data_path: /home/aaanpilov/diploma/project/data/card_test_data/1397_Korolev_B_S/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_test_data/1397_Korolev_B_S/1397
    Королев карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_test_data/1397_Korolev_B_S.npy
- data_path: /home/aaanpilov/diploma/project/data/card_test_data/1398_Kovalevsky_A_E/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_test_data/1398_Kovalevsky_A_E/1398
    Ковалевский карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_test_data/1398_Kovalevsky_A_E.npy
- data_path: /home/aaanpilov/diploma/project/data/card_test_data/1418_Egorov_N_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_test_data/1418_Egorov_N_A/1418
    Егоров карта нет.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_test_data/1418_Egorov_N_A.npy

==================================================

📄 configs/raw_hc_data.yaml
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
subjects:
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1136_DOROSHENKO_N_I__1136/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1136_DOROSHENKO_N_I__1136/Дорошенко
    имя.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_hc_data/1136_DOROSHENKO_N_I__1136.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1146_KRYLOV_V_O__1146/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1146_KRYLOV_V_O__1146/Крылов
    имя.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_hc_data/1146_KRYLOV_V_O__1146.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1152_BAKAEV_A_T__1152/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1152_BAKAEV_A_T__1152/Бакаев
    имя.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_hc_data/1152_BAKAEV_A_T__1152.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1153_ZYZYKIN_A_P__1153/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1153_ZYZYKIN_A_P__1153/ЗызыкинА
    имя.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_hc_data/1153_ZYZYKIN_A_P__1153.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1168_NESTER_A_O__1168/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1168_NESTER_A_O__1168/Нестер
    имя.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_hc_data/1168_NESTER_A_O__1168.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1186_MAGOMEDOV_A_A__1186/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1186_MAGOMEDOV_A_A__1186/Магомедов
    имя нет.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_hc_data/1186_MAGOMEDOV_A_A__1186.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1329_Lisitsin_I_S/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1329_Lisitsin_I_S/1329
    Лисицин имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_hc_data/1329_Lisitsin_I_S.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1339_Berdikov_P_G/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1339_Berdikov_P_G/1339
    Бердиков имя + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_hc_data/1339_Berdikov_P_G.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1342_Mozgovoi_V_V/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1342_Mozgovoi_V_V/1342
    Мозговой имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_hc_data/1342_Mozgovoi_V_V.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1350_Matveev_M_I/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1350_Matveev_M_I/1350
    Матвеев имя нет+ счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_hc_data/1350_Matveev_M_I.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1351_Kruglov_V_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1351_Kruglov_V_A/1351
    Круглов имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_hc_data/1351_Kruglov_V_A.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1352_Zemkin_V_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1352_Zemkin_V_A/1352 Земкин
    имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_hc_data/1352_Zemkin_V_A.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1357_Kozhanov_K_D/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1357_Kozhanov_K_D/1357
    Кожанов имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_hc_data/1357_Kozhanov_K_D.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1364_Nabiev_T_R/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1364_Nabiev_T_R/1364 Набиев
    имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_hc_data/1364_Nabiev_T_R.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1365_Dolgikh_S_V/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1365_Dolgikh_S_V/1365
    Долгих имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_hc_data/1365_Dolgikh_S_V.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1366_Dyatlov_G_I/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1366_Dyatlov_G_I/1366
    Дятлов имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_hc_data/1366_Dyatlov_G_I.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1373_Russak_D_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1373_Russak_D_A/1373 Руссак
    имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_hc_data/1373_Russak_D_A.npy

==================================================

📄 configs/card_hc_data.yaml
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
subjects:
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1136_DOROSHENKO_N_I__1136/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1136_DOROSHENKO_N_I__1136/Дороенко
    карта.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1136_DOROSHENKO_N_I__1136.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1146_KRYLOV_V_O__1146/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1146_KRYLOV_V_O__1146/Крылов
    карта.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1146_KRYLOV_V_O__1146.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1152_BAKAEV_A_T__1152/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1152_BAKAEV_A_T__1152/Бакаев
    карта.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1152_BAKAEV_A_T__1152.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1153_ZYZYKIN_A_P__1153/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1153_ZYZYKIN_A_P__1153/ЗызыкинА
    карта.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1153_ZYZYKIN_A_P__1153.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1168_NESTER_A_O__1168/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1168_NESTER_A_O__1168/Нестер
    карта.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1168_NESTER_A_O__1168.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1224_BALAKIN_K_A__1224/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1224_BALAKIN_K_A__1224/Балакин
    карта нет.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1224_BALAKIN_K_A__1224.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1329_Lisitsin_I_S/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1329_Lisitsin_I_S/1329
    Лисицин карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1329_Lisitsin_I_S.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1339_Berdikov_P_G/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1339_Berdikov_P_G/1339
    Бердиков карта + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1339_Berdikov_P_G.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1342_Mozgovoi_V_V/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1342_Mozgovoi_V_V/1342
    Мозговой карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1342_Mozgovoi_V_V.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1350_Matveev_M_I/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1350_Matveev_M_I/1350
    Матвеев карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1350_Matveev_M_I.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1351_Kruglov_V_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1351_Kruglov_V_A/1351
    Круглов карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1351_Kruglov_V_A.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1352_Zemkin_V_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1352_Zemkin_V_A/1352
    Земкин карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1352_Zemkin_V_A.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1357_Kozhanov_K_D/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1357_Kozhanov_K_D/1357
    Кожанов карта + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1357_Kozhanov_K_D.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1364_Nabiev_T_R/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1364_Nabiev_T_R/1364
    Набиев карта + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1364_Nabiev_T_R.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1365_Dolgikh_S_V/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1365_Dolgikh_S_V/1365
    Долгих карта.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1365_Dolgikh_S_V.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1366_Dyatlov_G_I/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1366_Dyatlov_G_I/1366
    Дятлов карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1366_Dyatlov_G_I.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1373_Russak_D_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1373_Russak_D_A/1373
    Руссак карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_hc_data/1373_Russak_D_A.npy

==================================================

📄 configs/test_data.yaml
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
subjects:
- data_path: /home/aaanpilov/diploma/project/data/test_data/1374_Stolbov_A_P/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/test_data/1374_Stolbov_A_P/1374
    Столбов имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/test_data/1374_Stolbov_A_P.npy
- data_path: /home/aaanpilov/diploma/project/data/test_data/1386_Pitersky_A_Yu/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/test_data/1386_Pitersky_A_Yu/1386
    Питерский имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/test_data/1386_Pitersky_A_Yu.npy
- data_path: /home/aaanpilov/diploma/project/data/test_data/1387_Shumov_A_D/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/test_data/1387_Shumov_A_D/1387
    Шумов имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/test_data/1387_Shumov_A_D.npy
- data_path: /home/aaanpilov/diploma/project/data/test_data/1392_Bushlakin_R_O/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/test_data/1392_Bushlakin_R_O/1392
    Бушлакин имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/test_data/1392_Bushlakin_R_O.npy
- data_path: /home/aaanpilov/diploma/project/data/test_data/1393_Rogachev_S_I/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/test_data/1393_Rogachev_S_I/1393
    Рогачёв имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/test_data/1393_Rogachev_S_I.npy
- data_path: /home/aaanpilov/diploma/project/data/test_data/1394_Bunin_D_L/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/test_data/1394_Bunin_D_L/1394
    Бунин имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/test_data/1394_Bunin_D_L.npy
- data_path: /home/aaanpilov/diploma/project/data/test_data/1396_Egorov_A_V/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/test_data/1396_Egorov_A_V/1396
    Егоров имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/test_data/1396_Egorov_A_V.npy
- data_path: /home/aaanpilov/diploma/project/data/test_data/1397_Korolev_B_S/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/test_data/1397_Korolev_B_S/1397
    Королев имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/test_data/1397_Korolev_B_S.npy
- data_path: /home/aaanpilov/diploma/project/data/test_data/1398_Kovalevsky_A_E/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/test_data/1398_Kovalevsky_A_E/1398
    Ковалевский имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/test_data/1398_Kovalevsky_A_E.npy
- data_path: /home/aaanpilov/diploma/project/data/test_data/1418_Egorov_N_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/test_data/1418_Egorov_N_A/1418
    Егоров имя нет.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/test_data/1418_Egorov_N_A.npy

==================================================

📄 configs/hc_data.yaml
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
subjects:
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1136_DOROSHENKO_N_I__1136/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1136_DOROSHENKO_N_I__1136/Дорошенко
    имя.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/hc_data/1136_DOROSHENKO_N_I__1136.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1146_KRYLOV_V_O__1146/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1146_KRYLOV_V_O__1146/Крылов
    имя.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/hc_data/1146_KRYLOV_V_O__1146.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1152_BAKAEV_A_T__1152/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1152_BAKAEV_A_T__1152/Бакаев
    имя.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/hc_data/1152_BAKAEV_A_T__1152.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1153_ZYZYKIN_A_P__1153/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1153_ZYZYKIN_A_P__1153/ЗызыкинА
    имя.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/hc_data/1153_ZYZYKIN_A_P__1153.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1168_NESTER_A_O__1168/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1168_NESTER_A_O__1168/Нестер
    имя.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/hc_data/1168_NESTER_A_O__1168.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1186_MAGOMEDOV_A_A__1186/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1186_MAGOMEDOV_A_A__1186/Магомедов
    имя нет.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/hc_data/1186_MAGOMEDOV_A_A__1186.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1329_Lisitsin_I_S/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1329_Lisitsin_I_S/1329
    Лисицин имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/hc_data/1329_Lisitsin_I_S.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1339_Berdikov_P_G/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1339_Berdikov_P_G/1339
    Бердиков имя + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/hc_data/1339_Berdikov_P_G.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1342_Mozgovoi_V_V/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1342_Mozgovoi_V_V/1342
    Мозговой имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/hc_data/1342_Mozgovoi_V_V.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1350_Matveev_M_I/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1350_Matveev_M_I/1350
    Матвеев имя нет+ счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/hc_data/1350_Matveev_M_I.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1351_Kruglov_V_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1351_Kruglov_V_A/1351
    Круглов имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/hc_data/1351_Kruglov_V_A.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1352_Zemkin_V_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1352_Zemkin_V_A/1352 Земкин
    имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/hc_data/1352_Zemkin_V_A.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1357_Kozhanov_K_D/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1357_Kozhanov_K_D/1357
    Кожанов имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/hc_data/1357_Kozhanov_K_D.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1364_Nabiev_T_R/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1364_Nabiev_T_R/1364 Набиев
    имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/hc_data/1364_Nabiev_T_R.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1365_Dolgikh_S_V/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1365_Dolgikh_S_V/1365
    Долгих имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/hc_data/1365_Dolgikh_S_V.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1366_Dyatlov_G_I/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1366_Dyatlov_G_I/1366
    Дятлов имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/hc_data/1366_Dyatlov_G_I.npy
- data_path: /home/aaanpilov/diploma/project/data/hc_data/1373_Russak_D_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/hc_data/1373_Russak_D_A/1373 Руссак
    имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/hc_data/1373_Russak_D_A.npy

==================================================

📄 configs/raw_test_data.yaml
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
subjects:
- data_path: /home/aaanpilov/diploma/project/data/test_data/1374_Stolbov_A_P/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/test_data/1374_Stolbov_A_P/1374
    Столбов имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_test_data/1374_Stolbov_A_P.npy
- data_path: /home/aaanpilov/diploma/project/data/test_data/1386_Pitersky_A_Yu/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/test_data/1386_Pitersky_A_Yu/1386
    Питерский имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_test_data/1386_Pitersky_A_Yu.npy
- data_path: /home/aaanpilov/diploma/project/data/test_data/1387_Shumov_A_D/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/test_data/1387_Shumov_A_D/1387
    Шумов имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_test_data/1387_Shumov_A_D.npy
- data_path: /home/aaanpilov/diploma/project/data/test_data/1392_Bushlakin_R_O/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/test_data/1392_Bushlakin_R_O/1392
    Бушлакин имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_test_data/1392_Bushlakin_R_O.npy
- data_path: /home/aaanpilov/diploma/project/data/test_data/1393_Rogachev_S_I/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/test_data/1393_Rogachev_S_I/1393
    Рогачёв имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_test_data/1393_Rogachev_S_I.npy
- data_path: /home/aaanpilov/diploma/project/data/test_data/1394_Bunin_D_L/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/test_data/1394_Bunin_D_L/1394
    Бунин имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_test_data/1394_Bunin_D_L.npy
- data_path: /home/aaanpilov/diploma/project/data/test_data/1396_Egorov_A_V/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/test_data/1396_Egorov_A_V/1396
    Егоров имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_test_data/1396_Egorov_A_V.npy
- data_path: /home/aaanpilov/diploma/project/data/test_data/1397_Korolev_B_S/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/test_data/1397_Korolev_B_S/1397
    Королев имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_test_data/1397_Korolev_B_S.npy
- data_path: /home/aaanpilov/diploma/project/data/test_data/1398_Kovalevsky_A_E/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/test_data/1398_Kovalevsky_A_E/1398
    Ковалевский имя нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_test_data/1398_Kovalevsky_A_E.npy
- data_path: /home/aaanpilov/diploma/project/data/test_data/1418_Egorov_N_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/test_data/1418_Egorov_N_A/1418
    Егоров имя нет.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_test_data/1418_Egorov_N_A.npy

==================================================

📄 configs/raw_card_hc_data.yaml
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
subjects:
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1136_DOROSHENKO_N_I__1136/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1136_DOROSHENKO_N_I__1136/Дороенко
    карта.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_hc_data/1136_DOROSHENKO_N_I__1136.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1146_KRYLOV_V_O__1146/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1146_KRYLOV_V_O__1146/Крылов
    карта.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_hc_data/1146_KRYLOV_V_O__1146.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1152_BAKAEV_A_T__1152/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1152_BAKAEV_A_T__1152/Бакаев
    карта.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_hc_data/1152_BAKAEV_A_T__1152.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1153_ZYZYKIN_A_P__1153/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1153_ZYZYKIN_A_P__1153/ЗызыкинА
    карта.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_hc_data/1153_ZYZYKIN_A_P__1153.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1168_NESTER_A_O__1168/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1168_NESTER_A_O__1168/Нестер
    карта.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_hc_data/1168_NESTER_A_O__1168.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1224_BALAKIN_K_A__1224/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1224_BALAKIN_K_A__1224/Балакин
    карта нет.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_hc_data/1224_BALAKIN_K_A__1224.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1329_Lisitsin_I_S/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1329_Lisitsin_I_S/1329
    Лисицин карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_hc_data/1329_Lisitsin_I_S.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1339_Berdikov_P_G/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1339_Berdikov_P_G/1339
    Бердиков карта + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_hc_data/1339_Berdikov_P_G.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1342_Mozgovoi_V_V/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1342_Mozgovoi_V_V/1342
    Мозговой карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_hc_data/1342_Mozgovoi_V_V.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1350_Matveev_M_I/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1350_Matveev_M_I/1350
    Матвеев карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_hc_data/1350_Matveev_M_I.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1351_Kruglov_V_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1351_Kruglov_V_A/1351
    Круглов карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_hc_data/1351_Kruglov_V_A.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1352_Zemkin_V_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1352_Zemkin_V_A/1352
    Земкин карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_hc_data/1352_Zemkin_V_A.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1357_Kozhanov_K_D/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1357_Kozhanov_K_D/1357
    Кожанов карта + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_hc_data/1357_Kozhanov_K_D.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1364_Nabiev_T_R/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1364_Nabiev_T_R/1364
    Набиев карта + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_hc_data/1364_Nabiev_T_R.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1365_Dolgikh_S_V/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1365_Dolgikh_S_V/1365
    Долгих карта.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_hc_data/1365_Dolgikh_S_V.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1366_Dyatlov_G_I/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1366_Dyatlov_G_I/1366
    Дятлов карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_hc_data/1366_Dyatlov_G_I.npy
- data_path: /home/aaanpilov/diploma/project/data/card_hc_data/1373_Russak_D_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_hc_data/1373_Russak_D_A/1373
    Руссак карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_card_hc_data/1373_Russak_D_A.npy

==================================================

📄 configs/schz_data.yaml
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
subjects:
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1154_TYULGANOVA_D_A__1154/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1154_TYULGANOVA_D_A__1154/Тюльганова
    имя.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/schz_data/1154_TYULGANOVA_D_A__1154.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1158_POCHENCHUK_K_A__1158/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1158_POCHENCHUK_K_A__1158/Поченчук
    имя нет.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/schz_data/1158_POCHENCHUK_K_A__1158.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1165_Kolykhalova_K_O/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1165_Kolykhalova_K_O/Колыхалова
    имя нет.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/schz_data/1165_Kolykhalova_K_O.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1173_Bartashev_A_S/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1173_Bartashev_A_S/Барташев
    имя да-нет.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/schz_data/1173_Bartashev_A_S.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1177_Ivanov_S_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1177_Ivanov_S_A/Иванов
    имя да-нет.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/schz_data/1177_Ivanov_S_A.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1178_Finogenov_A_V/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1178_Finogenov_A_V/Финогенов
    имя нет.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/schz_data/1178_Finogenov_A_V.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1184_Linichenko_A_G/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1184_Linichenko_A_G/Линиченко
    имя нет.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/schz_data/1184_Linichenko_A_G.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1193_Ulyanova_E_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1193_Ulyanova_E_A/Ульянова
    имя нет.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/schz_data/1193_Ulyanova_E_A.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1202_Shtamburg_N_S/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1202_Shtamburg_N_S/Штамбург
    имя нет.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/schz_data/1202_Shtamburg_N_S.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1206_Buynitsky_D_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1206_Buynitsky_D_A/Буйницкий
    имя нет.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/schz_data/1206_Buynitsky_D_A.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1220_Ibragimova_K_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1220_Ibragimova_K_A/ИбрагимоваК
    имя нет.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/schz_data/1220_Ibragimova_K_A.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1221_Ibragimova_V_Kh/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1221_Ibragimova_V_Kh/ИбрагимоваВ
    имя нет.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/schz_data/1221_Ibragimova_V_Kh.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1227_Gavrilov_A_M/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1227_Gavrilov_A_M/Гаврилов
    имя нет.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/schz_data/1227_Gavrilov_A_M.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1234_Kuzin_M_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1234_Kuzin_M_A/Кузин
    имя нет.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/schz_data/1234_Kuzin_M_A.npy
# - data_path: /home/aaanpilov/diploma/project/data/schz_data/1506_Nikishova_Anna/sdenoised_data.nii.gz
#   events_path: /home/aaanpilov/diploma/project/data/schz_data/1506_Nikishova_Anna/2021-5-13-11h-20m-19s.txt
#   tr: 1.11
#   numpy_path: /home/aaanpilov/diploma/project/numpy_data/schz_data/1506_Nikishova_Anna.npy
# - data_path: /home/aaanpilov/diploma/project/data/schz_data/1507_Tkach_A_M/sdenoised_data.nii.gz
#   events_path: /home/aaanpilov/diploma/project/data/schz_data/1507_Tkach_A_M/2021-5-20-14h-46m-34s.txt
#   tr: 1.11
#   numpy_path: /home/aaanpilov/diploma/project/numpy_data/schz_data/1507_Tkach_A_M.npy
# - data_path: /home/aaanpilov/diploma/project/data/schz_data/1508_Shostak_A_A/sdenoised_data.nii.gz
#   events_path: /home/aaanpilov/diploma/project/data/schz_data/1508_Shostak_A_A/2021-5-25-10h-54m-42s.txt
#   tr: 1.11
#   numpy_path: /home/aaanpilov/diploma/project/numpy_data/schz_data/1508_Shostak_A_A.npy
# - data_path: /home/aaanpilov/diploma/project/data/schz_data/1509_Bogomolova_M_M/sdenoised_data.nii.gz
#   events_path: /home/aaanpilov/diploma/project/data/schz_data/1509_Bogomolova_M_M/2021-5-27-11h-53m-46s.txt
#   tr: 1.11
#   numpy_path: /home/aaanpilov/diploma/project/numpy_data/schz_data/1509_Bogomolova_M_M.npy
# - data_path: /home/aaanpilov/diploma/project/data/schz_data/1510_Foltsov_P_I/sdenoised_data.nii.gz
#   events_path: /home/aaanpilov/diploma/project/data/schz_data/1510_Foltsov_P_I/2021-6-1-11h-1m-5s.txt
#   tr: 1.11
#   numpy_path: /home/aaanpilov/diploma/project/numpy_data/schz_data/1510_Foltsov_P_I.npy

==================================================

📄 configs/raw_schz_data.yaml
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
subjects:
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1154_TYULGANOVA_D_A__1154/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1154_TYULGANOVA_D_A__1154/Тюльганова
    имя.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_schz_data/1154_TYULGANOVA_D_A__1154.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1158_POCHENCHUK_K_A__1158/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1158_POCHENCHUK_K_A__1158/Поченчук
    имя нет.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_schz_data/1158_POCHENCHUK_K_A__1158.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1165_Kolykhalova_K_O/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1165_Kolykhalova_K_O/Колыхалова
    имя нет.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_schz_data/1165_Kolykhalova_K_O.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1173_Bartashev_A_S/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1173_Bartashev_A_S/Барташев
    имя да-нет.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_schz_data/1173_Bartashev_A_S.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1177_Ivanov_S_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1177_Ivanov_S_A/Иванов
    имя да-нет.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_schz_data/1177_Ivanov_S_A.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1178_Finogenov_A_V/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1178_Finogenov_A_V/Финогенов
    имя нет.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_schz_data/1178_Finogenov_A_V.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1184_Linichenko_A_G/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1184_Linichenko_A_G/Линиченко
    имя нет.txt
  tr: 1.0
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_schz_data/1184_Linichenko_A_G.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1193_Ulyanova_E_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1193_Ulyanova_E_A/Ульянова
    имя нет.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_schz_data/1193_Ulyanova_E_A.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1202_Shtamburg_N_S/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1202_Shtamburg_N_S/Штамбург
    имя нет.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_schz_data/1202_Shtamburg_N_S.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1206_Buynitsky_D_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1206_Buynitsky_D_A/Буйницкий
    имя нет.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_schz_data/1206_Buynitsky_D_A.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1220_Ibragimova_K_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1220_Ibragimova_K_A/ИбрагимоваК
    имя нет.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_schz_data/1220_Ibragimova_K_A.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1221_Ibragimova_V_Kh/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1221_Ibragimova_V_Kh/ИбрагимоваВ
    имя нет.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_schz_data/1221_Ibragimova_V_Kh.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1227_Gavrilov_A_M/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1227_Gavrilov_A_M/Гаврилов
    имя нет.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_schz_data/1227_Gavrilov_A_M.npy
- data_path: /home/aaanpilov/diploma/project/data/schz_data/1234_Kuzin_M_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/schz_data/1234_Kuzin_M_A/Кузин
    имя нет.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_schz_data/1234_Kuzin_M_A.npy
# - data_path: /home/aaanpilov/diploma/project/data/schz_data/1506_Nikishova_Anna/sdenoised_data.nii.gz
#   events_path: /home/aaanpilov/diploma/project/data/schz_data/1506_Nikishova_Anna/2021-5-13-11h-20m-19s.txt
#   tr: 1.11
#   numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_schz_data/1506_Nikishova_Anna.npy
# - data_path: /home/aaanpilov/diploma/project/data/schz_data/1507_Tkach_A_M/sdenoised_data.nii.gz
#   events_path: /home/aaanpilov/diploma/project/data/schz_data/1507_Tkach_A_M/2021-5-20-14h-46m-34s.txt
#   tr: 1.11
#   numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_schz_data/1507_Tkach_A_M.npy
# - data_path: /home/aaanpilov/diploma/project/data/schz_data/1508_Shostak_A_A/sdenoised_data.nii.gz
#   events_path: /home/aaanpilov/diploma/project/data/schz_data/1508_Shostak_A_A/2021-5-25-10h-54m-42s.txt
#   tr: 1.11
#   numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_schz_data/1508_Shostak_A_A.npy
# - data_path: /home/aaanpilov/diploma/project/data/schz_data/1509_Bogomolova_M_M/sdenoised_data.nii.gz
#   events_path: /home/aaanpilov/diploma/project/data/schz_data/1509_Bogomolova_M_M/2021-5-27-11h-53m-46s.txt
#   tr: 1.11
#   numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_schz_data/1509_Bogomolova_M_M.npy
# - data_path: /home/aaanpilov/diploma/project/data/schz_data/1510_Foltsov_P_I/sdenoised_data.nii.gz
#   events_path: /home/aaanpilov/diploma/project/data/schz_data/1510_Foltsov_P_I/2021-6-1-11h-1m-5s.txt
#   tr: 1.11
#   numpy_path: /home/aaanpilov/diploma/project/numpy_data/raw_schz_data/1510_Foltsov_P_I.npy

==================================================

📄 configs/card_test_data.yaml
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
subjects:
- data_path: /home/aaanpilov/diploma/project/data/card_test_data/1374_Stolbov_A_P/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_test_data/1374_Stolbov_A_P/1374
    Столбов карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_test_data/1374_Stolbov_A_P.npy
- data_path: /home/aaanpilov/diploma/project/data/card_test_data/1386_Pitersky_A_Yu/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_test_data/1386_Pitersky_A_Yu/1386
    Питерский Карта + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_test_data/1386_Pitersky_A_Yu.npy
- data_path: /home/aaanpilov/diploma/project/data/card_test_data/1387_Shumov_A_D/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_test_data/1387_Shumov_A_D/1387
    Шумов карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_test_data/1387_Shumov_A_D.npy
- data_path: /home/aaanpilov/diploma/project/data/card_test_data/1392_Bushlakin_R_O/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_test_data/1392_Bushlakin_R_O/1392
    Бушлакин карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_test_data/1392_Bushlakin_R_O.npy
- data_path: /home/aaanpilov/diploma/project/data/card_test_data/1393_Rogachev_S_I/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_test_data/1393_Rogachev_S_I/1393
    Рогачёв карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_test_data/1393_Rogachev_S_I.npy
- data_path: /home/aaanpilov/diploma/project/data/card_test_data/1394_Bunin_D_L/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_test_data/1394_Bunin_D_L/1394
    Бунин карта + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_test_data/1394_Bunin_D_L.npy
- data_path: /home/aaanpilov/diploma/project/data/card_test_data/1396_Egorov_A_V/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_test_data/1396_Egorov_A_V/1396
    Егоров карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_test_data/1396_Egorov_A_V.npy
- data_path: /home/aaanpilov/diploma/project/data/card_test_data/1397_Korolev_B_S/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_test_data/1397_Korolev_B_S/1397
    Королев карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_test_data/1397_Korolev_B_S.npy
- data_path: /home/aaanpilov/diploma/project/data/card_test_data/1398_Kovalevsky_A_E/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_test_data/1398_Kovalevsky_A_E/1398
    Ковалевский карта нет + счёт.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_test_data/1398_Kovalevsky_A_E.npy
- data_path: /home/aaanpilov/diploma/project/data/card_test_data/1418_Egorov_N_A/sdenoised_data.nii.gz
  events_path: /home/aaanpilov/diploma/project/data/card_test_data/1418_Egorov_N_A/1418
    Егоров карта нет.txt
  tr: 1.11
  numpy_path: /home/aaanpilov/diploma/project/numpy_data/card_test_data/1418_Egorov_N_A.npy

==================================================
